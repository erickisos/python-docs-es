# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to get
# the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-21 16:38-0300\n"
"PO-Revision-Date: 2023-11-02 11:48-0300\n"
"Last-Translator: Alfonso Areiza Guerra <alfareiza@gmail.com>\n"
"Language: es\n"
"Language-Team: python-doc-es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../Doc/howto/argparse.rst:5
msgid "Argparse Tutorial"
msgstr "Tutorial de *argparse*"

#: ../Doc/howto/argparse.rst
msgid "author"
msgstr "autor"

#: ../Doc/howto/argparse.rst:7
msgid "Tshepang Mbambo"
msgstr "Tshepang Mbambo"

#: ../Doc/howto/argparse.rst:11
msgid ""
"This tutorial is intended to be a gentle introduction to :mod:`argparse`, "
"the recommended command-line parsing module in the Python standard library."
msgstr ""
"Este tutorial pretende ser una leve introducción a :mod:`argparse`, el "
"módulo de análisis (*parsing*) de línea de comandos recomendado en la "
"biblioteca estándar de Python."

#: ../Doc/howto/argparse.rst:16
msgid ""
"There are two other modules that fulfill the same task, namely :mod:`getopt` "
"(an equivalent for ``getopt()`` from the C language) and the deprecated :mod:"
"`optparse`. Note also that :mod:`argparse` is based on :mod:`optparse`, and "
"therefore very similar in terms of usage."
msgstr ""
"Hay otros dos módulos que cumplen la misma tarea, llamados :mod:`getopt` (un "
"equivalente a ``getopt()`` del lenguaje C) y el deprecado :mod:`optparse`. "
"Tenga en cuenta también que :mod:`argparse` está basado en :mod:`optparse`, "
"y por lo tanto muy similar en el uso."

#: ../Doc/howto/argparse.rst:24
msgid "Concepts"
msgstr "Conceptos"

#: ../Doc/howto/argparse.rst:26
msgid ""
"Let's show the sort of functionality that we are going to explore in this "
"introductory tutorial by making use of the :command:`ls` command:"
msgstr ""
"Vamos a mostrar el tipo de funcionalidad que vamos a explorar en este "
"tutorial introductorio haciendo uso del comando :command:`ls`:"

#: ../Doc/howto/argparse.rst:29
msgid ""
"$ ls\n"
"cpython  devguide  prog.py  pypy  rm-unused-function.patch\n"
"$ ls pypy\n"
"ctypes_configure  demo  dotviewer  include  lib_pypy  lib-python ...\n"
"$ ls -l\n"
"total 20\n"
"drwxr-xr-x 19 wena wena 4096 Feb 18 18:51 cpython\n"
"drwxr-xr-x  4 wena wena 4096 Feb  8 12:04 devguide\n"
"-rwxr-xr-x  1 wena wena  535 Feb 19 00:05 prog.py\n"
"drwxr-xr-x 14 wena wena 4096 Feb  7 00:59 pypy\n"
"-rw-r--r--  1 wena wena  741 Feb 18 01:01 rm-unused-function.patch\n"
"$ ls --help\n"
"Usage: ls [OPTION]... [FILE]...\n"
"List information about the FILEs (the current directory by default).\n"
"Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.\n"
"..."
msgstr ""

#: ../Doc/howto/argparse.rst:48
msgid "A few concepts we can learn from the four commands:"
msgstr "Algunos conceptos que podemos aprender de los cuatro comandos:"

#: ../Doc/howto/argparse.rst:50
msgid ""
"The :command:`ls` command is useful when run without any options at all. It "
"defaults to displaying the contents of the current directory."
msgstr ""
"El comando :command:`ls` es útil cuando se ejecuta sin ninguna opción en "
"absoluto. Por defecto muestra el contenido del directorio actual."

#: ../Doc/howto/argparse.rst:53
msgid ""
"If we want beyond what it provides by default, we tell it a bit more. In "
"this case, we want it to display a different directory, ``pypy``. What we "
"did is specify what is known as a positional argument. It's named so because "
"the program should know what to do with the value, solely based on where it "
"appears on the command line. This concept is more relevant to a command "
"like :command:`cp`, whose most basic usage is ``cp SRC DEST``. The first "
"position is *what you want copied,* and the second position is *where you "
"want it copied to*."
msgstr ""
"Si queremos hacer algo, mas allá de lo que provee por defecto, le contamos "
"un poco mas. En este caso, queremos mostrar un directorio diferente, "
"``pypy``. Lo que hicimos fue especificar lo que se conoce como argumento "
"posicional. Se llama así porque el programa debe saber que hacer con ese "
"valor, basado únicamente en función de donde aparece en la línea de "
"comandos. Este concepto es mas relevante para un comando como :command:`cp`, "
"cuyo uso mas básico es ``cp SRC DEST``. La primer posición es *lo que "
"quieres copiar*, y la segunda posición es *a donde lo quieres copiar*."

#: ../Doc/howto/argparse.rst:62
msgid ""
"Now, say we want to change behaviour of the program. In our example, we "
"display more info for each file instead of just showing the file names. The "
"``-l`` in that case is known as an optional argument."
msgstr ""
"Ahora, digamos que queremos cambiar el comportamiento del programa. En "
"nuestro ejemplo, mostramos mas información para cada archivo en lugar de "
"solo mostrar los nombres de los archivos. El argumento ``-l`` en ese caso se "
"conoce como argumento opcional."

#: ../Doc/howto/argparse.rst:66
msgid ""
"That's a snippet of the help text. It's very useful in that you can come "
"across a program you have never used before, and can figure out how it works "
"simply by reading its help text."
msgstr ""
"Este es un fragmento del texto de ayuda. Es muy útil porque puedes encontrar "
"un programa que nunca has usado antes, y puedes darte cuenta de como "
"funciona simplemente leyendo el texto de ayuda."

#: ../Doc/howto/argparse.rst:72
msgid "The basics"
msgstr "Las bases"

#: ../Doc/howto/argparse.rst:74
msgid "Let us start with a very simple example which does (almost) nothing::"
msgstr "Comencemos con un simple ejemplo, el cual no hace (casi) nada::"

#: ../Doc/howto/argparse.rst:76
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.parse_args()"
msgstr ""

#: ../Doc/howto/argparse.rst:80 ../Doc/howto/argparse.rst:188
#: ../Doc/howto/argparse.rst:209
msgid "Following is a result of running the code:"
msgstr "Lo siguiente es el resultado de ejecutar el código:"

#: ../Doc/howto/argparse.rst:82
msgid ""
"$ python prog.py\n"
"$ python prog.py --help\n"
"usage: prog.py [-h]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"$ python prog.py --verbose\n"
"usage: prog.py [-h]\n"
"prog.py: error: unrecognized arguments: --verbose\n"
"$ python prog.py foo\n"
"usage: prog.py [-h]\n"
"prog.py: error: unrecognized arguments: foo"
msgstr ""

#: ../Doc/howto/argparse.rst:97 ../Doc/howto/argparse.rst:254
#: ../Doc/howto/argparse.rst:298
msgid "Here is what is happening:"
msgstr "Esto es lo que está pasando:"

#: ../Doc/howto/argparse.rst:99
msgid ""
"Running the script without any options results in nothing displayed to "
"stdout. Not so useful."
msgstr ""
"Ejecutar el script sin ninguna opción da como resultado que no se muestra "
"nada en *stdout*. No es tan útil."

#: ../Doc/howto/argparse.rst:102
msgid ""
"The second one starts to display the usefulness of the :mod:`argparse` "
"module. We have done almost nothing, but already we get a nice help message."
msgstr ""
"El segundo comienza a mostrar la utilidad del módulo :mod:`argparse`. No "
"hemos hecho casi nada, pero ya recibimos un buen mensaje de ayuda."

#: ../Doc/howto/argparse.rst:105
msgid ""
"The ``--help`` option, which can also be shortened to ``-h``, is the only "
"option we get for free (i.e. no need to specify it). Specifying anything "
"else results in an error. But even then, we do get a useful usage message, "
"also for free."
msgstr ""
"La opción ``--help``, que también puede ser abreviada como ``-h``, es la "
"única opción que tenemos gratis (es decir, no necesitamos especificarla). "
"Especificar cualquier otra cosa da como resultado un error. Pero aún así, "
"recibimos un mensaje útil, también gratis."

#: ../Doc/howto/argparse.rst:112
msgid "Introducing Positional arguments"
msgstr "Introducción a los argumentos posicionales"

#: ../Doc/howto/argparse.rst:114
msgid "An example::"
msgstr "Un ejemplo::"

#: ../Doc/howto/argparse.rst:116
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"echo\")\n"
"args = parser.parse_args()\n"
"print(args.echo)"
msgstr ""

#: ../Doc/howto/argparse.rst:122
msgid "And running the code:"
msgstr "Y ejecutando el código:"

#: ../Doc/howto/argparse.rst:124
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] echo\n"
"prog.py: error: the following arguments are required: echo\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] echo\n"
"\n"
"positional arguments:\n"
"  echo\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"$ python prog.py foo\n"
"foo"
msgstr ""

#: ../Doc/howto/argparse.rst:140
msgid "Here is what's happening:"
msgstr "Aquí está lo que está sucediendo:"

#: ../Doc/howto/argparse.rst:142
msgid ""
"We've added the :meth:`~ArgumentParser.add_argument` method, which is what "
"we use to specify which command-line options the program is willing to "
"accept. In this case, I've named it ``echo`` so that it's in line with its "
"function."
msgstr ""
"Hemos agregado el método :meth:`~ArgumentParser.add_argument`, el cual es el "
"que usamos para especificar cuales opciones de la línea de comandos el "
"programa está dispuesto a aceptar. En este caso, lo he llamado ``echo`` para "
"que concuerde con su función."

#: ../Doc/howto/argparse.rst:146
msgid "Calling our program now requires us to specify an option."
msgstr "Llamar nuestro programa ahora requiere que especifiquemos una opción."

#: ../Doc/howto/argparse.rst:148
msgid ""
"The :meth:`~ArgumentParser.parse_args` method actually returns some data "
"from the options specified, in this case, ``echo``."
msgstr ""
"El método :meth:`~ArgumentParser.parse_args` retorna de hecho algunos datos "
"de las opciones especificadas, en este caso, ``echo``."

#: ../Doc/howto/argparse.rst:151
msgid ""
"The variable is some form of 'magic' that :mod:`argparse` performs for free "
"(i.e. no need to specify which variable that value is stored in). You will "
"also notice that its name matches the string argument given to the method, "
"``echo``."
msgstr ""
"La variable es una forma de 'magia' que :mod:`argparse` se realiza de forma "
"gratuita (es decir, no es necesario especificar en qué variable se almacena "
"ese valor). También notará que su nombre coincide con el argumento de cadena "
"dado al método, ``echo``."

#: ../Doc/howto/argparse.rst:156
msgid ""
"Note however that, although the help display looks nice and all, it "
"currently is not as helpful as it can be. For example we see that we got "
"``echo`` as a positional argument, but we don't know what it does, other "
"than by guessing or by reading the source code. So, let's make it a bit more "
"useful::"
msgstr ""
"Sin embargo, tenga en cuenta que, aunque la pantalla de ayuda luce bien y "
"todo, en realidad no es tan útil como podría ser. Por ejemplo, vemos que "
"tenemos ``echo`` como un argumento posicional, pero no sabemos lo que hace, "
"de otra manera que no sea adivinar o leer el código fuente. Entonces, vamos "
"a hacerlo un poco mas útil::"

#: ../Doc/howto/argparse.rst:161
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"echo\", help=\"echo the string you use here\")\n"
"args = parser.parse_args()\n"
"print(args.echo)"
msgstr ""

#: ../Doc/howto/argparse.rst:167
msgid "And we get:"
msgstr "Y la salida:"

#: ../Doc/howto/argparse.rst:169
msgid ""
"$ python prog.py -h\n"
"usage: prog.py [-h] echo\n"
"\n"
"positional arguments:\n"
"  echo        echo the string you use here\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit"
msgstr ""

#: ../Doc/howto/argparse.rst:180
msgid "Now, how about doing something even more useful::"
msgstr "Ahora, que tal si hacemos algo más útil::"

#: ../Doc/howto/argparse.rst:182
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", help=\"display a square of a given "
"number\")\n"
"args = parser.parse_args()\n"
"print(args.square**2)"
msgstr ""

#: ../Doc/howto/argparse.rst:190
msgid ""
"$ python prog.py 4\n"
"Traceback (most recent call last):\n"
"  File \"prog.py\", line 5, in <module>\n"
"    print(args.square**2)\n"
"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
msgstr ""

#: ../Doc/howto/argparse.rst:198
msgid ""
"That didn't go so well. That's because :mod:`argparse` treats the options we "
"give it as strings, unless we tell it otherwise. So, let's tell :mod:"
"`argparse` to treat that input as an integer::"
msgstr ""
"Eso no fue tan bien. Esto es porque :mod:`argparse` trata las opciones que "
"le damos como cadenas, a menos que le digamos otra cosa. Entonces, vamos a "
"llamar a :mod:`argparse` para tratar esa entrada como un entero::"

#: ../Doc/howto/argparse.rst:202
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", help=\"display a square of a given "
"number\",\n"
"                    type=int)\n"
"args = parser.parse_args()\n"
"print(args.square**2)"
msgstr ""

#: ../Doc/howto/argparse.rst:211
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py four\n"
"usage: prog.py [-h] square\n"
"prog.py: error: argument square: invalid int value: 'four'"
msgstr ""

#: ../Doc/howto/argparse.rst:219
msgid ""
"That went well. The program now even helpfully quits on bad illegal input "
"before proceeding."
msgstr ""
"Eso fue bien. El programa ahora aún se cierra útilmente en caso de una "
"entrada ilegal incorrecta antes de proceder."

#: ../Doc/howto/argparse.rst:224
msgid "Introducing Optional arguments"
msgstr "Introducción a los argumentos opcionales"

#: ../Doc/howto/argparse.rst:226
msgid ""
"So far we have been playing with positional arguments. Let us have a look on "
"how to add optional ones::"
msgstr ""
"Hasta ahora hemos estado jugando con argumentos posicionales. Vamos a darle "
"una mirada a como agregar los opcionales::"

#: ../Doc/howto/argparse.rst:229
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"--verbosity\", help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"if args.verbosity:\n"
"    print(\"verbosity turned on\")"
msgstr ""

#: ../Doc/howto/argparse.rst:236 ../Doc/howto/argparse.rst:282
#: ../Doc/howto/argparse.rst:398 ../Doc/howto/argparse.rst:432
msgid "And the output:"
msgstr "Y la salida:"

#: ../Doc/howto/argparse.rst:238
msgid ""
"$ python prog.py --verbosity 1\n"
"verbosity turned on\n"
"$ python prog.py\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [--verbosity VERBOSITY]\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --verbosity VERBOSITY\n"
"                        increase output verbosity\n"
"$ python prog.py --verbosity\n"
"usage: prog.py [-h] [--verbosity VERBOSITY]\n"
"prog.py: error: argument --verbosity: expected one argument"
msgstr ""

#: ../Doc/howto/argparse.rst:256
msgid ""
"The program is written so as to display something when ``--verbosity`` is "
"specified and display nothing when not."
msgstr ""
"El programa está escrito para mostrar algo cuando ``--verbosity`` sea "
"especificado y no mostrar nada cuando no."

#: ../Doc/howto/argparse.rst:259
msgid ""
"To show that the option is actually optional, there is no error when running "
"the program without it. Note that by default, if an optional argument isn't "
"used, the relevant variable, in this case ``args.verbosity``, is given "
"``None`` as a value, which is the reason it fails the truth test of the :"
"keyword:`if` statement."
msgstr ""
"Para mostrar que la opción es de hecho opcional, no hay ningún error al "
"ejecutar el programa sin ella. Tenga en cuenta que por defecto, si un "
"argumento opcional no es usado, la variable relevante, en este caso ``args."
"verbosity``, se le da ``None`` como valor, razón por la cual falla la prueba "
"de verdad del :keyword:`if`."

#: ../Doc/howto/argparse.rst:265
msgid "The help message is a bit different."
msgstr "El mensaje de ayuda es un poco diferente."

#: ../Doc/howto/argparse.rst:267
msgid ""
"When using the ``--verbosity`` option, one must also specify some value, any "
"value."
msgstr ""
"Cuando usamos la opción ``--verbosity``, también se debe especificar un "
"valor, cualquier valor."

#: ../Doc/howto/argparse.rst:270
msgid ""
"The above example accepts arbitrary integer values for ``--verbosity``, but "
"for our simple program, only two values are actually useful, ``True`` or "
"``False``. Let's modify the code accordingly::"
msgstr ""
"El ejemplo anterior acepta arbitrariamente valores enteros para ``--"
"verbosity``, pero para nuestro simple programa, solo dos valores son "
"realmente útiles, ``True`` o ``False``. Modifiquemos el código de acuerdo a "
"esto::"

#: ../Doc/howto/argparse.rst:274
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"--verbose\", help=\"increase output verbosity\",\n"
"                    action=\"store_true\")\n"
"args = parser.parse_args()\n"
"if args.verbose:\n"
"    print(\"verbosity turned on\")"
msgstr ""

#: ../Doc/howto/argparse.rst:284
msgid ""
"$ python prog.py --verbose\n"
"verbosity turned on\n"
"$ python prog.py --verbose 1\n"
"usage: prog.py [-h] [--verbose]\n"
"prog.py: error: unrecognized arguments: 1\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [--verbose]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"  --verbose   increase output verbosity"
msgstr ""

#: ../Doc/howto/argparse.rst:300
msgid ""
"The option is now more of a flag than something that requires a value. We "
"even changed the name of the option to match that idea. Note that we now "
"specify a new keyword, ``action``, and give it the value ``\"store_true\"``. "
"This means that, if the option is specified, assign the value ``True`` to "
"``args.verbose``. Not specifying it implies ``False``."
msgstr ""
"La opción ahora es más una bandera que algo que requiere un valor. Incluso "
"cambiamos el nombre de la opción para que coincida con esa idea. Tenga en "
"cuenta que ahora especificamos una nueva palabra clave, ``action``, y le "
"dimos el valor ``\"store_true\"``. Esto significa que, si la opción es "
"especificada, se asigna el valor ``True`` a ``args.verbose``. No "
"especificarlo implica ``False``."

#: ../Doc/howto/argparse.rst:307
msgid ""
"It complains when you specify a value, in true spirit of what flags actually "
"are."
msgstr ""
"Se queja cuando se especifica un valor, en verdadero espíritu de lo que "
"realmente son los flags."

#: ../Doc/howto/argparse.rst:310
msgid "Notice the different help text."
msgstr "Observe los diferentes textos de ayuda."

#: ../Doc/howto/argparse.rst:314
msgid "Short options"
msgstr "Opciones cortas"

#: ../Doc/howto/argparse.rst:316
msgid ""
"If you are familiar with command line usage, you will notice that I haven't "
"yet touched on the topic of short versions of the options. It's quite "
"simple::"
msgstr ""
"Si estas familiarizado con el uso de la línea de comandos, podrás observar "
"que aún no he tocado el tema de las versiones cortas de las opciones. Es "
"bastante simple::"

#: ../Doc/howto/argparse.rst:320
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"-v\", \"--verbose\", help=\"increase output "
"verbosity\",\n"
"                    action=\"store_true\")\n"
"args = parser.parse_args()\n"
"if args.verbose:\n"
"    print(\"verbosity turned on\")"
msgstr ""

#: ../Doc/howto/argparse.rst:328
msgid "And here goes:"
msgstr "Y aquí va:"

#: ../Doc/howto/argparse.rst:330
msgid ""
"$ python prog.py -v\n"
"verbosity turned on\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [-v]\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  -v, --verbose  increase output verbosity"
msgstr ""

#: ../Doc/howto/argparse.rst:341
msgid "Note that the new ability is also reflected in the help text."
msgstr ""
"Tenga en cuenta que la nueva habilidad es también reflejada en el texto de "
"ayuda."

#: ../Doc/howto/argparse.rst:345
msgid "Combining Positional and Optional arguments"
msgstr "Combinar argumentos opcionales y posicionales"

#: ../Doc/howto/argparse.rst:347
msgid "Our program keeps growing in complexity::"
msgstr "Nuestro programa sigue creciendo en complejidad::"

#: ../Doc/howto/argparse.rst:349
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbose:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../Doc/howto/argparse.rst:362
msgid "And now the output:"
msgstr "Y ahora la salida:"

#: ../Doc/howto/argparse.rst:364
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] [-v] square\n"
"prog.py: error: the following arguments are required: square\n"
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 --verbose\n"
"the square of 4 equals 16\n"
"$ python prog.py --verbose 4\n"
"the square of 4 equals 16"
msgstr ""

#: ../Doc/howto/argparse.rst:376
msgid "We've brought back a positional argument, hence the complaint."
msgstr "Hemos traído de vuelta un argumento posicional, de ahí la queja."

#: ../Doc/howto/argparse.rst:378
msgid "Note that the order does not matter."
msgstr "Tenga en cuenta que el orden no importa."

#: ../Doc/howto/argparse.rst:380
msgid ""
"How about we give this program of ours back the ability to have multiple "
"verbosity values, and actually get to use them::"
msgstr ""
"Que tal si le retornamos a nuestro programa la capacidad de tener múltiples "
"valores de verbosidad, y realmente usarlos::"

#: ../Doc/howto/argparse.rst:383
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", type=int,\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../Doc/howto/argparse.rst:400
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 -v\n"
"usage: prog.py [-h] [-v VERBOSITY] square\n"
"prog.py: error: argument -v/--verbosity: expected one argument\n"
"$ python prog.py 4 -v 1\n"
"4^2 == 16\n"
"$ python prog.py 4 -v 2\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -v 3\n"
"16"
msgstr ""

#: ../Doc/howto/argparse.rst:414
msgid ""
"These all look good except the last one, which exposes a bug in our program. "
"Let's fix it by restricting the values the ``--verbosity`` option can "
"accept::"
msgstr ""
"Todos estos se ven bien, excepto el último, que expone un error en nuestro "
"programa. Corrijamos esto restringiendo los valores que la opción ``--"
"verbosity`` puede aceptar::"

#: ../Doc/howto/argparse.rst:417
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", type=int, choices=[0, 1, 2],\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../Doc/howto/argparse.rst:434
msgid ""
"$ python prog.py 4 -v 3\n"
"usage: prog.py [-h] [-v {0,1,2}] square\n"
"prog.py: error: argument -v/--verbosity: invalid choice: 3 (choose from 0, "
"1, 2)\n"
"$ python prog.py 4 -h\n"
"usage: prog.py [-h] [-v {0,1,2}] square\n"
"\n"
"positional arguments:\n"
"  square                display a square of a given number\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -v, --verbosity {0,1,2}\n"
"                        increase output verbosity"
msgstr ""

#: ../Doc/howto/argparse.rst:450
msgid ""
"Note that the change also reflects both in the error message as well as the "
"help string."
msgstr ""
"Tenga en cuenta que el cambio se refleja tanto en el mensaje de error como "
"en la cadena de ayuda."

#: ../Doc/howto/argparse.rst:453
msgid ""
"Now, let's use a different approach of playing with verbosity, which is "
"pretty common. It also matches the way the CPython executable handles its "
"own verbosity argument (check the output of ``python --help``)::"
msgstr ""
"Ahora, usemos un enfoque diferente para jugar con la verbosidad, lo cual es "
"bastante común. También coincide con la forma en que el ejecutable de "
"CPython maneja su propio argumento de verbosidad (verifique el resultado de "
"``python --help``)::"

#: ../Doc/howto/argparse.rst:457
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display the square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../Doc/howto/argparse.rst:472
msgid ""
"We have introduced another action, \"count\", to count the number of "
"occurrences of specific options."
msgstr ""
"Hemos introducido otra acción, \"count\", para contar el número de "
"apariciones de opciones específicas."

#: ../Doc/howto/argparse.rst:476
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 -v\n"
"4^2 == 16\n"
"$ python prog.py 4 -vv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 --verbosity --verbosity\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -v 1\n"
"usage: prog.py [-h] [-v] square\n"
"prog.py: error: unrecognized arguments: 1\n"
"$ python prog.py 4 -h\n"
"usage: prog.py [-h] [-v] square\n"
"\n"
"positional arguments:\n"
"  square           display a square of a given number\n"
"\n"
"options:\n"
"  -h, --help       show this help message and exit\n"
"  -v, --verbosity  increase output verbosity\n"
"$ python prog.py 4 -vvv\n"
"16"
msgstr ""

#: ../Doc/howto/argparse.rst:501
msgid ""
"Yes, it's now more of a flag (similar to ``action=\"store_true\"``) in the "
"previous version of our script. That should explain the complaint."
msgstr ""
"Si, ahora es mas una bandera (similar a ``action=\"store_true\"``) en la "
"versión anterior de nuestro script. Esto debería explicar la queja."

#: ../Doc/howto/argparse.rst:504
msgid "It also behaves similar to \"store_true\" action."
msgstr "También se comporta de manera similar a la acción ``\"store_true\"``."

#: ../Doc/howto/argparse.rst:506
msgid ""
"Now here's a demonstration of what the \"count\" action gives. You've "
"probably seen this sort of usage before."
msgstr ""
"Ahora aquí una demostración de lo que la acción ``\"count\"`` da. "
"Probablemente haya visto esta clase de uso antes."

#: ../Doc/howto/argparse.rst:509
msgid ""
"And if you don't specify the ``-v`` flag, that flag is considered to have "
"``None`` value."
msgstr ""
"Y si no especificas la bandera ``-v``, se considera que esa bandera tiene el "
"valor ``None``."

#: ../Doc/howto/argparse.rst:512
msgid ""
"As should be expected, specifying the long form of the flag, we should get "
"the same output."
msgstr ""
"Como debería esperarse, especificando la forma larga de la bandera, "
"obtendríamos el mismo resultado."

#: ../Doc/howto/argparse.rst:515
msgid ""
"Sadly, our help output isn't very informative on the new ability our script "
"has acquired, but that can always be fixed by improving the documentation "
"for our script (e.g. via the ``help`` keyword argument)."
msgstr ""
"Lamentablemente, nuestra salida de ayuda no es muy informativa sobre la "
"nueva capacidad que ha adquirido nuestro script, pero eso siempre se puede "
"solucionar mejorando la documentación de nuestro script (por ejemplo, a "
"través del argumento de la palabra clave ``help``)."

#: ../Doc/howto/argparse.rst:519
msgid "That last output exposes a bug in our program."
msgstr "La última salida expone un error en nuestro programa."

#: ../Doc/howto/argparse.rst:522
msgid "Let's fix::"
msgstr "Vamos a arreglarlo::"

#: ../Doc/howto/argparse.rst:524
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"\n"
"# bugfix: replace == with >=\n"
"if args.verbosity >= 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../Doc/howto/argparse.rst:541
msgid "And this is what it gives:"
msgstr "Y esto es lo que da:"

#: ../Doc/howto/argparse.rst:543
msgid ""
"$ python prog.py 4 -vvv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -vvvv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4\n"
"Traceback (most recent call last):\n"
"  File \"prog.py\", line 11, in <module>\n"
"    if args.verbosity >= 2:\n"
"TypeError: '>=' not supported between instances of 'NoneType' and 'int'"
msgstr ""

#: ../Doc/howto/argparse.rst:556
msgid ""
"First output went well, and fixes the bug we had before. That is, we want "
"any value >= 2 to be as verbose as possible."
msgstr ""
"La primer salida fue correcta, y corrigió el error que teníamos antes. Es "
"decir, queremos que cualquier valor >= 2 sea lo más detallado posible."

#: ../Doc/howto/argparse.rst:559
msgid "Third output not so good."
msgstr "Tercer salida no tan buena."

#: ../Doc/howto/argparse.rst:561
msgid "Let's fix that bug::"
msgstr "Vamos a arreglar ese error::"

#: ../Doc/howto/argparse.rst:563
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0,\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity >= 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../Doc/howto/argparse.rst:578
msgid ""
"We've just introduced yet another keyword, ``default``. We've set it to "
"``0`` in order to make it comparable to the other int values. Remember that "
"by default, if an optional argument isn't specified, it gets the ``None`` "
"value, and that cannot be compared to an int value (hence the :exc:"
"`TypeError` exception)."
msgstr ""
"Acabamos de introducir otra palabra clave, ``default``. Lo hemos configurado "
"en ``0`` para que sea comparable con otros valores int. Recuerde que por "
"defecto, si un argumento opcional no es especificado, obtiene el valor "
"``None``, y eso no puede ser comparado con un valor int (de ahí la "
"excepción :exc:`TypeError`)."

#: ../Doc/howto/argparse.rst:585
msgid "And:"
msgstr "Y:"

#: ../Doc/howto/argparse.rst:587
msgid ""
"$ python prog.py 4\n"
"16"
msgstr ""

#: ../Doc/howto/argparse.rst:592
msgid ""
"You can go quite far just with what we've learned so far, and we have only "
"scratched the surface. The :mod:`argparse` module is very powerful, and "
"we'll explore a bit more of it before we end this tutorial."
msgstr ""
"Tu puedes llegar bastante lejos con lo que hemos aprendido hasta ahora, y "
"solo arañado la superficie. El módulo :mod:`argparse` es muy poderoso, y "
"exploraremos un poco mas antes de finalizar este tutorial."

#: ../Doc/howto/argparse.rst:599
msgid "Getting a little more advanced"
msgstr "Un poco mas avanzado"

#: ../Doc/howto/argparse.rst:601
msgid ""
"What if we wanted to expand our tiny program to perform other powers, not "
"just squares::"
msgstr ""
"Qué pasaría si quisiéramos expandir nuestro pequeño programa para que tenga "
"otros poderes, no solo cuadrados::"

#: ../Doc/howto/argparse.rst:604
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0)\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"if args.verbosity >= 2:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../Doc/howto/argparse.rst:618 ../Doc/howto/argparse.rst:656
msgid "Output:"
msgstr "Salida:"

#: ../Doc/howto/argparse.rst:620
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] [-v] x y\n"
"prog.py: error: the following arguments are required: x, y\n"
"$ python prog.py -h\n"
"usage: prog.py [-h] [-v] x y\n"
"\n"
"positional arguments:\n"
"  x                the base\n"
"  y                the exponent\n"
"\n"
"options:\n"
"  -h, --help       show this help message and exit\n"
"  -v, --verbosity\n"
"$ python prog.py 4 2 -v\n"
"4^2 == 16"
msgstr ""

#: ../Doc/howto/argparse.rst:639
msgid ""
"Notice that so far we've been using verbosity level to *change* the text "
"that gets displayed. The following example instead uses verbosity level to "
"display *more* text instead::"
msgstr ""
"Tenga en cuenta que hasta ahora hemos estado usando el nivel de verbosidad "
"para *cambiar* el texto que se muestra. El siguiente ejemplo en lugar de "
"usar nivel de verbosidad para mostrar *mas* texto en su lugar::"

#: ../Doc/howto/argparse.rst:643
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0)\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"if args.verbosity >= 2:\n"
"    print(f\"Running '{__file__}'\")\n"
"if args.verbosity >= 1:\n"
"    print(f\"{args.x}^{args.y} == \", end=\"\")\n"
"print(answer)"
msgstr ""

#: ../Doc/howto/argparse.rst:658
msgid ""
"$ python prog.py 4 2\n"
"16\n"
"$ python prog.py 4 2 -v\n"
"4^2 == 16\n"
"$ python prog.py 4 2 -vv\n"
"Running 'prog.py'\n"
"4^2 == 16"
msgstr ""

#: ../Doc/howto/argparse.rst:672
msgid "Specifying ambiguous arguments"
msgstr "Especificando argumentos ambiguos"

#: ../Doc/howto/argparse.rst:674
msgid ""
"When there is ambiguity in deciding whether an argument is positional or for "
"an argument, ``--`` can be used to tell :meth:`~ArgumentParser.parse_args` "
"that everything after that is a positional argument::"
msgstr ""
"Cuando hay ambigüedad al decidir si un argumento es posicional o para un "
"argumento, ``--`` se puede usar para indicar :meth:`~ArgumentParser."
"parse_args` que todo lo que sigue a eso es un argumento posicional::"

#: ../Doc/howto/argparse.rst:678
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-n', nargs='+')\n"
">>> parser.add_argument('args', nargs='*')\n"
"\n"
">>> # ambiguous, so parse_args assumes it's an option\n"
">>> parser.parse_args(['-f'])\n"
"usage: PROG [-h] [-n N [N ...]] [args ...]\n"
"PROG: error: unrecognized arguments: -f\n"
"\n"
">>> parser.parse_args(['--', '-f'])\n"
"Namespace(args=['-f'], n=None)\n"
"\n"
">>> # ambiguous, so the -n option greedily accepts arguments\n"
">>> parser.parse_args(['-n', '1', '2', '3'])\n"
"Namespace(args=[], n=['1', '2', '3'])\n"
"\n"
">>> parser.parse_args(['-n', '1', '--', '2', '3'])\n"
"Namespace(args=['2', '3'], n=['1'])"
msgstr ""

#: ../Doc/howto/argparse.rst:699
msgid "Conflicting options"
msgstr "Opciones conflictivas"

#: ../Doc/howto/argparse.rst:701
msgid ""
"So far, we have been working with two methods of an :class:`argparse."
"ArgumentParser` instance. Let's introduce a third one, :meth:"
"`~ArgumentParser.add_mutually_exclusive_group`. It allows for us to specify "
"options that conflict with each other. Let's also change the rest of the "
"program so that the new functionality makes more sense: we'll introduce the "
"``--quiet`` option, which will be the opposite of the ``--verbose`` one::"
msgstr ""
"Hasta ahora, hemos estado trabajando con dos métodos de una instancia de :"
"class:`argparse.ArgumentParser`. Vamos a introducir un tercer método, :meth:"
"`~ArgumentParser.add_mutually_exclusive_group`. Nos permite especificar "
"opciones que entran en conflicto entre sí. Cambiemos también el resto del "
"programa para que la nueva funcionalidad tenga mas sentido: presentamos la "
"opción ``--quiet``, la cual es lo opuesto a la opción ``--verbose``::"

#: ../Doc/howto/argparse.rst:709
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"group = parser.add_mutually_exclusive_group()\n"
"group.add_argument(\"-v\", \"--verbose\", action=\"store_true\")\n"
"group.add_argument(\"-q\", \"--quiet\", action=\"store_true\")\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"\n"
"if args.quiet:\n"
"    print(answer)\n"
"elif args.verbose:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"else:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")"
msgstr ""

#: ../Doc/howto/argparse.rst:727
msgid ""
"Our program is now simpler, and we've lost some functionality for the sake "
"of demonstration. Anyways, here's the output:"
msgstr ""
"Nuestro programa ahora es mas simple, y perdimos algunas funcionalidades en "
"aras de la demostración. De todos modos, aquí esta el resultado:"

#: ../Doc/howto/argparse.rst:730
msgid ""
"$ python prog.py 4 2\n"
"4^2 == 16\n"
"$ python prog.py 4 2 -q\n"
"16\n"
"$ python prog.py 4 2 -v\n"
"4 to the power 2 equals 16\n"
"$ python prog.py 4 2 -vq\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose\n"
"$ python prog.py 4 2 -v --quiet\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose"
msgstr ""

#: ../Doc/howto/argparse.rst:745
msgid ""
"That should be easy to follow. I've added that last output so you can see "
"the sort of flexibility you get, i.e. mixing long form options with short "
"form ones."
msgstr ""
"Esto debería ser sencillo de seguir. He agregado esa última salida para que "
"se pueda ver el tipo de flexibilidad que obtiene, es decir, mezclar opciones "
"de forma larga con opciones de forma corta."

#: ../Doc/howto/argparse.rst:749
msgid ""
"Before we conclude, you probably want to tell your users the main purpose of "
"your program, just in case they don't know::"
msgstr ""
"Antes de concluir, probablemente quiera contarle a sus usuarios el propósito "
"principal de su programa, solo en caso de que no lo supieran::"

#: ../Doc/howto/argparse.rst:752
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(description=\"calculate X to the power of "
"Y\")\n"
"group = parser.add_mutually_exclusive_group()\n"
"group.add_argument(\"-v\", \"--verbose\", action=\"store_true\")\n"
"group.add_argument(\"-q\", \"--quiet\", action=\"store_true\")\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"\n"
"if args.quiet:\n"
"    print(answer)\n"
"elif args.verbose:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"else:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")"
msgstr ""

#: ../Doc/howto/argparse.rst:770
msgid ""
"Note that slight difference in the usage text. Note the ``[-v | -q]``, which "
"tells us that we can either use ``-v`` or ``-q``, but not both at the same "
"time:"
msgstr ""
"Tenga en cuenta la ligera diferencia en el uso del texto. Tenga en cuenta "
"``[-v | -q]``, lo cual nos indica que podemos usar ``-v`` o ``-q``, pero no "
"ambos al mismo tiempo:"

#: ../Doc/howto/argparse.rst:774 ../Doc/howto/argparse.rst:801
msgid ""
"$ python prog.py --help\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"\n"
"calculate X to the power of Y\n"
"\n"
"positional arguments:\n"
"  x              the base\n"
"  y              the exponent\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  -v, --verbose\n"
"  -q, --quiet"
msgstr ""

#: ../Doc/howto/argparse.rst:792
msgid "How to translate the argparse output"
msgstr "Cómo traducir la salida de argparse"

#: ../Doc/howto/argparse.rst:794
msgid ""
"The output of the :mod:`argparse` module such as its help text and error "
"messages are all made translatable using the :mod:`gettext` module. This "
"allows applications to easily localize messages produced by :mod:`argparse`. "
"See also :ref:`i18n-howto`."
msgstr ""
"La salida del módulo :mod:`argparse`, como su texto de ayuda y mensajes de "
"error, se pueden traducir usando el módulo :mod:`gettext`. Esto permite que "
"las aplicaciones localicen fácilmente los mensajes producidos por :mod:"
"`argparse`. Consulte :ref:`i18n-howto` para más información."

#: ../Doc/howto/argparse.rst:799
msgid "For instance, in this :mod:`argparse` output:"
msgstr "Por ejemplo, en esta salida :mod:`argparse`:"

#: ../Doc/howto/argparse.rst:817
msgid ""
"The strings ``usage:``, ``positional arguments:``, ``options:`` and ``show "
"this help message and exit`` are all translatable."
msgstr ""
"Las cadenas de caracteres ``usage:``, ``positional arguments:``, ``options:"
"`` y ``show this help message and exit``` son todas traducibles."

#: ../Doc/howto/argparse.rst:820
msgid ""
"In order to translate these strings, they must first be extracted into a ``."
"po`` file. For example, using `Babel <https://babel.pocoo.org/>`__, run this "
"command:"
msgstr ""
"Para traducir estas cadenas de caracteres, primero se deben extraer en un "
"archivo ``.po``. Por ejemplo, usando `Babel <https://babel.pocoo.org/>`__, "
"ejecute este comando:"

#: ../Doc/howto/argparse.rst:824
msgid "$ pybabel extract -o messages.po /usr/lib/python3.12/argparse.py"
msgstr ""

#: ../Doc/howto/argparse.rst:828
msgid ""
"This command will extract all translatable strings from the :mod:`argparse` "
"module and output them into a file named ``messages.po``. This command "
"assumes that your Python installation is in ``/usr/lib``."
msgstr ""
"Este comando extraerá todas las cadenas de caracteres traducibles del "
"módulo :mod:`argparse` y las generará en un archivo llamado ``messages.po``. "
"Este comando asume que su instalación de Python está en ``/usr/lib``."

#: ../Doc/howto/argparse.rst:832
msgid ""
"You can find out the location of the :mod:`argparse` module on your system "
"using this script::"
msgstr ""
"Puede encontrar la ubicación del módulo :mod:`argparse` en su sistema usando "
"este script::"

#: ../Doc/howto/argparse.rst:835
msgid ""
"import argparse\n"
"print(argparse.__file__)"
msgstr ""

#: ../Doc/howto/argparse.rst:838
msgid ""
"Once the messages in the ``.po`` file are translated and the translations "
"are installed using :mod:`gettext`, :mod:`argparse` will be able to display "
"the translated messages."
msgstr ""
"Una vez que los mensajes en el archivo ``.po`` estén traducidos y las "
"traducciones estén instaladas usando :mod:`gettext`, :mod:`argparse` podrá "
"mostrar los mensajes traducidos."

#: ../Doc/howto/argparse.rst:842
msgid ""
"To translate your own strings in the :mod:`argparse` output, use :mod:"
"`gettext`."
msgstr ""
"Para traducir sus propias cadenas de caracteres en la salida :mod:"
"`argparse`, use :mod:`gettext`."

#: ../Doc/howto/argparse.rst:845
msgid "Conclusion"
msgstr "Conclusión"

#: ../Doc/howto/argparse.rst:847
msgid ""
"The :mod:`argparse` module offers a lot more than shown here. Its docs are "
"quite detailed and thorough, and full of examples. Having gone through this "
"tutorial, you should easily digest them without feeling overwhelmed."
msgstr ""
"El módulo :mod:`argparse` ofrece mucho más que solo lo mostrado aquí. Su "
"documentación es bastante detallada y completa, y está llena de ejemplos. "
"Habiendo seguido este tutorial, debe digerirlos fácilmente sin sentirse "
"abrumado."
