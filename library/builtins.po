# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to get
# the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-21 16:38-0300\n"
"PO-Revision-Date: 2020-10-09 14:57-0400\n"
"Last-Translator: \n"
"Language: es\n"
"Language-Team: python-doc-es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../Doc/library/builtins.rst:2
#, fuzzy
msgid ":mod:`!builtins` --- Built-in objects"
msgstr ":mod:`builtins` --- Objetos incorporados"

#: ../Doc/library/builtins.rst:9
msgid ""
"This module provides direct access to all 'built-in' identifiers of Python; "
"for example, ``builtins.open`` is the full name for the built-in function :"
"func:`open`.  See :ref:`built-in-funcs` and :ref:`built-in-consts` for "
"documentation."
msgstr ""
"Este módulo proporciona acceso directo a todos los identificadores "
"'incorporados' de Python. Por ejemplo, ``builtins.open`` es el nombre "
"completo de la función incorporada :func:`open`. Vea :ref:`built-in-funcs` "
"y :ref:`built-in-consts` para documentación."

#: ../Doc/library/builtins.rst:15
msgid ""
"This module is not normally accessed explicitly by most applications, but "
"can be useful in modules that provide objects with the same name as a built-"
"in value, but in which the built-in of that name is also needed.  For "
"example, in a module that wants to implement an :func:`open` function that "
"wraps the built-in :func:`open`, this module can be used directly::"
msgstr ""
"Este módulo normalmente no es accedido explícitamente por la mayoría de las "
"aplicaciones, pero puede ser útil en módulos que provean objetos con el "
"mismo nombre que un valor incorporado, pero que sea necesario también el "
"incorporado con ese nombre. Por ejemplo, en un módulo que quiera implementar "
"una función :func:`open` que envuelva la integrada :func:`open`, este módulo "
"puede se usado directamente::"

#: ../Doc/library/builtins.rst:21
msgid ""
"import builtins\n"
"\n"
"def open(path):\n"
"    f = builtins.open(path, 'r')\n"
"    return UpperCaser(f)\n"
"\n"
"class UpperCaser:\n"
"    '''Wrapper around a file that converts output to uppercase.'''\n"
"\n"
"    def __init__(self, f):\n"
"        self._f = f\n"
"\n"
"    def read(self, count=-1):\n"
"        return self._f.read(count).upper()\n"
"\n"
"    # ..."
msgstr ""

#: ../Doc/library/builtins.rst:38
msgid ""
"As an implementation detail, most modules have the name ``__builtins__`` "
"made available as part of their globals.  The value of ``__builtins__`` is "
"normally either this module or the value of this module's :attr:`~object."
"__dict__` attribute. Since this is an implementation detail, it may not be "
"used by alternate implementations of Python."
msgstr ""
"Como un detalle de implementación, la mayoría de los módulos tienen el "
"nombre ``__builtins__`` disponible como parte de sus globales. El valor de "
"``__builtins__`` es normalmente o este módulo o el valor del atributo :attr:"
"`~object.__dict__` de este módulo. Como este es un detalle de "
"implementación, puede que no sea usado por implementaciones alternativas de "
"Python."
