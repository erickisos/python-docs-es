# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python en Español
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Python en Español 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-21 16:38-0300\n"
"PO-Revision-Date: 2023-11-02 10:20-0500\n"
"Last-Translator: diecristher@gmail.com\n"
"Language: es_AR\n"
"Language-Team: JuliKM@gmail.com\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../Doc/library/importlib.metadata.rst:5
msgid ":mod:`!importlib.metadata` -- Accessing package metadata"
msgstr ":mod:`!importlib.metadata` -- Acceso a los metadatos de los paquetes"

#: ../Doc/library/importlib.metadata.rst:11
msgid "``importlib.metadata`` is no longer provisional."
msgstr "``importlib.metadata`` ya no es provisional."

#: ../Doc/library/importlib.metadata.rst:14
#, fuzzy
msgid "**Source code:** :source:`Lib/importlib/metadata/__init__.py`"
msgstr "**Código fuente:** :source:`Lib/importlib/metadata.py`"

#: ../Doc/library/importlib.metadata.rst:16
#, fuzzy
msgid ""
"``importlib.metadata`` is a library that provides access to the metadata of "
"an installed `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_, such as its entry points or its top-"
"level names (`Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_\\s, modules, if any). Built in part on "
"Python's import system, this library intends to replace similar "
"functionality in the `entry point API`_ and `metadata API`_ of "
"``pkg_resources``.  Along with :mod:`importlib.resources`, this package can "
"eliminate the need to use the older and less efficient ``pkg_resources`` "
"package."
msgstr ""
"``importlib.metadata`` es una biblioteca que proporciona acceso a los "
"metadatos del paquete instalado. Construida en parte sobre el sistema de "
"importación de Python, esta biblioteca tiene la intención de reemplazar una "
"funcionalidad similar ofrecida por la `API del punto de entrada`_ y la `API "
"de metadatos`_ de ``pkg_resources``. Junto con :mod:`importlib.resources` en "
"Python 3.7 y versiones posteriores (respaldada como `importlib_resources`_ "
"para versiones anteriores de Python), esto puede eliminar la necesidad de "
"usar el paquete ``pkg_resources``, antiguo y menos eficiente."

#: ../Doc/library/importlib.metadata.rst:27
#, fuzzy
msgid ""
"``importlib.metadata`` operates on third-party *distribution packages* "
"installed into Python's ``site-packages`` directory via tools such as :pypi:"
"`pip`. Specifically, it works with distributions with discoverable ``dist-"
"info`` or ``egg-info`` directories, and metadata defined by the `Core "
"metadata specifications <https://packaging.python.org/en/latest/"
"specifications/core-metadata/#core-metadata>`_."
msgstr ""
"Por \"paquete instalado\" generalmente nos referimos a un paquete de "
"terceros instalado en el directorio ``site-packages`` de Python a través de "
"herramientas como `pip <https://pypi.org/project/pip/>`_. Específicamente, "
"significa un paquete con un directorio reconocible ``dist-info`` o ``egg-"
"info`` y metadatos definidos por :pep:`566` o sus especificaciones "
"anteriores. De forma predeterminada, los metadatos del paquete pueden vivir "
"en el sistema de archivos o en archivos zip en :data:`sys.path`. A través de "
"un mecanismo de extensión, los metadatos pueden vivir casi en cualquier "
"lugar."

#: ../Doc/library/importlib.metadata.rst:36
#, fuzzy
msgid ""
"These are *not* necessarily equivalent to or correspond 1:1 with the top-"
"level *import package* names that can be imported inside Python code. One "
"*distribution package* can contain multiple *import packages* (and single "
"modules), and one top-level *import package* may map to multiple "
"*distribution packages* if it is a namespace package. You can use :ref:"
"`packages_distributions() <package-distributions>` to get a mapping between "
"them."
msgstr ""
"Estos *no* son necesariamente equivalentes o se corresponden 1:1 con los "
"nombres de *paquetes de importación* de nivel superior que pueden ser "
"importados dentro del código Python. Un *paquete de distribución* puede "
"contener múltiples *paquetes de importación* (y módulos individuales), y un "
"*paquete de importación* de nivel superior puede corresponder a múltiples "
"*paquetes de distribución* si es un paquete de espacio de nombres. Puede "
"usar :ref:`package_distributions() <package-distributions>` para obtener un "
"mapeo entre ellos."

#: ../Doc/library/importlib.metadata.rst:47
msgid ""
"By default, distribution metadata can live on the file system or in zip "
"archives on :data:`sys.path`.  Through an extension mechanism, the metadata "
"can live almost anywhere."
msgstr ""
"Por defecto, los metadatos de distribución pueden vivir en el sistema de "
"ficheros o en archivos zip en :data:`sys.path`.  A través de un mecanismo de "
"extensión, los metadatos pueden vivir casi en cualquier lugar."

#: ../Doc/library/importlib.metadata.rst:62
msgid "https://importlib-metadata.readthedocs.io/"
msgstr "https://importlib-metadata.readthedocs.io/"

#: ../Doc/library/importlib.metadata.rst:56
msgid ""
"The documentation for ``importlib_metadata``, which supplies a backport of "
"``importlib.metadata``. This includes an `API reference <https://importlib-"
"metadata.readthedocs.io/en/latest/api.html>`__ for this module's classes and "
"functions, as well as a `migration guide <https://importlib-metadata."
"readthedocs.io/en/latest/migration.html>`__ for existing users of "
"``pkg_resources``."
msgstr ""
"La documentación de ``importlib_metadata``, que proporciona un backport de "
"``importlib.metadata``. Esto incluye una `Referencia API <https://importlib-"
"metadata.readthedocs.io/en/latest/api.html>`__ para las clases y funciones "
"de este módulo, así como una `Guía de migración <https://importlib-metadata."
"readthedocs.io/en/latest/migration.html>`__ para los usuarios existentes de "
"``pkg_resources``."

#: ../Doc/library/importlib.metadata.rst:67
msgid "Overview"
msgstr "Descripción general"

#: ../Doc/library/importlib.metadata.rst:69
#, fuzzy
msgid ""
"Let's say you wanted to get the version string for a `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ you've installed using ``pip``.  We start by creating a virtual "
"environment and installing something into it:"
msgstr ""
"Supongamos que desea obtener la cadena de versión para un paquete que ha "
"instalado con ``pip``.  Comenzamos creando un entorno virtual e instalando "
"algo en él:"

#: ../Doc/library/importlib.metadata.rst:74
msgid ""
"$ python -m venv example\n"
"$ source example/bin/activate\n"
"(example) $ python -m pip install wheel"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:80
msgid "You can get the version string for ``wheel`` by running the following:"
msgstr ""
"Se puede obtener la cadena de versión para ``wheel`` ejecutando lo siguiente:"

#: ../Doc/library/importlib.metadata.rst:82
msgid ""
"(example) $ python\n"
">>> from importlib.metadata import version  \n"
">>> version('wheel')  \n"
"'0.32.3'"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:89
#, fuzzy
msgid ""
"You can also get a collection of entry points selectable by properties of "
"the EntryPoint (typically 'group' or 'name'), such as ``console_scripts``, "
"``distutils.commands`` and others.  Each group contains a collection of :ref:"
"`EntryPoint <entry-points>` objects."
msgstr ""
"También se puede obtener el conjunto de los puntos de entrada clasificados "
"usando el grupo, como ``console_scripts``, ``distutils.commands`` y otros, "
"como claves. Cada grupo contiene una secuencia de objetos :ref:`EntryPoint "
"<entry-points>`."

#: ../Doc/library/importlib.metadata.rst:93
msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr ""
"Se pueden obtener los :ref:`metadatos para una distribución <metadata>`::"

#: ../Doc/library/importlib.metadata.rst:95
msgid ""
">>> list(metadata('wheel'))  \n"
"['Metadata-Version', 'Name', 'Version', 'Summary', 'Home-page', 'Author', "
"'Author-email', 'Maintainer', 'Maintainer-email', 'License', 'Project-URL', "
"'Project-URL', 'Project-URL', 'Keywords', 'Platform', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Requires-Python', 'Provides-Extra', 'Requires-Dist', "
"'Requires-Dist']"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:98
msgid ""
"You can also get a :ref:`distribution's version number <version>`, list its :"
"ref:`constituent files <files>`, and get a list of the distribution's :ref:"
"`requirements`."
msgstr ""
"También se puede obtener el :ref:`número de versión de una distribución "
"<version>`, enumerar sus :ref:`archivos constituyentes <files>` y obtener "
"una lista de los :ref:`requirements` de la distribución."

#: ../Doc/library/importlib.metadata.rst:104
msgid "Functional API"
msgstr "API funcional"

#: ../Doc/library/importlib.metadata.rst:106
msgid "This package provides the following functionality via its public API."
msgstr ""
"Este paquete provee la siguiente funcionalidad a través de su API pública."

#: ../Doc/library/importlib.metadata.rst:112
msgid "Entry points"
msgstr "Puntos de entrada"

#: ../Doc/library/importlib.metadata.rst:114
msgid ""
"The ``entry_points()`` function returns a collection of entry points. Entry "
"points are represented by ``EntryPoint`` instances; each ``EntryPoint`` has "
"a ``.name``, ``.group``, and ``.value`` attributes and a ``.load()`` method "
"to resolve the value.  There are also ``.module``, ``.attr``, and ``."
"extras`` attributes for getting the components of the ``.value`` attribute."
msgstr ""
"La función ``entry_points()`` retorna una colección de todos los puntos de "
"entrada. Los puntos de entrada están representados por instancias de "
"``EntryPoint``. Cada ``EntryPoint`` tiene los atributos ``.name``, ``."
"group`` y ``.value``, y un método ``.load()`` para resolver el valor. "
"También hay atributos ``.module``, ``.attr`` y ``.extras`` para obtener los "
"componentes del atributo ``.value``."

#: ../Doc/library/importlib.metadata.rst:121
msgid "Query all entry points::"
msgstr "Consultar todos los puntos de entrada::"

#: ../Doc/library/importlib.metadata.rst:123
#, fuzzy
msgid ">>> eps = entry_points()  "
msgstr "Puntos de entrada"

#: ../Doc/library/importlib.metadata.rst:125
#, fuzzy
msgid ""
"The ``entry_points()`` function returns an ``EntryPoints`` object, a "
"collection of all ``EntryPoint`` objects with ``names`` and ``groups`` "
"attributes for convenience::"
msgstr ""
"La función ``entry_points()`` retorna un objeto ``EntryPoints``, una "
"secuencia de todos los objetos ``EntryPoint`` con atributos ``names`` y "
"``groups`` por conveniencia::"

#: ../Doc/library/importlib.metadata.rst:129
msgid ""
">>> sorted(eps.groups)  \n"
"['console_scripts', 'distutils.commands', 'distutils.setup_keywords', "
"'egg_info.writers', 'setuptools.installation']"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:132
msgid ""
"``EntryPoints`` has a ``select`` method to select entry points matching "
"specific properties. Select entry points in the ``console_scripts`` group::"
msgstr ""
"``EntryPoints`` tiene un método ``select`` para seleccionar puntos de "
"entrada que coincidan con propiedades específicas. Seleccione los puntos de "
"entrada en el grupo ``console_scripts``::"

#: ../Doc/library/importlib.metadata.rst:136
msgid ">>> scripts = eps.select(group='console_scripts')  "
msgstr ""

#: ../Doc/library/importlib.metadata.rst:138
msgid ""
"Equivalently, since ``entry_points`` passes keyword arguments through to "
"select::"
msgstr ""
"De manera equivalente, ya que ``entry_points`` para argumentos de palabra "
"clave para seleccionar::"

#: ../Doc/library/importlib.metadata.rst:141
msgid ">>> scripts = entry_points(group='console_scripts')  "
msgstr ""

#: ../Doc/library/importlib.metadata.rst:143
msgid ""
"Pick out a specific script named \"wheel\" (found in the wheel project)::"
msgstr ""
"Elige un script específico llamado \"wheel\" (que se encuentra en el "
"proyecto *wheel*)::"

#: ../Doc/library/importlib.metadata.rst:145
msgid ""
">>> 'wheel' in scripts.names  \n"
"True\n"
">>> wheel = scripts['wheel']  "
msgstr ""

#: ../Doc/library/importlib.metadata.rst:149
msgid "Equivalently, query for that entry point during selection::"
msgstr ""
"De manera equivalente, consulta por ese punto de entrada durante la "
"selección::"

#: ../Doc/library/importlib.metadata.rst:151
msgid ""
">>> (wheel,) = entry_points(group='console_scripts', name='wheel')  \n"
">>> (wheel,) = entry_points().select(group='console_scripts', name='wheel')  "
msgstr ""

#: ../Doc/library/importlib.metadata.rst:154
msgid "Inspect the resolved entry point::"
msgstr "Inspeccionar el punto de entrada resuelto::"

#: ../Doc/library/importlib.metadata.rst:156
msgid ""
">>> wheel  \n"
"EntryPoint(name='wheel', value='wheel.cli:main', group='console_scripts')\n"
">>> wheel.module  \n"
"'wheel.cli'\n"
">>> wheel.attr  \n"
"'main'\n"
">>> wheel.extras  \n"
"[]\n"
">>> main = wheel.load()  \n"
">>> main  \n"
"<function main at 0x103528488>"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:168
#, fuzzy
msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group.  Read `the setuptools docs <https://setuptools.pypa.io/en/"
"latest/userguide/entry_point.html>`_ for more information on entry points, "
"their definition, and usage."
msgstr ""
"``group`` y ``name`` son valores arbitrarios definidos por el autor del "
"paquete y, en general, un cliente deseará resolver todos los puntos de "
"entrada para un grupo en particular. Lee `la documentación de *setuptools* "
"<https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-"
"discovery-of-services-and-plugins>`_ para obtener más información sobre los "
"puntos de entrada, su definición y uso."

# keyed by group lo traduje como cifrados, pero no se si hay algo más adecuado
#: ../Doc/library/importlib.metadata.rst:174
#, fuzzy
msgid ""
"The \"selectable\" entry points were introduced in ``importlib_metadata`` "
"3.6 and Python 3.10. Prior to those changes, ``entry_points`` accepted no "
"parameters and always returned a dictionary of entry points, keyed by group. "
"With ``importlib_metadata`` 5.0 and Python 3.12, ``entry_points`` always "
"returns an ``EntryPoints`` object. See :pypi:`backports."
"entry_points_selectable` for compatibility options."
msgstr ""
"Los puntos de entrada \"seleccionables\" se introdujeron en "
"``importlib_metadata`` 3.6 y Python 3.10. Antes de esos cambios, "
"``entry_points`` no aceptaba parámetros y siempre retornaba un diccionario "
"de puntos de entrada, cifrados por grupo. Para la compatibilidad, si no se "
"pasa ningún parámetro a *entry_points*, se retorna un objeto "
"``SelectableGroups``, implementando esa interfaz de diccionario. En el "
"futuro, llamar a ``entry_points`` sin parámetros retornará un objeto "
"``EntryPoints``. Los usuarios deberían confiar en la interfaz de selección "
"para recuperar los puntos de entrada por grupo."

#: ../Doc/library/importlib.metadata.rst:183
msgid ""
"``EntryPoint`` objects no longer present a tuple-like interface (:meth:"
"`~object.__getitem__`)."
msgstr ""

#: ../Doc/library/importlib.metadata.rst:190
msgid "Distribution metadata"
msgstr "Metadatos de distribución"

#: ../Doc/library/importlib.metadata.rst:192
#, fuzzy
msgid ""
"Every `Distribution Package <https://packaging.python.org/en/latest/glossary/"
"#term-Distribution-Package>`_ includes some metadata, which you can extract "
"using the ``metadata()`` function::"
msgstr ""
"Cada distribución incluye algunos metadatos, que se pueden extraer "
"utilizando la función ``metadata()``:"

#: ../Doc/library/importlib.metadata.rst:196
msgid ">>> wheel_metadata = metadata('wheel')  "
msgstr ""

#: ../Doc/library/importlib.metadata.rst:198
msgid ""
"The keys of the returned data structure, a ``PackageMetadata``, name the "
"metadata keywords, and the values are returned unparsed from the "
"distribution metadata::"
msgstr ""
"Las claves de la estructura de datos retornada un ``PackageMetadata``, "
"nombran las palabras clave de los metadatos y sus valores se retornan sin "
"analizar de los metadatos de distribución::"

#: ../Doc/library/importlib.metadata.rst:202
msgid ""
">>> wheel_metadata['Requires-Python']  \n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:205
msgid ""
"``PackageMetadata`` also presents a ``json`` attribute that returns all the "
"metadata in a JSON-compatible form per :PEP:`566`::"
msgstr ""
"``PackageMetadata`` también presenta un atributo ``json`` que retorna todos "
"los metadatos en un formulario compatible con JSON por :PEP:`566`::"

#: ../Doc/library/importlib.metadata.rst:208
msgid ""
">>> wheel_metadata.json['requires_python']\n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:213
msgid ""
"The actual type of the object returned by ``metadata()`` is an "
"implementation detail and should be accessed only through the interface "
"described by the `PackageMetadata protocol <https://importlib-metadata."
"readthedocs.io/en/latest/api.html#importlib_metadata.PackageMetadata>`_."
msgstr ""
"El tipo actual del objeto retornado por ``metadata()`` es un detalle de la "
"implementación y sólo debe accederse a él a través de la interfaz descrita "
"por el protocolo `PackageMetadata <https://importlib-metadata.readthedocs.io/"
"en/latest/api.html#importlib_metadata.PackageMetadata>`_."

#: ../Doc/library/importlib.metadata.rst:218
msgid ""
"The ``Description`` is now included in the metadata when presented through "
"the payload. Line continuation characters have been removed."
msgstr ""
"La ``Descripción`` ahora se incluye en los metadatos cuando se presenta a "
"través de la carga útil. Se han eliminado los caracteres de continuación de "
"línea."

#: ../Doc/library/importlib.metadata.rst:222
msgid "The ``json`` attribute was added."
msgstr "El atributo ``json`` fue añadido."

#: ../Doc/library/importlib.metadata.rst:228
msgid "Distribution versions"
msgstr "Versiones de distribución"

#: ../Doc/library/importlib.metadata.rst:230
#, fuzzy
msgid ""
"The ``version()`` function is the quickest way to get a `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_'s version number, as a string::"
msgstr ""
"La función ``version()`` es la forma más rápida para obtener el número de "
"versión de una distribución, como una cadena de caracteres:"

#: ../Doc/library/importlib.metadata.rst:234
msgid ""
">>> version('wheel')  \n"
"'0.32.3'"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:241
msgid "Distribution files"
msgstr "Archivos de distribución"

#: ../Doc/library/importlib.metadata.rst:243
#, fuzzy
msgid ""
"You can also get the full set of files contained within a distribution.  The "
"``files()`` function takes a `Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_ name and returns all of "
"the files installed by this distribution.  Each file object returned is a "
"``PackagePath``, a :class:`pathlib.PurePath` derived object with additional "
"``dist``, ``size``, and ``hash`` properties as indicated by the metadata.  "
"For example::"
msgstr ""
"También se puede obtener el conjunto completo de archivos contenidos dentro "
"de una distribución. La función ``files()`` toma el nombre de un paquete de "
"distribución y retorna todos los archivos instalados por esta distribución. "
"Cada objeto de archivo retornado es un ``PackagePath``, un objeto derivado "
"de :class:`pathlib.PurePath` con las propiedades adicionales ``dist``, "
"``size`` y ``hash`` según indican los metadatos. Por ejemplo::"

#: ../Doc/library/importlib.metadata.rst:250
msgid ""
">>> util = [p for p in files('wheel') if 'util.py' in str(p)][0]  \n"
">>> util  \n"
"PackagePath('wheel/util.py')\n"
">>> util.size  \n"
"859\n"
">>> util.dist  \n"
"<importlib.metadata._hooks.PathDistribution object at 0x101e0cef0>\n"
">>> util.hash  \n"
"<FileHash mode: sha256 value: bYkw5oMccfazVCoYQwKkkemoVyMAFoR34mmKBx8R1NI>"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:260
msgid "Once you have the file, you can also read its contents::"
msgstr "Una vez que se tiene el archivo, también se puede leer su contenido::"

#: ../Doc/library/importlib.metadata.rst:262
msgid ""
">>> print(util.read_text())  \n"
"import base64\n"
"import sys\n"
"...\n"
"def as_bytes(s):\n"
"    if isinstance(s, text_type):\n"
"        return s.encode('utf-8')\n"
"    return s"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:271
msgid ""
"You can also use the ``locate`` method to get a the absolute path to the "
"file::"
msgstr ""
"También puede usar el método ``locate`` para obtener la ruta absoluta al "
"archivo:"

#: ../Doc/library/importlib.metadata.rst:274
msgid ""
">>> util.locate()  \n"
"PosixPath('/home/gustav/example/lib/site-packages/wheel/util.py')"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:277
msgid ""
"In the case where the metadata file listing files (RECORD or SOURCES.txt) is "
"missing, ``files()`` will return ``None``. The caller may wish to wrap calls "
"to ``files()`` in `always_iterable <https://more-itertools.readthedocs.io/en/"
"stable/api.html#more_itertools.always_iterable>`_ or otherwise guard against "
"this condition if the target distribution is not known to have the metadata "
"present."
msgstr ""
"En el caso de que el archivo de metadatos que enumera los archivos (RECORD o "
"SOURCES.txt) falte, ``files()`` retornará ``None``. Para evitar esta "
"condición, si no se sabe si la distribución de destino contiene los "
"metadatos, se puede envolver las llamadas a ``files()`` con `always_iterable "
"<https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools."
"always_iterable>`_ u otra protección similar."

#: ../Doc/library/importlib.metadata.rst:288
msgid "Distribution requirements"
msgstr "Requerimientos de la distribución"

#: ../Doc/library/importlib.metadata.rst:290
#, fuzzy
msgid ""
"To get the full set of requirements for a `Distribution Package <https://"
"packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_, use "
"the ``requires()`` function::"
msgstr ""
"Para obtener el conjunto completo de los requerimientos de una distribución, "
"usa la función ``requires()``:"

#: ../Doc/library/importlib.metadata.rst:294
msgid ""
">>> requires('wheel')  \n"
"[\"pytest (>=3.0.0) ; extra == 'test'\", \"pytest-cov ; extra == 'test'\"]"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:302
msgid "Mapping import to distribution packages"
msgstr "Mapeo de paquetes de importación a distribución"

#: ../Doc/library/importlib.metadata.rst:304
msgid ""
"A convenience method to resolve the `Distribution Package <https://packaging."
"python.org/en/latest/glossary/#term-Distribution-Package>`_ name (or names, "
"in the case of a namespace package) that provide each importable top-level "
"Python module or `Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_::"
msgstr ""
"Un método práctico para resolver el nombre del `Paquete de distribución "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ (o nombres, en el caso de un paquete de espacio de nombres) que "
"proporciona cada módulo Python de nivel superior importable o `Paquete de "
"importación <https://packaging.python.org/en/latest/glossary/#term-Import-"
"Package>`_::"

#: ../Doc/library/importlib.metadata.rst:309
msgid ""
">>> packages_distributions()\n"
"{'importlib_metadata': ['importlib-metadata'], 'yaml': ['PyYAML'], 'jaraco': "
"['jaraco.classes', 'jaraco.functools'], ...}"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:312
msgid ""
"Some editable installs, `do not supply top-level names <https://github.com/"
"pypa/packaging-problems/issues/609>`_, and thus this function is not "
"reliable with such installs."
msgstr ""
"Algunas instalaciones editables, `no suministran nombres de nivel superior "
"<https://github.com/pypa/packaging-problems/issues/609>`_, por lo que esta "
"función no es fiable con dichas instalaciones."

#: ../Doc/library/importlib.metadata.rst:321
msgid "Distributions"
msgstr "Distribuciones"

#: ../Doc/library/importlib.metadata.rst:323
#, fuzzy
msgid ""
"While the above API is the most common and convenient usage, you can get all "
"of that information from the ``Distribution`` class.  A ``Distribution`` is "
"an abstract object that represents the metadata for a Python `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_.  You can get the ``Distribution`` instance::"
msgstr ""
"Si bien la API de arriba es el uso más común y conveniente, se puede obtener "
"toda esa información de la clase ``Distribution``. Una instancia de "
"``Distribution`` es un objeto abstracto que representa los metadatos de un "
"paquete de Python. Se puede obtener la instancia de ``Distribución`` de la "
"siguiente forma:"

#: ../Doc/library/importlib.metadata.rst:329
msgid ""
">>> from importlib.metadata import distribution  \n"
">>> dist = distribution('wheel')  "
msgstr ""

#: ../Doc/library/importlib.metadata.rst:332
msgid ""
"Thus, an alternative way to get the version number is through the "
"``Distribution`` instance::"
msgstr ""
"Por lo tanto, una forma alternativa de obtener el número de versión es "
"mediante la instancia de ``Distribución``:"

#: ../Doc/library/importlib.metadata.rst:335
msgid ""
">>> dist.version  \n"
"'0.32.3'"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:338
msgid ""
"There are all kinds of additional metadata available on the ``Distribution`` "
"instance::"
msgstr ""
"Hay todo tipo de metadatos disponibles adicionales en la instancia de "
"``Distribution``:"

#: ../Doc/library/importlib.metadata.rst:341
msgid ""
">>> dist.metadata['Requires-Python']  \n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'\n"
">>> dist.metadata['License']  \n"
"'MIT'"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:346
msgid ""
"For editable packages, an ``origin`` property may present :pep:`610` "
"metadata::"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:349
msgid ""
">>> dist.origin.url\n"
"'file:///path/to/wheel-0.32.3.editable-py3-none-any.whl'"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:352
#, fuzzy
msgid ""
"The full set of available metadata is not described here. See the `Core "
"metadata specifications <https://packaging.python.org/en/latest/"
"specifications/core-metadata/#core-metadata>`_ for additional details."
msgstr ""
"El conjunto completo de metadatos disponible no está descripto aquí. "
"Consultar :pep:`566` para detalles adicionales."

#: ../Doc/library/importlib.metadata.rst:355
#, fuzzy
msgid "The ``.origin`` property was added."
msgstr "El atributo ``json`` fue añadido."

#: ../Doc/library/importlib.metadata.rst:359
#, fuzzy
msgid "Distribution Discovery"
msgstr "Archivos de distribución"

#: ../Doc/library/importlib.metadata.rst:361
msgid ""
"By default, this package provides built-in support for discovery of metadata "
"for file system and zip file `Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_\\s. This metadata "
"finder search defaults to ``sys.path``, but varies slightly in how it "
"interprets those values from how other import machinery does. In particular:"
msgstr ""
"Por defecto, este paquete proporciona soporte incorporado para el "
"descubrimiento de metadatos para el sistema de archivos y archivos zip "
"`Distribution Package <https://packaging.python.org/en/latest/glossary/#term-"
"Distribution-Package>`_\\s. Este buscador de metadatos busca por defecto "
"``sys.path``, pero varía ligeramente en cómo interpreta esos valores "
"respecto a cómo lo hace otra maquinaria de importación. En particular:"

#: ../Doc/library/importlib.metadata.rst:365
#, fuzzy
msgid ""
"``importlib.metadata`` does not honor :class:`bytes` objects on ``sys.path``."
msgstr "``importlib.metadata`` ya no es provisional."

#: ../Doc/library/importlib.metadata.rst:366
msgid ""
"``importlib.metadata`` will incidentally honor :py:class:`pathlib.Path` "
"objects on ``sys.path`` even though such values will be ignored for imports."
msgstr ""
"``importlib.metadata`` respetará incidentalmente los objetos :py:class:"
"`pathlib.Path`` en ``sys.path`` aunque tales valores serán ignorados para "
"las importaciones."

#: ../Doc/library/importlib.metadata.rst:370
msgid "Extending the search algorithm"
msgstr "Extendiendo el algoritmo de búsqueda"

#: ../Doc/library/importlib.metadata.rst:372
#, fuzzy
msgid ""
"Because `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_ metadata is not available through :"
"data:`sys.path` searches, or package loaders directly, the metadata for a "
"distribution is found through import system :ref:`finders <finders-and-"
"loaders>`.  To find a distribution package's metadata, ``importlib."
"metadata`` queries the list of :term:`meta path finders <meta path finder>` "
"on :data:`sys.meta_path`."
msgstr ""
"Debido a que los metadatos de los paquetes no están disponibles a través de "
"las búsquedas en :data:`sys.path`, o en los cargadores de paquetes "
"directamente, los metadatos de un paquete se encuentran a través del sistema "
"de importación :ref:`finders <finders-and-loaders>`.  Para encontrar los "
"metadatos de un paquete de distribución, ``importlib.metadata`` consulta la "
"lista de :term:`meta path finders <meta path finder>` en :data:`sys."
"meta_path`."

#: ../Doc/library/importlib.metadata.rst:380
msgid ""
"By default ``importlib.metadata`` installs a finder for distribution "
"packages found on the file system. This finder doesn't actually find any "
"*distributions*, but it can find their metadata."
msgstr ""
"Por defecto ``importlib.metadata`` instala un buscador de paquetes de "
"distribución encontrados en el sistema de ficheros. Este buscador en "
"realidad no encuentra ninguna *distribución*, pero puede encontrar sus "
"metadatos."

#: ../Doc/library/importlib.metadata.rst:385
msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. ``importlib."
"metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path` "
"and presents this extended interface as the ``DistributionFinder`` abstract "
"base class, which defines this abstract method::"
msgstr ""
"La clase abstracta :py:class:`importlib.abc.MetaPathFinder` define la "
"interfaz que se espera de los buscadores por el sistema de importación de "
"Python. ``importlib.metadata`` amplía este protocolo buscando una "
"``find_distributions`` opcional invocable en los buscadores desde :data:`sys."
"meta_path` y presenta esta interfaz extendida como la clase base abstracta "
"``DistributionFinder``, que define este método abstracto::"

#: ../Doc/library/importlib.metadata.rst:393
msgid ""
"@abc.abstractmethod\n"
"def find_distributions(context=DistributionFinder.Context()):\n"
"    \"\"\"Return an iterable of all Distribution instances capable of\n"
"    loading the metadata for packages for the indicated ``context``.\n"
"    \"\"\""
msgstr ""

#: ../Doc/library/importlib.metadata.rst:399
msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and ``.name`` "
"properties indicating the path to search and name to match and may supply "
"other relevant context."
msgstr ""
"El objeto ``DistributionFinder.Context`` proporciona propiedades ``.path`` y "
"``.name`` que indican la ruta de búsqueda y los nombres que deben coincidir "
"y puede proporcionar otro contexto relevante."

#: ../Doc/library/importlib.metadata.rst:403
msgid ""
"What this means in practice is that to support finding distribution package "
"metadata in locations other than the file system, subclass ``Distribution`` "
"and implement the abstract methods. Then from a custom finder, return "
"instances of this derived ``Distribution`` in the ``find_distributions()`` "
"method."
msgstr ""
"Lo que esto significa en la práctica es que, para soportar la búsqueda de "
"metadatos en paquetes de distribución en ubicaciones distintas al sistema de "
"archivos, se debe subclasificar ``Distribution`` e implementar sus métodos "
"abstractos. Luego, en el método ``find_distributions()`` de un buscador "
"personalizado no hay más que retornar instancias de esta ``Distribution`` "
"derivada."

#: ../Doc/library/importlib.metadata.rst:410
msgid "Example"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:412
msgid ""
"Consider for example a custom finder that loads Python modules from a "
"database::"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:415
msgid ""
"class DatabaseImporter(importlib.abc.MetaPathFinder):\n"
"    def __init__(self, db):\n"
"        self.db = db\n"
"\n"
"    def find_spec(self, fullname, target=None) -> ModuleSpec:\n"
"        return self.db.spec_from_name(fullname)\n"
"\n"
"sys.meta_path.append(DatabaseImporter(connect_db(...)))"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:424
msgid ""
"That importer now presumably provides importable modules from a database, "
"but it provides no metadata or entry points. For this custom importer to "
"provide metadata, it would also need to implement ``DistributionFinder``::"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:429
msgid ""
"from importlib.metadata import DistributionFinder\n"
"\n"
"class DatabaseImporter(DistributionFinder):\n"
"    ...\n"
"\n"
"    def find_distributions(self, context=DistributionFinder.Context()):\n"
"        query = dict(name=context.name) if context.name else {}\n"
"        for dist_record in self.db.query_distributions(query):\n"
"            yield DatabaseDistribution(dist_record)"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:439
msgid ""
"In this way, ``query_distributions`` would return records for each "
"distribution served by the database matching the query. For example, if "
"``requests-1.0`` is in the database, ``find_distributions`` would yield a "
"``DatabaseDistribution`` for ``Context(name='requests')`` or "
"``Context(name=None)``."
msgstr ""

#: ../Doc/library/importlib.metadata.rst:445
msgid ""
"For the sake of simplicity, this example ignores ``context.path``\\. The "
"``path`` attribute defaults to ``sys.path`` and is the set of import paths "
"to be considered in the search. A ``DatabaseImporter`` could potentially "
"function without any concern for a search path. Assuming the importer does "
"no partitioning, the \"path\" would be irrelevant. In order to illustrate "
"the purpose of ``path``, the example would need to illustrate a more complex "
"``DatabaseImporter`` whose behavior varied depending on ``sys.path``/"
"``PYTHONPATH``. In that case, the ``find_distributions`` should honor the "
"``context.path`` and only yield ``Distribution``\\ s pertinent to that path."
msgstr ""

#: ../Doc/library/importlib.metadata.rst:456
msgid "``DatabaseDistribution``, then, would look something like::"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:458
msgid ""
"class DatabaseDistribution(importlib.metadata.Distributon):\n"
"    def __init__(self, record):\n"
"        self.record = record\n"
"\n"
"    def read_text(self, filename):\n"
"        \"\"\"\n"
"        Read a file like \"METADATA\" for the current distribution.\n"
"        \"\"\"\n"
"        if filename == \"METADATA\":\n"
"            return f\"\"\"Name: {self.record.name}\n"
"Version: {self.record.version}\n"
"\"\"\"\n"
"        if filename == \"entry_points.txt\":\n"
"            return \"\\n\".join(\n"
"              f\"\"\"[{ep.group}]\\n{ep.name}={ep.value}\"\"\"\n"
"              for ep in self.record.entry_points)\n"
"\n"
"    def locate_file(self, path):\n"
"        raise RuntimeError(\"This distribution has no file system\")"
msgstr ""

#: ../Doc/library/importlib.metadata.rst:478
msgid ""
"This basic implementation should provide metadata and entry points for "
"packages served by the ``DatabaseImporter``, assuming that the ``record`` "
"supplies suitable ``.name``, ``.version``, and ``.entry_points`` attributes."
msgstr ""

#: ../Doc/library/importlib.metadata.rst:483
msgid ""
"The ``DatabaseDistribution`` may also provide other metadata files, like "
"``RECORD`` (required for ``Distribution.files``) or override the "
"implementation of ``Distribution.files``. See the source for more "
"inspiration."
msgstr ""
