# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-21 16:38-0300\n"
"PO-Revision-Date: 2023-10-22 21:17-0500\n"
"Last-Translator: Marco Richetta <marcorichetta@gmail.com>\n"
"Language: es\n"
"Language-Team: python-doc-es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../Doc/library/ast.rst:2
#, fuzzy
msgid ":mod:`!ast` --- Abstract Syntax Trees"
msgstr ":mod:`ast` --- Árboles de sintaxis abstracta"

#: ../Doc/library/ast.rst:14
msgid "**Source code:** :source:`Lib/ast.py`"
msgstr "**Código fuente:** :source:`Lib/ast.py`"

#: ../Doc/library/ast.rst:18
msgid ""
"The :mod:`ast` module helps Python applications to process trees of the "
"Python abstract syntax grammar.  The abstract syntax itself might change "
"with each Python release; this module helps to find out programmatically "
"what the current grammar looks like."
msgstr ""
"El módulo :mod:`ast` ayuda a las aplicaciones de Python a procesar árboles "
"de la gramática de sintaxis abstracta de Python. La sintaxis abstracta en sí "
"misma puede cambiar con cada versión de Python; Este módulo ayuda a "
"descubrir mediante programación cómo se ve la gramática actual."

#: ../Doc/library/ast.rst:23
msgid ""
"An abstract syntax tree can be generated by passing :data:`ast."
"PyCF_ONLY_AST` as a flag to the :func:`compile` built-in function, or using "
"the :func:`parse` helper provided in this module.  The result will be a tree "
"of objects whose classes all inherit from :class:`ast.AST`.  An abstract "
"syntax tree can be compiled into a Python code object using the built-in :"
"func:`compile` function."
msgstr ""
"Se puede generar un árbol de sintaxis abstracta pasando :data:`ast."
"PyCF_ONLY_AST` como un indicador de la función incorporada :func:`compile`, "
"o usando el ayudante :func:`parse` provisto en este módulo. El resultado "
"será un árbol de objetos cuyas clases todas heredan de :class:`ast.AST`. Se "
"puede compilar un árbol de sintaxis abstracta en un objeto de código Python "
"utilizando la función incorporada :func:`compile`."

#: ../Doc/library/ast.rst:33
msgid "Abstract Grammar"
msgstr "Gramática abstracta"

#: ../Doc/library/ast.rst:35
msgid "The abstract grammar is currently defined as follows:"
msgstr "La gramática abstracta se define actualmente de la siguiente manera:"

#: ../Doc/library/ast.rst:37
msgid ""
"-- ASDL's 4 builtin types are:\n"
"-- identifier, int, string, constant\n"
"\n"
"module Python\n"
"{\n"
"    mod = Module(stmt* body, type_ignore* type_ignores)\n"
"        | Interactive(stmt* body)\n"
"        | Expression(expr body)\n"
"        | FunctionType(expr* argtypes, expr returns)\n"
"\n"
"    stmt = FunctionDef(identifier name, arguments args,\n"
"                       stmt* body, expr* decorator_list, expr? returns,\n"
"                       string? type_comment, type_param* type_params)\n"
"          | AsyncFunctionDef(identifier name, arguments args,\n"
"                             stmt* body, expr* decorator_list, expr? "
"returns,\n"
"                             string? type_comment, type_param* type_params)\n"
"\n"
"          | ClassDef(identifier name,\n"
"             expr* bases,\n"
"             keyword* keywords,\n"
"             stmt* body,\n"
"             expr* decorator_list,\n"
"             type_param* type_params)\n"
"          | Return(expr? value)\n"
"\n"
"          | Delete(expr* targets)\n"
"          | Assign(expr* targets, expr value, string? type_comment)\n"
"          | TypeAlias(expr name, type_param* type_params, expr value)\n"
"          | AugAssign(expr target, operator op, expr value)\n"
"          -- 'simple' indicates that we annotate simple name without parens\n"
"          | AnnAssign(expr target, expr annotation, expr? value, int "
"simple)\n"
"\n"
"          -- use 'orelse' because else is a keyword in target languages\n"
"          | For(expr target, expr iter, stmt* body, stmt* orelse, string? "
"type_comment)\n"
"          | AsyncFor(expr target, expr iter, stmt* body, stmt* orelse, "
"string? type_comment)\n"
"          | While(expr test, stmt* body, stmt* orelse)\n"
"          | If(expr test, stmt* body, stmt* orelse)\n"
"          | With(withitem* items, stmt* body, string? type_comment)\n"
"          | AsyncWith(withitem* items, stmt* body, string? type_comment)\n"
"\n"
"          | Match(expr subject, match_case* cases)\n"
"\n"
"          | Raise(expr? exc, expr? cause)\n"
"          | Try(stmt* body, excepthandler* handlers, stmt* orelse, stmt* "
"finalbody)\n"
"          | TryStar(stmt* body, excepthandler* handlers, stmt* orelse, stmt* "
"finalbody)\n"
"          | Assert(expr test, expr? msg)\n"
"\n"
"          | Import(alias* names)\n"
"          | ImportFrom(identifier? module, alias* names, int? level)\n"
"\n"
"          | Global(identifier* names)\n"
"          | Nonlocal(identifier* names)\n"
"          | Expr(expr value)\n"
"          | Pass | Break | Continue\n"
"\n"
"          -- col_offset is the byte offset in the utf8 string the parser "
"uses\n"
"          attributes (int lineno, int col_offset, int? end_lineno, int? "
"end_col_offset)\n"
"\n"
"          -- BoolOp() can use left & right?\n"
"    expr = BoolOp(boolop op, expr* values)\n"
"         | NamedExpr(expr target, expr value)\n"
"         | BinOp(expr left, operator op, expr right)\n"
"         | UnaryOp(unaryop op, expr operand)\n"
"         | Lambda(arguments args, expr body)\n"
"         | IfExp(expr test, expr body, expr orelse)\n"
"         | Dict(expr* keys, expr* values)\n"
"         | Set(expr* elts)\n"
"         | ListComp(expr elt, comprehension* generators)\n"
"         | SetComp(expr elt, comprehension* generators)\n"
"         | DictComp(expr key, expr value, comprehension* generators)\n"
"         | GeneratorExp(expr elt, comprehension* generators)\n"
"         -- the grammar constrains where yield expressions can occur\n"
"         | Await(expr value)\n"
"         | Yield(expr? value)\n"
"         | YieldFrom(expr value)\n"
"         -- need sequences for compare to distinguish between\n"
"         -- x < 4 < 3 and (x < 4) < 3\n"
"         | Compare(expr left, cmpop* ops, expr* comparators)\n"
"         | Call(expr func, expr* args, keyword* keywords)\n"
"         | FormattedValue(expr value, int conversion, expr? format_spec)\n"
"         | JoinedStr(expr* values)\n"
"         | Constant(constant value, string? kind)\n"
"\n"
"         -- the following expression can appear in assignment context\n"
"         | Attribute(expr value, identifier attr, expr_context ctx)\n"
"         | Subscript(expr value, expr slice, expr_context ctx)\n"
"         | Starred(expr value, expr_context ctx)\n"
"         | Name(identifier id, expr_context ctx)\n"
"         | List(expr* elts, expr_context ctx)\n"
"         | Tuple(expr* elts, expr_context ctx)\n"
"\n"
"         -- can appear only in Subscript\n"
"         | Slice(expr? lower, expr? upper, expr? step)\n"
"\n"
"          -- col_offset is the byte offset in the utf8 string the parser "
"uses\n"
"          attributes (int lineno, int col_offset, int? end_lineno, int? "
"end_col_offset)\n"
"\n"
"    expr_context = Load | Store | Del\n"
"\n"
"    boolop = And | Or\n"
"\n"
"    operator = Add | Sub | Mult | MatMult | Div | Mod | Pow | LShift\n"
"                 | RShift | BitOr | BitXor | BitAnd | FloorDiv\n"
"\n"
"    unaryop = Invert | Not | UAdd | USub\n"
"\n"
"    cmpop = Eq | NotEq | Lt | LtE | Gt | GtE | Is | IsNot | In | NotIn\n"
"\n"
"    comprehension = (expr target, expr iter, expr* ifs, int is_async)\n"
"\n"
"    excepthandler = ExceptHandler(expr? type, identifier? name, stmt* body)\n"
"                    attributes (int lineno, int col_offset, int? end_lineno, "
"int? end_col_offset)\n"
"\n"
"    arguments = (arg* posonlyargs, arg* args, arg? vararg, arg* kwonlyargs,\n"
"                 expr* kw_defaults, arg? kwarg, expr* defaults)\n"
"\n"
"    arg = (identifier arg, expr? annotation, string? type_comment)\n"
"           attributes (int lineno, int col_offset, int? end_lineno, int? "
"end_col_offset)\n"
"\n"
"    -- keyword arguments supplied to call (NULL identifier for **kwargs)\n"
"    keyword = (identifier? arg, expr value)\n"
"               attributes (int lineno, int col_offset, int? end_lineno, int? "
"end_col_offset)\n"
"\n"
"    -- import name with optional 'as' alias.\n"
"    alias = (identifier name, identifier? asname)\n"
"             attributes (int lineno, int col_offset, int? end_lineno, int? "
"end_col_offset)\n"
"\n"
"    withitem = (expr context_expr, expr? optional_vars)\n"
"\n"
"    match_case = (pattern pattern, expr? guard, stmt* body)\n"
"\n"
"    pattern = MatchValue(expr value)\n"
"            | MatchSingleton(constant value)\n"
"            | MatchSequence(pattern* patterns)\n"
"            | MatchMapping(expr* keys, pattern* patterns, identifier? rest)\n"
"            | MatchClass(expr cls, pattern* patterns, identifier* kwd_attrs, "
"pattern* kwd_patterns)\n"
"\n"
"            | MatchStar(identifier? name)\n"
"            -- The optional \"rest\" MatchMapping parameter handles "
"capturing extra mapping keys\n"
"\n"
"            | MatchAs(pattern? pattern, identifier? name)\n"
"            | MatchOr(pattern* patterns)\n"
"\n"
"             attributes (int lineno, int col_offset, int end_lineno, int "
"end_col_offset)\n"
"\n"
"    type_ignore = TypeIgnore(int lineno, string tag)\n"
"\n"
"    type_param = TypeVar(identifier name, expr? bound, expr? default_value)\n"
"               | ParamSpec(identifier name, expr? default_value)\n"
"               | TypeVarTuple(identifier name, expr? default_value)\n"
"               attributes (int lineno, int col_offset, int end_lineno, int "
"end_col_offset)\n"
"}\n"
msgstr ""

#: ../Doc/library/ast.rst:42
msgid "Node classes"
msgstr "Clases nodo"

#: ../Doc/library/ast.rst:46
#, fuzzy
msgid ""
"This is the base of all AST node classes.  The actual node classes are "
"derived from the :file:`Parser/Python.asdl` file, which is reproduced :ref:"
"`above <abstract-grammar>`.  They are defined in the :mod:`!_ast` C module "
"and re-exported in :mod:`ast`."
msgstr ""
"Esta es la base de todas las clases de nodo AST.  Las clases de nodo reales "
"se derivan del archivo :file:`Parser/Python.asdl`, que se reproduce :ref:"
"`abajo <abstract-grammar>`.  Se definen en el módulo :mod:`_ast` C y se "
"reexportan en :mod:`ast`."

#: ../Doc/library/ast.rst:51
msgid ""
"There is one class defined for each left-hand side symbol in the abstract "
"grammar (for example, :class:`ast.stmt` or :class:`ast.expr`).  In addition, "
"there is one class defined for each constructor on the right-hand side; "
"these classes inherit from the classes for the left-hand side trees.  For "
"example, :class:`ast.BinOp` inherits from :class:`ast.expr`.  For production "
"rules with alternatives (aka \"sums\"), the left-hand side class is "
"abstract: only instances of specific constructor nodes are ever created."
msgstr ""
"Hay una clase definida para cada símbolo del lado izquierdo en la gramática "
"abstracta (por ejemplo, :class:`ast.stmt` o :class:`ast.expr`). Además, hay "
"una clase definida para cada constructor en el lado derecho; estas clases "
"heredan de las clases para los árboles del lado izquierdo. Por ejemplo, :"
"class:`ast.BinOp` hereda de :class:`ast.expr`. Para las reglas de producción "
"con alternativas (también conocidas como \"sumas\"), la clase del lado "
"izquierdo es abstracta: solo se crean instancias de nodos de constructor "
"específicos."

#: ../Doc/library/ast.rst:64
#, fuzzy
msgid ""
"Each concrete class has an attribute :attr:`!_fields` which gives the names "
"of all child nodes."
msgstr ""
"Cada clase concreta tiene un atributo :attr:`_fields` que proporciona los "
"nombres de todos los nodos secundarios."

#: ../Doc/library/ast.rst:67
msgid ""
"Each instance of a concrete class has one attribute for each child node, of "
"the type as defined in the grammar.  For example, :class:`ast.BinOp` "
"instances have an attribute :attr:`left` of type :class:`ast.expr`."
msgstr ""
"Cada instancia de una clase concreta tiene un atributo para cada nodo "
"secundario, del tipo definido en la gramática. Por ejemplo, las instancias :"
"class:`ast.BinOp` tienen un atributo :attr:`left` de tipo :class:`ast.expr`."

#: ../Doc/library/ast.rst:71
msgid ""
"If these attributes are marked as optional in the grammar (using a question "
"mark), the value might be ``None``.  If the attributes can have zero-or-more "
"values (marked with an asterisk), the values are represented as Python "
"lists.  All possible attributes must be present and have valid values when "
"compiling an AST with :func:`compile`."
msgstr ""
"Si estos atributos están marcados como opcionales en la gramática (usando un "
"signo de interrogación), el valor podría ser ``None``. Si los atributos "
"pueden tener cero o más valores (marcados con un asterisco), los valores se "
"representan como listas de Python. Todos los atributos posibles deben estar "
"presentes y tener valores válidos al compilar un AST con :func:`compile`."

#: ../Doc/library/ast.rst:79
msgid ""
"The :attr:`!_field_types` attribute on each concrete class is a dictionary "
"mapping field names (as also listed in :attr:`_fields`) to their types."
msgstr ""

#: ../Doc/library/ast.rst:82
msgid ""
">>> ast.TypeVar._field_types\n"
"{'name': <class 'str'>, 'bound': ast.expr | None, 'default_value': ast.expr "
"| None}"
msgstr ""

#: ../Doc/library/ast.rst:94
msgid ""
"Instances of :class:`ast.expr` and :class:`ast.stmt` subclasses have :attr:"
"`lineno`, :attr:`col_offset`, :attr:`end_lineno`, and :attr:`end_col_offset` "
"attributes.  The :attr:`lineno` and :attr:`end_lineno` are the first and "
"last line numbers of source text span (1-indexed so the first line is line "
"1) and the :attr:`col_offset` and :attr:`end_col_offset` are the "
"corresponding UTF-8 byte offsets of the first and last tokens that generated "
"the node. The UTF-8 offset is recorded because the parser uses UTF-8 "
"internally."
msgstr ""
"Las instancias de las subclases :class:`ast.expr` y :class:`ast.stmt` tienen "
"atributos :attr:`lineno`, :attr:`col_offset`, :attr:`lineno`, y :attr:"
"`col_offset`. :attr:`lineno` y :attr:`end_lineno` son los números de la "
"primera y última línea del intervalo de texto de origen (1 indexado, por lo "
"que la primera línea es la línea 1), y :attr:`col_offset` y :attr:"
"`end_col_offset` son las correspondientes compensaciones de bytes UTF-8 del "
"primer y último token que generó el nodo. El desplazamiento UTF-8 se "
"registra porque el analizador utiliza UTF-8 internamente."

#: ../Doc/library/ast.rst:103
msgid ""
"Note that the end positions are not required by the compiler and are "
"therefore optional. The end offset is *after* the last symbol, for example "
"one can get the source segment of a one-line expression node using "
"``source_line[node.col_offset : node.end_col_offset]``."
msgstr ""
"Tenga en cuenta que el compilador no requiere las posiciones finales y, por "
"lo tanto, son opcionales. El desplazamiento final es *después* del último "
"símbolo, por ejemplo, uno puede obtener el segmento fuente de un nodo de "
"expresión de una línea usando ``source_line[node.col_offset: node."
"end_col_offset]``."

#: ../Doc/library/ast.rst:108
msgid ""
"The constructor of a class :class:`ast.T` parses its arguments as follows:"
msgstr ""
"El constructor de una clase :class:`ast.T` analiza sus argumentos de la "
"siguiente manera:"

#: ../Doc/library/ast.rst:110
msgid ""
"If there are positional arguments, there must be as many as there are items "
"in :attr:`T._fields`; they will be assigned as attributes of these names."
msgstr ""
"Si hay argumentos posicionales, debe haber tantos como elementos en :attr:`T."
"_fields`; serán asignados como atributos de estos nombres."

#: ../Doc/library/ast.rst:112
msgid ""
"If there are keyword arguments, they will set the attributes of the same "
"names to the given values."
msgstr ""
"Si hay argumentos de palabras clave, establecerán los atributos de los "
"mismos nombres a los valores dados."

#: ../Doc/library/ast.rst:115
msgid ""
"For example, to create and populate an :class:`ast.UnaryOp` node, you could "
"use ::"
msgstr ""
"Por ejemplo, para crear y completar un nodo :class:`ast.UnaryOp`, puede "
"usar ::"

#: ../Doc/library/ast.rst:118
msgid ""
"node = ast.UnaryOp(ast.USub(), ast.Constant(5, lineno=0, col_offset=0),\n"
"                   lineno=0, col_offset=0)"
msgstr ""

#: ../Doc/library/ast.rst:121
msgid ""
"If a field that is optional in the grammar is omitted from the constructor, "
"it defaults to ``None``. If a list field is omitted, it defaults to the "
"empty list. If a field of type :class:`!ast.expr_context` is omitted, it "
"defaults to :class:`Load() <ast.Load>`. If any other field is omitted, a :"
"exc:`DeprecationWarning` is raised and the AST node will not have this "
"field. In Python 3.15, this condition will raise an error."
msgstr ""

#: ../Doc/library/ast.rst:130
msgid "Class :class:`ast.Constant` is now used for all constants."
msgstr "La clase :class:`ast.Constant` ahora se usa para todas las constantes."

#: ../Doc/library/ast.rst:134
msgid ""
"Simple indices are represented by their value, extended slices are "
"represented as tuples."
msgstr ""
"Los índices simples se representan por su valor, los segmentos extendidos se "
"representan como tuplas."

#: ../Doc/library/ast.rst:139
#, fuzzy
msgid ""
"Old classes :class:`!ast.Num`, :class:`!ast.Str`, :class:`!ast.Bytes`, :"
"class:`!ast.NameConstant` and :class:`!ast.Ellipsis` are still available, "
"but they will be removed in future Python releases.  In the meantime, "
"instantiating them will return an instance of a different class."
msgstr ""
"Las clases antiguas :class:`ast. Num`, :class:`ast. Str`, :class:`ast. "
"Bytes`, :class:`ast. NameConstant` y :class:`ast.Ellipsis` todavía están "
"disponibles, pero se eliminarán en futuras versiones de Python. Mientras "
"tanto, crear sus instancias retornará una instancia de una clase diferente."

#: ../Doc/library/ast.rst:146
#, fuzzy
msgid ""
"Old classes :class:`!ast.Index` and :class:`!ast.ExtSlice` are still "
"available, but they will be removed in future Python releases. In the "
"meantime, instantiating them will return an instance of a different class."
msgstr ""
"Las clases antiguas :class:`ast.Index` y :class:`ast.ExtSlice` todavía están "
"disponibles, pero se eliminarán en futuras versiones de Python. Mientras "
"tanto, crear sus instancias retornará una instancia de una clase diferente."

#: ../Doc/library/ast.rst:153
msgid ""
"Previous versions of Python allowed the creation of AST nodes that were "
"missing required fields. Similarly, AST node constructors allowed arbitrary "
"keyword arguments that were set as attributes of the AST node, even if they "
"did not match any of the fields of the AST node. This behavior is deprecated "
"and will be removed in Python 3.15."
msgstr ""

#: ../Doc/library/ast.rst:160
msgid ""
"The descriptions of the specific node classes displayed here were initially "
"adapted from the fantastic `Green Tree Snakes <https://greentreesnakes."
"readthedocs.io/en/latest/>`__ project and all its contributors."
msgstr ""
"Las descripciones de las clases de nodo específicas mostradas aquí fueron "
"adaptadas inicialmente del fantástico proyecto `Green Tree Snakes <https://"
"greentreesnakes.readthedocs.io/en/latest/>`__ y todos sus contribuidores."

#: ../Doc/library/ast.rst:169
msgid "Root nodes"
msgstr "Nodos raíz"

#: ../Doc/library/ast.rst:173
msgid ""
"A Python module, as with :ref:`file input <file-input>`. Node type generated "
"by :func:`ast.parse` in the default ``\"exec\"`` *mode*."
msgstr ""
"Un módulo de Python, como con :ref:`archivo-entrada <file-input>`. Tipo de "
"nodo generado por :func:`ast.parse` en el modo por defecto ``\"exec\"`` "
"*mode*.*mode*."

#: ../Doc/library/ast.rst:176
#, fuzzy
msgid "``body`` is a :class:`list` of the module's :ref:`ast-statements`."
msgstr "*body* es una :class:`list` de las :ref:`ast-statements` del módulo."

#: ../Doc/library/ast.rst:178
#, fuzzy
msgid ""
"``type_ignores`` is a :class:`list` of the module's type ignore comments; "
"see :func:`ast.parse` for more details."
msgstr ""
"*type_ignores* es una :class:`list` de los comentarios para ignorar tipos "
"del módulo; véase :func:`ast.parse` para más detalles."

#: ../Doc/library/ast.rst:181
msgid ""
">>> print(ast.dump(ast.parse('x = 1'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Assign(\n"
"            targets=[\n"
"                Name(id='x', ctx=Store())],\n"
"            value=Constant(value=1))])"
msgstr ""

#: ../Doc/library/ast.rst:194
msgid ""
"A single Python :ref:`expression input <expression-input>`. Node type "
"generated by :func:`ast.parse` when *mode* is ``\"eval\"``."
msgstr ""
"Una única :ref:`expression input <expression-input>` de Python. Tipo de nodo "
"generado por :func:`ast.parse` cuando *mode* es ``\"eval\"``."

#: ../Doc/library/ast.rst:197
#, fuzzy
msgid ""
"``body`` is a single node, one of the :ref:`expression types <ast-"
"expressions>`."
msgstr ""
"*body* es un único nodo, uno de los :ref:`tipos de expresión <ast-"
"expressions>`."

#: ../Doc/library/ast.rst:200 ../Doc/library/ast.rst:270
msgid ""
">>> print(ast.dump(ast.parse('123', mode='eval'), indent=4))\n"
"Expression(\n"
"    body=Constant(value=123))"
msgstr ""

#: ../Doc/library/ast.rst:209
msgid ""
"A single :ref:`interactive input <interactive>`, like in :ref:`tut-interac`. "
"Node type generated by :func:`ast.parse` when *mode* is ``\"single\"``."
msgstr ""
"Una única :ref:`entrada interactiva <interactive>`, como en :ref:`tut-"
"interac`. Tipo de nodo generado por :func:`ast.parse` cuando *mode* es "
"``\"single\"``."

#: ../Doc/library/ast.rst:212
#, fuzzy
msgid "``body`` is a :class:`list` of :ref:`statement nodes <ast-statements>`."
msgstr ""
"*body* es una :class:`list` de :ref:`nodos de declaración <ast-statements>`."

#: ../Doc/library/ast.rst:214
msgid ""
">>> print(ast.dump(ast.parse('x = 1; y = 2', mode='single'), indent=4))\n"
"Interactive(\n"
"    body=[\n"
"        Assign(\n"
"            targets=[\n"
"                Name(id='x', ctx=Store())],\n"
"            value=Constant(value=1)),\n"
"        Assign(\n"
"            targets=[\n"
"                Name(id='y', ctx=Store())],\n"
"            value=Constant(value=2))])"
msgstr ""

#: ../Doc/library/ast.rst:231
msgid ""
"A representation of an old-style type comments for functions, as Python "
"versions prior to 3.5 didn't support :pep:`484` annotations. Node type "
"generated by :func:`ast.parse` when *mode* is ``\"func_type\"``."
msgstr ""
"Una interpretación de un comentario de tipo de estilo antiguo para "
"funciones, ya que las versiones de Python anteriores a la 3.5 no soportaban "
"anotaciones :pep:`484`. Tipo de nodo generado por :func:`ast.parse` cuando "
"*mode* es ``\"func_type\"``."

#: ../Doc/library/ast.rst:235
msgid "Such type comments would look like this::"
msgstr "Los comentarios de este tipo tendrían el siguiente aspecto::"

#: ../Doc/library/ast.rst:237
msgid ""
"def sum_two_number(a, b):\n"
"    # type: (int, int) -> int\n"
"    return a + b"
msgstr ""

#: ../Doc/library/ast.rst:241
#, fuzzy
msgid ""
"``argtypes`` is a :class:`list` of :ref:`expression nodes <ast-expressions>`."
msgstr ""
"*argtypes* es una :class:`list` de :ref:`nodos de expresión <ast-"
"expressions>`."

#: ../Doc/library/ast.rst:243
#, fuzzy
msgid "``returns`` is a single :ref:`expression node <ast-expressions>`."
msgstr "*returns* es un único :ref:`nodo de expresión <ast-expressions>`."

#: ../Doc/library/ast.rst:245
msgid ""
">>> print(ast.dump(ast.parse('(int, str) -> List[int]', mode='func_type'), "
"indent=4))\n"
"FunctionType(\n"
"    argtypes=[\n"
"        Name(id='int', ctx=Load()),\n"
"        Name(id='str', ctx=Load())],\n"
"    returns=Subscript(\n"
"        value=Name(id='List', ctx=Load()),\n"
"        slice=Name(id='int', ctx=Load()),\n"
"        ctx=Load()))"
msgstr ""

#: ../Doc/library/ast.rst:261
msgid "Literals"
msgstr "Literales"

#: ../Doc/library/ast.rst:265
msgid ""
"A constant value. The ``value`` attribute of the ``Constant`` literal "
"contains the Python object it represents. The values represented can be "
"simple types such as a number, string or ``None``, but also immutable "
"container types (tuples and frozensets) if all of their elements are "
"constant."
msgstr ""
"Un valor constante. El atributo ``value`` del literal ``Constant`` contiene "
"el objeto de Python que este representa. Los valores representados pueden "
"ser de tipos simple como un número, una cadena de caracteres o ``None``; "
"pero también pueden ser de tipos de contenedores inmutables (tuplas y "
"``frozensets``) si todos sus elementos son constantes."

#: ../Doc/library/ast.rst:279
msgid ""
"Node representing a single formatting field in an f-string. If the string "
"contains a single formatting field and nothing else the node can be isolated "
"otherwise it appears in :class:`JoinedStr`."
msgstr ""
"Nodo que representa un único campo de formato en una ``f-string``. Si la "
"cadena de caracteres contiene un único campo de formato y nada más, el nodo "
"puede estar aislado de otra manera aparece en  :class:`JoinedStr`."

#: ../Doc/library/ast.rst:283
msgid ""
"``value`` is any expression node (such as a literal, a variable, or a "
"function call)."
msgstr ""
"``value`` es cualquier nodo de expresión (como un literal, una variable o "
"una llamada a función)."

#: ../Doc/library/ast.rst:285
msgid "``conversion`` is an integer:"
msgstr "``conversion`` es un entero:"

#: ../Doc/library/ast.rst:287
msgid "-1: no formatting"
msgstr "-1: sin formato"

#: ../Doc/library/ast.rst:288
msgid "115: ``!s`` string formatting"
msgstr "115: ``!s`` formato de cadena de caracteres"

#: ../Doc/library/ast.rst:289
msgid "114: ``!r`` repr formatting"
msgstr "114: ``!r`` formato repr"

#: ../Doc/library/ast.rst:290
msgid "97: ``!a`` ascii formatting"
msgstr "97: ``!a`` formato ascii"

#: ../Doc/library/ast.rst:292
msgid ""
"``format_spec`` is a :class:`JoinedStr` node representing the formatting of "
"the value, or ``None`` if no format was specified. Both ``conversion`` and "
"``format_spec`` can be set at the same time."
msgstr ""
"``format_spec`` es un nodo :class:`JoinedStr` que representa el formato del "
"valor, o ``None`` si no se ha especificado un formato. Ambos, ``conversion`` "
"y ``format_spec``, pueden estar especificados al mismo tiempo."

#: ../Doc/library/ast.rst:299
msgid ""
"An f-string, comprising a series of :class:`FormattedValue` and :class:"
"`Constant` nodes."
msgstr ""
"Un f-string que comprende una serie de nodos :class:`FormattedValue` y :"
"class:`Constant`."

#: ../Doc/library/ast.rst:302
msgid ""
">>> print(ast.dump(ast.parse('f\"sin({a}) is {sin(a):.3}\"', mode='eval'), "
"indent=4))\n"
"Expression(\n"
"    body=JoinedStr(\n"
"        values=[\n"
"            Constant(value='sin('),\n"
"            FormattedValue(\n"
"                value=Name(id='a', ctx=Load()),\n"
"                conversion=-1),\n"
"            Constant(value=') is '),\n"
"            FormattedValue(\n"
"                value=Call(\n"
"                    func=Name(id='sin', ctx=Load()),\n"
"                    args=[\n"
"                        Name(id='a', ctx=Load())]),\n"
"                conversion=-1,\n"
"                format_spec=JoinedStr(\n"
"                    values=[\n"
"                        Constant(value='.3')]))]))"
msgstr ""

#: ../Doc/library/ast.rst:327
msgid ""
"A list or tuple. ``elts`` holds a list of nodes representing the elements. "
"``ctx`` is :class:`Store` if the container is an assignment target (i.e. "
"``(x,y)=something``), and :class:`Load` otherwise."
msgstr ""
"Una lista o tupla. ``elts`` contiene una lista de nodos que representa a los "
"elementos. ``ctx`` es :class:`Store` si el contenedor es un objetivo de "
"asignación (por ejemplo ``(x,y)=something``), y :class:`Load` en cualquier "
"otro caso."

#: ../Doc/library/ast.rst:331
msgid ""
">>> print(ast.dump(ast.parse('[1, 2, 3]', mode='eval'), indent=4))\n"
"Expression(\n"
"    body=List(\n"
"        elts=[\n"
"            Constant(value=1),\n"
"            Constant(value=2),\n"
"            Constant(value=3)],\n"
"        ctx=Load()))\n"
">>> print(ast.dump(ast.parse('(1, 2, 3)', mode='eval'), indent=4))\n"
"Expression(\n"
"    body=Tuple(\n"
"        elts=[\n"
"            Constant(value=1),\n"
"            Constant(value=2),\n"
"            Constant(value=3)],\n"
"        ctx=Load()))"
msgstr ""

#: ../Doc/library/ast.rst:353
msgid "A set. ``elts`` holds a list of nodes representing the set's elements."
msgstr ""
"Un set. ``elts`` contiene una lista de nodos que representa a un set de "
"elementos."

#: ../Doc/library/ast.rst:355
msgid ""
">>> print(ast.dump(ast.parse('{1, 2, 3}', mode='eval'), indent=4))\n"
"Expression(\n"
"    body=Set(\n"
"        elts=[\n"
"            Constant(value=1),\n"
"            Constant(value=2),\n"
"            Constant(value=3)]))"
msgstr ""

#: ../Doc/library/ast.rst:368
msgid ""
"A dictionary. ``keys`` and ``values`` hold lists of nodes representing the "
"keys and the values respectively, in matching order (what would be returned "
"when calling :code:`dictionary.keys()` and :code:`dictionary.values()`)."
msgstr ""
"Un diccionario. ``keys`` y ``values`` contienen listas de nodos que "
"representan las claves y los valores respectivamente en el orden "
"correspondiente (el orden que retornaría :code:`dictionary.keys()` y :code:"
"`dictionary.values()`)."

#: ../Doc/library/ast.rst:372
msgid ""
"When doing dictionary unpacking using dictionary literals the expression to "
"be expanded goes in the ``values`` list, with a ``None`` at the "
"corresponding position in ``keys``."
msgstr ""
"Cuando se desempaqueta un diccionario utilizando literales de diccionario, "
"la expresión a ser expandida va en la lista ``values``, con ``None`` en la "
"posición correspondiente en ``keys``."

#: ../Doc/library/ast.rst:376
msgid ""
">>> print(ast.dump(ast.parse('{\"a\":1, **d}', mode='eval'), indent=4))\n"
"Expression(\n"
"    body=Dict(\n"
"        keys=[\n"
"            Constant(value='a'),\n"
"            None],\n"
"        values=[\n"
"            Constant(value=1),\n"
"            Name(id='d', ctx=Load())]))"
msgstr ""

#: ../Doc/library/ast.rst:390
msgid "Variables"
msgstr "Variables"

#: ../Doc/library/ast.rst:394
msgid ""
"A variable name. ``id`` holds the name as a string, and ``ctx`` is one of "
"the following types."
msgstr ""
"Un nombre de variable. ``id`` contiene el nombre de una cadena de caracteres "
"y ``ctx`` es uno de los siguientes tipos."

#: ../Doc/library/ast.rst:402
msgid ""
"Variable references can be used to load the value of a variable, to assign a "
"new value to it, or to delete it. Variable references are given a context to "
"distinguish these cases."
msgstr ""
"Referencias a variables que pueden ser usadas para cargar el valor de una "
"variable, asignar un nuevo valor o borrarlo. Las referencias a variables "
"reciben un contexto para distinguir entre estos casos."

#: ../Doc/library/ast.rst:406
msgid ""
">>> print(ast.dump(ast.parse('a'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Expr(\n"
"            value=Name(id='a', ctx=Load()))])\n"
"\n"
">>> print(ast.dump(ast.parse('a = 1'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Assign(\n"
"            targets=[\n"
"                Name(id='a', ctx=Store())],\n"
"            value=Constant(value=1))])\n"
"\n"
">>> print(ast.dump(ast.parse('del a'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Delete(\n"
"            targets=[\n"
"                Name(id='a', ctx=Del())])])"
msgstr ""

#: ../Doc/library/ast.rst:432
msgid ""
"A ``*var`` variable reference. ``value`` holds the variable, typically a :"
"class:`Name` node. This type must be used when building a :class:`Call` node "
"with ``*args``."
msgstr ""
"Una referencia a variable ``*var``. ``value`` contiene la variable, "
"típicamente un nodo :class:`Name`. Este tipo puede ser usado cuando se "
"construye un nodo :class:`Call` con ``*args``."

#: ../Doc/library/ast.rst:436
msgid ""
">>> print(ast.dump(ast.parse('a, *b = it'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Assign(\n"
"            targets=[\n"
"                Tuple(\n"
"                    elts=[\n"
"                        Name(id='a', ctx=Store()),\n"
"                        Starred(\n"
"                            value=Name(id='b', ctx=Store()),\n"
"                            ctx=Store())],\n"
"                    ctx=Store())],\n"
"            value=Name(id='it', ctx=Load()))])"
msgstr ""

#: ../Doc/library/ast.rst:456
msgid "Expressions"
msgstr "Expresiones"

#: ../Doc/library/ast.rst:460
msgid ""
"When an expression, such as a function call, appears as a statement by "
"itself with its return value not used or stored, it is wrapped in this "
"container. ``value`` holds one of the other nodes in this section, a :class:"
"`Constant`, a :class:`Name`, a :class:`Lambda`, a :class:`Yield` or :class:"
"`YieldFrom` node."
msgstr ""
"Cuando una expresión, como un llamado a función, aparece como una "
"declaración por sí misma sin que su valor de retorno se use o se almacene, "
"está dentro de este contenedor. ``value`` contiene uno de los otros nodos en "
"esta sección, un nodo :class:`Constant`, :class:`Name`, :class:`Lambda`, :"
"class:`Yield` o :class:`YieldFrom`."

#: ../Doc/library/ast.rst:465
msgid ""
">>> print(ast.dump(ast.parse('-a'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Expr(\n"
"            value=UnaryOp(\n"
"                op=USub(),\n"
"                operand=Name(id='a', ctx=Load())))])"
msgstr ""

#: ../Doc/library/ast.rst:478
msgid ""
"A unary operation. ``op`` is the operator, and ``operand`` any expression "
"node."
msgstr ""
"Una operación unaria. ``op`` es el operador y ``operand`` es cualquier nodo "
"de expresión."

#: ../Doc/library/ast.rst:487
msgid ""
"Unary operator tokens. :class:`Not` is the ``not`` keyword, :class:`Invert` "
"is the ``~`` operator."
msgstr ""
"Tokens de operador unario. :class:`Not` es la palabra clave ``not``, :class:"
"`Invert` es el operador ``~``."

#: ../Doc/library/ast.rst:490
msgid ""
">>> print(ast.dump(ast.parse('not x', mode='eval'), indent=4))\n"
"Expression(\n"
"    body=UnaryOp(\n"
"        op=Not(),\n"
"        operand=Name(id='x', ctx=Load())))"
msgstr ""

#: ../Doc/library/ast.rst:501
msgid ""
"A binary operation (like addition or division). ``op`` is the operator, and "
"``left`` and ``right`` are any expression nodes."
msgstr ""
"Una operación binaria (como la suma o división(. ``op`` es el operador, y "
"``left`` y ``right`` son cualquier nodo de expresión."

#: ../Doc/library/ast.rst:504
msgid ""
">>> print(ast.dump(ast.parse('x + y', mode='eval'), indent=4))\n"
"Expression(\n"
"    body=BinOp(\n"
"        left=Name(id='x', ctx=Load()),\n"
"        op=Add(),\n"
"        right=Name(id='y', ctx=Load())))"
msgstr ""

#: ../Doc/library/ast.rst:528
msgid "Binary operator tokens."
msgstr "Tokens de operador binario."

#: ../Doc/library/ast.rst:533
msgid ""
"A boolean operation, 'or' or 'and'. ``op`` is :class:`Or` or :class:`And`. "
"``values`` are the values involved. Consecutive operations with the same "
"operator, such as ``a or b or c``, are collapsed into one node with several "
"values."
msgstr ""
"Una operación booleana, 'or' y 'and'. ``op`` es :class:`Or` o :class:`And`. "
"``values`` son los valores involucrados. Operaciones consecutivas con el "
"mismo operador, como ``a or b or c``, colapsan en un nodo con varios valores."

#: ../Doc/library/ast.rst:538
msgid "This doesn't include ``not``, which is a :class:`UnaryOp`."
msgstr "Esto no incluye ``not``, el cual es un :class:`UnaryOp`."

#: ../Doc/library/ast.rst:540
msgid ""
">>> print(ast.dump(ast.parse('x or y', mode='eval'), indent=4))\n"
"Expression(\n"
"    body=BoolOp(\n"
"        op=Or(),\n"
"        values=[\n"
"            Name(id='x', ctx=Load()),\n"
"            Name(id='y', ctx=Load())]))"
msgstr ""

#: ../Doc/library/ast.rst:554
msgid "Boolean operator tokens."
msgstr "Tokens de operador booleano."

#: ../Doc/library/ast.rst:559
msgid ""
"A comparison of two or more values. ``left`` is the first value in the "
"comparison, ``ops`` the list of operators, and ``comparators`` the list of "
"values after the first element in the comparison."
msgstr ""
"Una comparación de dos o más valores. ``left`` es el primer valor en la "
"comparación, ``ops`` es la lista de operadores, y ``comparators`` es la "
"lista de valores después de el primer elemento en la comparación."

#: ../Doc/library/ast.rst:563
msgid ""
">>> print(ast.dump(ast.parse('1 <= a < 10', mode='eval'), indent=4))\n"
"Expression(\n"
"    body=Compare(\n"
"        left=Constant(value=1),\n"
"        ops=[\n"
"            LtE(),\n"
"            Lt()],\n"
"        comparators=[\n"
"            Name(id='a', ctx=Load()),\n"
"            Constant(value=10)]))"
msgstr ""

#: ../Doc/library/ast.rst:588
msgid "Comparison operator tokens."
msgstr "Tokens de operador de comparación."

#: ../Doc/library/ast.rst:593
msgid ""
"A function call. ``func`` is the function, which will often be a :class:"
"`Name` or :class:`Attribute` object. Of the arguments:"
msgstr ""
"Un llamado a función. ``func`` is la función, la cual suele ser un objeto :"
"class:`Name` o :class:`Attribute`. De los argumentos:"

#: ../Doc/library/ast.rst:596
msgid "``args`` holds a list of the arguments passed by position."
msgstr "``args`` contiene una lista de argumentos pasados por posición."

#: ../Doc/library/ast.rst:597
msgid ""
"``keywords`` holds a list of :class:`.keyword` objects representing "
"arguments passed by keyword."
msgstr ""
"``keywords`` contiene una lista de objetos :class:`.keyword` que representan "
"argumentos pasados por nombre clave."

#: ../Doc/library/ast.rst:600
msgid ""
"The ``args`` and ``keywords`` arguments are optional and default to empty "
"lists."
msgstr ""

#: ../Doc/library/ast.rst:602
msgid ""
">>> print(ast.dump(ast.parse('func(a, b=c, *d, **e)', mode='eval'), "
"indent=4))\n"
"Expression(\n"
"    body=Call(\n"
"        func=Name(id='func', ctx=Load()),\n"
"        args=[\n"
"            Name(id='a', ctx=Load()),\n"
"            Starred(\n"
"                value=Name(id='d', ctx=Load()),\n"
"                ctx=Load())],\n"
"        keywords=[\n"
"            keyword(\n"
"                arg='b',\n"
"                value=Name(id='c', ctx=Load())),\n"
"            keyword(\n"
"                value=Name(id='e', ctx=Load()))]))"
msgstr ""

#: ../Doc/library/ast.rst:623
msgid ""
"A keyword argument to a function call or class definition. ``arg`` is a raw "
"string of the parameter name, ``value`` is a node to pass in."
msgstr ""
"Un argumento de palabra clave para una llamada de función o definición de "
"clase. ``arg`` es una cadena de caracteres sin formato del nombre del "
"parámetro, ``valor`` es un nodo para pasar."

#: ../Doc/library/ast.rst:629
msgid ""
"An expression such as ``a if b else c``. Each field holds a single node, so "
"in the following example, all three are :class:`Name` nodes."
msgstr ""
"Una expresión como ``a if b else c``. Cada campo contiene un único nodo, por "
"lo que en el siguiente ejemplo, todos son nodos  :class:`Name`."

#: ../Doc/library/ast.rst:632
msgid ""
">>> print(ast.dump(ast.parse('a if b else c', mode='eval'), indent=4))\n"
"Expression(\n"
"    body=IfExp(\n"
"        test=Name(id='b', ctx=Load()),\n"
"        body=Name(id='a', ctx=Load()),\n"
"        orelse=Name(id='c', ctx=Load())))"
msgstr ""

#: ../Doc/library/ast.rst:644
msgid ""
"Attribute access, e.g. ``d.keys``. ``value`` is a node, typically a :class:"
"`Name`. ``attr`` is a bare string giving the name of the attribute, and "
"``ctx`` is :class:`Load`, :class:`Store` or :class:`Del` according to how "
"the attribute is acted on."
msgstr ""
"Acceso a atributos, por ejemplo ``d.keys``. ``value`` es un nodo, "
"típicamente un :class:`Name`. ``attr`` es una simple cadena de caracteres "
"que da el nombre del atributo, y ``ctx`` es :class:`Load`, :class:`Store` o :"
"class:`Del` de acuerdo a cómo se actúe sobre el atributo."

#: ../Doc/library/ast.rst:649
msgid ""
">>> print(ast.dump(ast.parse('snake.colour', mode='eval'), indent=4))\n"
"Expression(\n"
"    body=Attribute(\n"
"        value=Name(id='snake', ctx=Load()),\n"
"        attr='colour',\n"
"        ctx=Load()))"
msgstr ""

#: ../Doc/library/ast.rst:661
msgid ""
"A named expression. This AST node is produced by the assignment expressions "
"operator (also known as the walrus operator). As opposed to the :class:"
"`Assign` node in which the first argument can be multiple nodes, in this "
"case both ``target`` and ``value`` must be single nodes."
msgstr ""
"Una expresión con nombre. Este nodo AST es producido por el operador de "
"expresiones de asignación (también conocido como el operador walrus). A "
"diferencia del nodo :class:`Assign` en el cual el primer argumento puede ser "
"varios nodos, en este caso ``target`` y ``value`` deben ser nodos únicos."

#: ../Doc/library/ast.rst:666
msgid ""
">>> print(ast.dump(ast.parse('(x := 4)', mode='eval'), indent=4))\n"
"Expression(\n"
"    body=NamedExpr(\n"
"        target=Name(id='x', ctx=Store()),\n"
"        value=Constant(value=4)))"
msgstr ""

#: ../Doc/library/ast.rst:677
msgid "Subscripting"
msgstr "Subindexado"

#: ../Doc/library/ast.rst:681
msgid ""
"A subscript, such as ``l[1]``. ``value`` is the subscripted object (usually "
"sequence or mapping). ``slice`` is an index, slice or key. It can be a :"
"class:`Tuple` and contain a :class:`Slice`. ``ctx`` is :class:`Load`, :class:"
"`Store` or :class:`Del` according to the action performed with the subscript."
msgstr ""
"Un subíndice, como ``l[1]``. ``value`` es el objeto subindicado (usualmente "
"una secuencia o mapeo). ``slice`` es un índice, un segmento o una clave. "
"Este puede ser una :class:`Tuple` y contener un :class:`Slice`. ``ctx`` es :"
"class:`Load`, :class:`Store` or :class:`Del` de acuerdo a la acción tomada "
"con el subíndice."

#: ../Doc/library/ast.rst:687
msgid ""
">>> print(ast.dump(ast.parse('l[1:2, 3]', mode='eval'), indent=4))\n"
"Expression(\n"
"    body=Subscript(\n"
"        value=Name(id='l', ctx=Load()),\n"
"        slice=Tuple(\n"
"            elts=[\n"
"                Slice(\n"
"                    lower=Constant(value=1),\n"
"                    upper=Constant(value=2)),\n"
"                Constant(value=3)],\n"
"            ctx=Load()),\n"
"        ctx=Load()))"
msgstr ""

#: ../Doc/library/ast.rst:705
msgid ""
"Regular slicing (on the form ``lower:upper`` or ``lower:upper:step``). Can "
"occur only inside the *slice* field of :class:`Subscript`, either directly "
"or as an element of :class:`Tuple`."
msgstr ""
"Una segmentación regular (en la forma ``lower:upper`` o ``lower:upper:"
"step``). Puede ocurrir solamente dentro del campo *slice* de :class:"
"`Subscript`, ya sea directamente o como un elemento de :class:`Tuple`."

#: ../Doc/library/ast.rst:709
msgid ""
">>> print(ast.dump(ast.parse('l[1:2]', mode='eval'), indent=4))\n"
"Expression(\n"
"    body=Subscript(\n"
"        value=Name(id='l', ctx=Load()),\n"
"        slice=Slice(\n"
"            lower=Constant(value=1),\n"
"            upper=Constant(value=2)),\n"
"        ctx=Load()))"
msgstr ""

#: ../Doc/library/ast.rst:722
msgid "Comprehensions"
msgstr "Comprensiones"

#: ../Doc/library/ast.rst:729
msgid ""
"List and set comprehensions, generator expressions, and dictionary "
"comprehensions. ``elt`` (or ``key`` and ``value``) is a single node "
"representing the part that will be evaluated for each item."
msgstr ""
"Listas y sets por comprensión, expresiones de generadores, y diccionarios "
"por comprensión. ``elt`` (o ``key`` y ``value``) es un único nodo que "
"representa la parte que va a ser evaluada por cada item."

#: ../Doc/library/ast.rst:733
msgid "``generators`` is a list of :class:`comprehension` nodes."
msgstr "``generators`` es una lista de nodos :class:`comprehension`."

#: ../Doc/library/ast.rst:735
msgid ""
">>> print(ast.dump(\n"
"...     ast.parse('[x for x in numbers]', mode='eval'),\n"
"...     indent=4,\n"
"... ))\n"
"Expression(\n"
"    body=ListComp(\n"
"        elt=Name(id='x', ctx=Load()),\n"
"        generators=[\n"
"            comprehension(\n"
"                target=Name(id='x', ctx=Store()),\n"
"                iter=Name(id='numbers', ctx=Load()),\n"
"                is_async=0)]))\n"
">>> print(ast.dump(\n"
"...     ast.parse('{x: x**2 for x in numbers}', mode='eval'),\n"
"...     indent=4,\n"
"... ))\n"
"Expression(\n"
"    body=DictComp(\n"
"        key=Name(id='x', ctx=Load()),\n"
"        value=BinOp(\n"
"            left=Name(id='x', ctx=Load()),\n"
"            op=Pow(),\n"
"            right=Constant(value=2)),\n"
"        generators=[\n"
"            comprehension(\n"
"                target=Name(id='x', ctx=Store()),\n"
"                iter=Name(id='numbers', ctx=Load()),\n"
"                is_async=0)]))\n"
">>> print(ast.dump(\n"
"...     ast.parse('{x for x in numbers}', mode='eval'),\n"
"...     indent=4,\n"
"... ))\n"
"Expression(\n"
"    body=SetComp(\n"
"        elt=Name(id='x', ctx=Load()),\n"
"        generators=[\n"
"            comprehension(\n"
"                target=Name(id='x', ctx=Store()),\n"
"                iter=Name(id='numbers', ctx=Load()),\n"
"                is_async=0)]))"
msgstr ""

#: ../Doc/library/ast.rst:781
msgid ""
"One ``for`` clause in a comprehension. ``target`` is the reference to use "
"for each element - typically a :class:`Name` or :class:`Tuple` node. "
"``iter`` is the object to iterate over. ``ifs`` is a list of test "
"expressions: each ``for`` clause can have multiple ``ifs``."
msgstr ""
"Una cláusula ``for`` en una comprensión. ``target`` es la referencia a "
"usarse por cada elemento - típicamente un nodo :class:`Name` o :class:"
"`Tuple`. ``iter`` es el objeto por el cual se itera. ``ifs`` es una lista de "
"expresiones de prueba: cada cláusula ``for`` puede tener múltiples ``ifs``."

#: ../Doc/library/ast.rst:786
msgid ""
"``is_async`` indicates a comprehension is asynchronous (using an ``async "
"for`` instead of ``for``). The value is an integer (0 or 1)."
msgstr ""
"``is_async`` indica que una compresión es asíncrona (usando ``async for`` en "
"lugar de ``for``). El valor es un entero (0 o 1)."

#: ../Doc/library/ast.rst:789
msgid ""
">>> print(ast.dump(ast.parse('[ord(c) for line in file for c in line]', "
"mode='eval'),\n"
"...                indent=4)) # Multiple comprehensions in one.\n"
"Expression(\n"
"    body=ListComp(\n"
"        elt=Call(\n"
"            func=Name(id='ord', ctx=Load()),\n"
"            args=[\n"
"                Name(id='c', ctx=Load())]),\n"
"        generators=[\n"
"            comprehension(\n"
"                target=Name(id='line', ctx=Store()),\n"
"                iter=Name(id='file', ctx=Load()),\n"
"                is_async=0),\n"
"            comprehension(\n"
"                target=Name(id='c', ctx=Store()),\n"
"                iter=Name(id='line', ctx=Load()),\n"
"                is_async=0)]))\n"
"\n"
">>> print(ast.dump(ast.parse('(n**2 for n in it if n>5 if n<10)', "
"mode='eval'),\n"
"...                indent=4)) # generator comprehension\n"
"Expression(\n"
"    body=GeneratorExp(\n"
"        elt=BinOp(\n"
"            left=Name(id='n', ctx=Load()),\n"
"            op=Pow(),\n"
"            right=Constant(value=2)),\n"
"        generators=[\n"
"            comprehension(\n"
"                target=Name(id='n', ctx=Store()),\n"
"                iter=Name(id='it', ctx=Load()),\n"
"                ifs=[\n"
"                    Compare(\n"
"                        left=Name(id='n', ctx=Load()),\n"
"                        ops=[\n"
"                            Gt()],\n"
"                        comparators=[\n"
"                            Constant(value=5)]),\n"
"                    Compare(\n"
"                        left=Name(id='n', ctx=Load()),\n"
"                        ops=[\n"
"                            Lt()],\n"
"                        comparators=[\n"
"                            Constant(value=10)])],\n"
"                is_async=0)]))\n"
"\n"
">>> print(ast.dump(ast.parse('[i async for i in soc]', mode='eval'),\n"
"...                indent=4)) # Async comprehension\n"
"Expression(\n"
"    body=ListComp(\n"
"        elt=Name(id='i', ctx=Load()),\n"
"        generators=[\n"
"            comprehension(\n"
"                target=Name(id='i', ctx=Store()),\n"
"                iter=Name(id='soc', ctx=Load()),\n"
"                is_async=1)]))"
msgstr ""

#: ../Doc/library/ast.rst:851
msgid "Statements"
msgstr "Declaraciones"

#: ../Doc/library/ast.rst:855
msgid ""
"An assignment. ``targets`` is a list of nodes, and ``value`` is a single "
"node."
msgstr ""
"Una asignación. ``targets`` es una lista de nodos, y ``value`` es un nodo "
"único."

#: ../Doc/library/ast.rst:857
msgid ""
"Multiple nodes in ``targets`` represents assigning the same value to each. "
"Unpacking is represented by putting a :class:`Tuple` or :class:`List` within "
"``targets``."
msgstr ""
"Nodos múltiples en ``targets`` representa asignar el mismo valor a cada uno. "
"El desempaquetado se representa poniendo una :class:`Tuple` o :class:`List` "
"en ``targets``."

#: ../Doc/library/ast.rst:863 ../Doc/library/ast.rst:1158
#: ../Doc/library/ast.rst:1352 ../Doc/library/ast.rst:1881
msgid ""
"``type_comment`` is an optional string with the type annotation as a comment."
msgstr ""
"``type_comment`` es una cadena de caracteres opcional con la anotación de "
"tipos como comentario."

#: ../Doc/library/ast.rst:865
msgid ""
">>> print(ast.dump(ast.parse('a = b = 1'), indent=4)) # Multiple assignment\n"
"Module(\n"
"    body=[\n"
"        Assign(\n"
"            targets=[\n"
"                Name(id='a', ctx=Store()),\n"
"                Name(id='b', ctx=Store())],\n"
"            value=Constant(value=1))])\n"
"\n"
">>> print(ast.dump(ast.parse('a,b = c'), indent=4)) # Unpacking\n"
"Module(\n"
"    body=[\n"
"        Assign(\n"
"            targets=[\n"
"                Tuple(\n"
"                    elts=[\n"
"                        Name(id='a', ctx=Store()),\n"
"                        Name(id='b', ctx=Store())],\n"
"                    ctx=Store())],\n"
"            value=Name(id='c', ctx=Load()))])"
msgstr ""

#: ../Doc/library/ast.rst:891
#, fuzzy
msgid ""
"An assignment with a type annotation. ``target`` is a single node and can be "
"a :class:`Name`, an :class:`Attribute` or a :class:`Subscript`. "
"``annotation`` is the annotation, such as a :class:`Constant` or :class:"
"`Name` node. ``value`` is a single optional node."
msgstr ""
"Una asignación con una anotación de tipos. ``target`` es un nodo único y "
"puede ser un :class:`Name`, a :class:`Attribute` o un :class:`Subscript`. "
"``annotation`` es la anotación, como un nodo :class:`Constant` o :class:"
"`Name`. ``value`` es un único nodo opcional. ``simple`` es un booleano que "
"es True para un nodo :class:`Name` en `target` que no aparece entre "
"paréntesis y por ende son nombres puros y no expresiones."

#: ../Doc/library/ast.rst:896
msgid ""
"``simple`` is always either 0 (indicating a \"complex\" target) or 1 "
"(indicating a \"simple\" target). A \"simple\" target consists solely of a :"
"class:`Name` node that does not appear between parentheses; all other "
"targets are considered complex. Only simple targets appear in the :attr:"
"`__annotations__` dictionary of modules and classes."
msgstr ""

#: ../Doc/library/ast.rst:902
msgid ""
">>> print(ast.dump(ast.parse('c: int'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        AnnAssign(\n"
"            target=Name(id='c', ctx=Store()),\n"
"            annotation=Name(id='int', ctx=Load()),\n"
"            simple=1)])\n"
"\n"
">>> print(ast.dump(ast.parse('(a): int = 1'), indent=4)) # Annotation with "
"parenthesis\n"
"Module(\n"
"    body=[\n"
"        AnnAssign(\n"
"            target=Name(id='a', ctx=Store()),\n"
"            annotation=Name(id='int', ctx=Load()),\n"
"            value=Constant(value=1),\n"
"            simple=0)])\n"
"\n"
">>> print(ast.dump(ast.parse('a.b: int'), indent=4)) # Attribute annotation\n"
"Module(\n"
"    body=[\n"
"        AnnAssign(\n"
"            target=Attribute(\n"
"                value=Name(id='a', ctx=Load()),\n"
"                attr='b',\n"
"                ctx=Store()),\n"
"            annotation=Name(id='int', ctx=Load()),\n"
"            simple=0)])\n"
"\n"
">>> print(ast.dump(ast.parse('a[1]: int'), indent=4)) # Subscript "
"annotation\n"
"Module(\n"
"    body=[\n"
"        AnnAssign(\n"
"            target=Subscript(\n"
"                value=Name(id='a', ctx=Load()),\n"
"                slice=Constant(value=1),\n"
"                ctx=Store()),\n"
"            annotation=Name(id='int', ctx=Load()),\n"
"            simple=0)])"
msgstr ""

#: ../Doc/library/ast.rst:946
msgid ""
"Augmented assignment, such as ``a += 1``. In the following example, "
"``target`` is a :class:`Name` node for ``x`` (with the :class:`Store` "
"context), ``op`` is :class:`Add`, and ``value`` is a :class:`Constant` with "
"value for 1."
msgstr ""
"Asignación aumentada, como ``a+=1``. En el siguiente ejemplo, ``target`` es "
"un nodo :class:`Name` para ``x`` (con el contexto :class:`Store`), ``op`` "
"es :class:`Add` y ``value`` es un :class:`Constant` con valor 1."

#: ../Doc/library/ast.rst:951
msgid ""
"The ``target`` attribute cannot be of class :class:`Tuple` or :class:`List`, "
"unlike the targets of :class:`Assign`."
msgstr ""
"El atributo ``target`` no puede ser de clase :class:`Tuple` o :class:`List`, "
"a diferencia de los objetivos de :class:`Assign`."

#: ../Doc/library/ast.rst:954
msgid ""
">>> print(ast.dump(ast.parse('x += 2'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        AugAssign(\n"
"            target=Name(id='x', ctx=Store()),\n"
"            op=Add(),\n"
"            value=Constant(value=2))])"
msgstr ""

#: ../Doc/library/ast.rst:967
msgid ""
"A ``raise`` statement. ``exc`` is the exception object to be raised, "
"normally a :class:`Call` or :class:`Name`, or ``None`` for a standalone "
"``raise``. ``cause`` is the optional part for ``y`` in ``raise x from y``."
msgstr ""
"Una declaración ``raise``. ``exc`` es el objeto de excepción a ser lanzado, "
"normalmente un :class:`Call` or :class:`Name`, o ``None`` para un ``raise`` "
"solo. ``cause`` es la parte opcional para ``y`` en ``raise x from y``."

#: ../Doc/library/ast.rst:971
msgid ""
">>> print(ast.dump(ast.parse('raise x from y'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Raise(\n"
"            exc=Name(id='x', ctx=Load()),\n"
"            cause=Name(id='y', ctx=Load()))])"
msgstr ""

#: ../Doc/library/ast.rst:983
msgid ""
"An assertion. ``test`` holds the condition, such as a :class:`Compare` node. "
"``msg`` holds the failure message."
msgstr ""
"Una aserción. ``test`` contiene la condición, como un nodo :class:`Compare`. "
"``msg`` contiene el mensaje de fallo."

#: ../Doc/library/ast.rst:986
msgid ""
">>> print(ast.dump(ast.parse('assert x,y'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Assert(\n"
"            test=Name(id='x', ctx=Load()),\n"
"            msg=Name(id='y', ctx=Load()))])"
msgstr ""

#: ../Doc/library/ast.rst:998
msgid ""
"Represents a ``del`` statement. ``targets`` is a list of nodes, such as :"
"class:`Name`, :class:`Attribute` or :class:`Subscript` nodes."
msgstr ""
"Contiene una declaración ``del``. ``targets`` es una lista de nodos, como "
"nodos :class:`Name`, :class:`Attribute` o :class:`Subscript`."

#: ../Doc/library/ast.rst:1001
msgid ""
">>> print(ast.dump(ast.parse('del x,y,z'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Delete(\n"
"            targets=[\n"
"                Name(id='x', ctx=Del()),\n"
"                Name(id='y', ctx=Del()),\n"
"                Name(id='z', ctx=Del())])])"
msgstr ""

#: ../Doc/library/ast.rst:1015
msgid "A ``pass`` statement."
msgstr "Una declaración ``pass``."

#: ../Doc/library/ast.rst:1017
msgid ""
">>> print(ast.dump(ast.parse('pass'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Pass()])"
msgstr ""

#: ../Doc/library/ast.rst:1027
msgid ""
"A :ref:`type alias <type-aliases>` created through the :keyword:`type` "
"statement. ``name`` is the name of the alias, ``type_params`` is a list of :"
"ref:`type parameters <ast-type-params>`, and ``value`` is the value of the "
"type alias."
msgstr ""
"Un alias :ref:`type alias <type-aliases>` creado mediante la sentencia :"
"keyword:`type`. ``name`` es el nombre del alias, ``type_params`` es una "
"lista de parámetros :ref:`type <ast-type-params>`, y ``value`` es el valor "
"del alias de tipo."

#: ../Doc/library/ast.rst:1032
msgid ""
">>> print(ast.dump(ast.parse('type Alias = int'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        TypeAlias(\n"
"            name=Name(id='Alias', ctx=Store()),\n"
"            value=Name(id='int', ctx=Load()))])"
msgstr ""

#: ../Doc/library/ast.rst:1043
msgid ""
"Other statements which are only applicable inside functions or loops are "
"described in other sections."
msgstr ""
"Otras declaraciones que solo son aplicables dentro de funciones o bucles "
"descritos en otras secciones."

#: ../Doc/library/ast.rst:1047
msgid "Imports"
msgstr "Importaciones"

#: ../Doc/library/ast.rst:1051
msgid "An import statement. ``names`` is a list of :class:`alias` nodes."
msgstr ""
"Una declaración de importación. ``names`` es una lista de nodos :class:"
"`alias`."

#: ../Doc/library/ast.rst:1053
msgid ""
">>> print(ast.dump(ast.parse('import x,y,z'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Import(\n"
"            names=[\n"
"                alias(name='x'),\n"
"                alias(name='y'),\n"
"                alias(name='z')])])"
msgstr ""

#: ../Doc/library/ast.rst:1067
msgid ""
"Represents ``from x import y``. ``module`` is a raw string of the 'from' "
"name, without any leading dots, or ``None`` for statements such as ``from . "
"import foo``. ``level`` is an integer holding the level of the relative "
"import (0 means absolute import)."
msgstr ""
"Representa ``form x import y``. ``module`` es una cadena de caracteres sin "
"formato del nombre 'from', sin puntos, o ``None`` para declaraciones como "
"``from . import foo``. ``level`` es un entero que contiene el nivel relativo "
"de la importación (0 significa una importación absoluta)."

#: ../Doc/library/ast.rst:1072
msgid ""
">>> print(ast.dump(ast.parse('from y import x,y,z'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        ImportFrom(\n"
"            module='y',\n"
"            names=[\n"
"                alias(name='x'),\n"
"                alias(name='y'),\n"
"                alias(name='z')],\n"
"            level=0)])"
msgstr ""

#: ../Doc/library/ast.rst:1088
msgid ""
"Both parameters are raw strings of the names. ``asname`` can be ``None`` if "
"the regular name is to be used."
msgstr ""
"Ambos parámetros son cadenas de caracteres sin formato para los nombres. "
"``asname`` puede ser ``None`` si se va a usar el nombre regular."

#: ../Doc/library/ast.rst:1091
msgid ""
">>> print(ast.dump(ast.parse('from ..foo.bar import a as b, c'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        ImportFrom(\n"
"            module='foo.bar',\n"
"            names=[\n"
"                alias(name='a', asname='b'),\n"
"                alias(name='c')],\n"
"            level=2)])"
msgstr ""

#: ../Doc/library/ast.rst:1104
msgid "Control flow"
msgstr "Control de flujo"

#: ../Doc/library/ast.rst:1107
msgid ""
"Optional clauses such as ``else`` are stored as an empty list if they're not "
"present."
msgstr ""
"Cláusulas opcionales como ``else`` se guardan como una lista vacía si no "
"están presentes."

#: ../Doc/library/ast.rst:1112
msgid ""
"An ``if`` statement. ``test`` holds a single node, such as a :class:"
"`Compare` node. ``body`` and ``orelse`` each hold a list of nodes."
msgstr ""
"Una declaración ``if``. ``test`` contiene un único nodo, como un nodo :class:"
"`Compare`. ``body`` y ``orelse`` contiene cada uno una lista de nodos."

#: ../Doc/library/ast.rst:1115
msgid ""
"``elif`` clauses don't have a special representation in the AST, but rather "
"appear as extra :class:`If` nodes within the ``orelse`` section of the "
"previous one."
msgstr ""
"Cláusulas ``elif`` no tienen una representación especial en AST, pero pueden "
"aparecer como nodos extra :class:`If` dentro de la sección ``orelse`` del "
"nodo anterior."

#: ../Doc/library/ast.rst:1119
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\n"
"... if x:\n"
"...    ...\n"
"... elif y:\n"
"...    ...\n"
"... else:\n"
"...    ...\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        If(\n"
"            test=Name(id='x', ctx=Load()),\n"
"            body=[\n"
"                Expr(\n"
"                    value=Constant(value=Ellipsis))],\n"
"            orelse=[\n"
"                If(\n"
"                    test=Name(id='y', ctx=Load()),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))],\n"
"                    orelse=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))])])])"
msgstr ""

#: ../Doc/library/ast.rst:1149
msgid ""
"A ``for`` loop. ``target`` holds the variable(s) the loop assigns to, as a "
"single :class:`Name`, :class:`Tuple`, :class:`List`, :class:`Attribute` or :"
"class:`Subscript` node. ``iter`` holds the item to be looped over, again as "
"a single node. ``body`` and ``orelse`` contain lists of nodes to execute. "
"Those in ``orelse`` are executed if the loop finishes normally, rather than "
"via a ``break`` statement."
msgstr ""
"Un bucle ``for``. ``target`` contiene las variables a las que asigna el "
"bucle, como un único nodo :class:`Name`, :class:`Tuple`, :class:`List`, :"
"class:`Attribute` o :class:`Subscript`. ``iter`` contiene el elemento sobre "
"el que se realizará el bucle, nuevamente como un solo nodo. ``body`` y "
"``orelse`` contienen listas de nodos para ejecutar. Los de ``orelse`` se "
"ejecutan si el ciclo finaliza normalmente, en lugar de mediante una "
"instrucción ``break``."

#: ../Doc/library/ast.rst:1160
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\n"
"... for x in y:\n"
"...     ...\n"
"... else:\n"
"...     ...\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        For(\n"
"            target=Name(id='x', ctx=Store()),\n"
"            iter=Name(id='y', ctx=Load()),\n"
"            body=[\n"
"                Expr(\n"
"                    value=Constant(value=Ellipsis))],\n"
"            orelse=[\n"
"                Expr(\n"
"                    value=Constant(value=Ellipsis))])])"
msgstr ""

#: ../Doc/library/ast.rst:1183
msgid ""
"A ``while`` loop. ``test`` holds the condition, such as a :class:`Compare` "
"node."
msgstr ""
"Un bucle ``while``. ``test`` contiene la condición, como un nodo :class:"
"`Compare`."

#: ../Doc/library/ast.rst:1186
msgid ""
">> print(ast.dump(ast.parse(\"\"\"\n"
"... while x:\n"
"...    ...\n"
"... else:\n"
"...    ...\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        While(\n"
"            test=Name(id='x', ctx=Load()),\n"
"            body=[\n"
"                Expr(\n"
"                    value=Constant(value=Ellipsis))],\n"
"            orelse=[\n"
"                Expr(\n"
"                    value=Constant(value=Ellipsis))])])"
msgstr ""

#: ../Doc/library/ast.rst:1209
msgid "The ``break`` and ``continue`` statements."
msgstr "Las declaraciones ``break`` y ``continue``."

#: ../Doc/library/ast.rst:1211
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\\\n"
"... for a in b:\n"
"...     if a > 5:\n"
"...         break\n"
"...     else:\n"
"...         continue\n"
"...\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        For(\n"
"            target=Name(id='a', ctx=Store()),\n"
"            iter=Name(id='b', ctx=Load()),\n"
"            body=[\n"
"                If(\n"
"                    test=Compare(\n"
"                        left=Name(id='a', ctx=Load()),\n"
"                        ops=[\n"
"                            Gt()],\n"
"                        comparators=[\n"
"                            Constant(value=5)]),\n"
"                    body=[\n"
"                        Break()],\n"
"                    orelse=[\n"
"                        Continue()])])])"
msgstr ""

#: ../Doc/library/ast.rst:1242
msgid ""
"``try`` blocks. All attributes are list of nodes to execute, except for "
"``handlers``, which is a list of :class:`ExceptHandler` nodes."
msgstr ""
"Bloques ``try``. Todos los atributos son listas de nodos a ejecutar, excepto "
"para ``handlers``, el cual es una lista de nodos :class:`ExceptHandler`."

#: ../Doc/library/ast.rst:1245
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\n"
"... try:\n"
"...    ...\n"
"... except Exception:\n"
"...    ...\n"
"... except OtherException as e:\n"
"...    ...\n"
"... else:\n"
"...    ...\n"
"... finally:\n"
"...    ...\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Try(\n"
"            body=[\n"
"                Expr(\n"
"                    value=Constant(value=Ellipsis))],\n"
"            handlers=[\n"
"                ExceptHandler(\n"
"                    type=Name(id='Exception', ctx=Load()),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))]),\n"
"                ExceptHandler(\n"
"                    type=Name(id='OtherException', ctx=Load()),\n"
"                    name='e',\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))])],\n"
"            orelse=[\n"
"                Expr(\n"
"                    value=Constant(value=Ellipsis))],\n"
"            finalbody=[\n"
"                Expr(\n"
"                    value=Constant(value=Ellipsis))])])"
msgstr ""

#: ../Doc/library/ast.rst:1287
msgid ""
"``try`` blocks which are followed by ``except*`` clauses. The attributes are "
"the same as for :class:`Try` but the :class:`ExceptHandler` nodes in "
"``handlers`` are interpreted as ``except*`` blocks rather then ``except``."
msgstr ""
"Bloques ``try`` que van seguidos de cláusulas ``except*``. Los atributos son "
"los mismos que para :class:`Try` pero los nodos :class:`ExceptHandler` en "
"``handlers`` se interpretan como bloques ``except*`` en lugar de ``except``."

#: ../Doc/library/ast.rst:1291
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\n"
"... try:\n"
"...    ...\n"
"... except* Exception:\n"
"...    ...\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        TryStar(\n"
"            body=[\n"
"                Expr(\n"
"                    value=Constant(value=Ellipsis))],\n"
"            handlers=[\n"
"                ExceptHandler(\n"
"                    type=Name(id='Exception', ctx=Load()),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))])])])"
msgstr ""

#: ../Doc/library/ast.rst:1316
msgid ""
"A single ``except`` clause. ``type`` is the exception type it will match, "
"typically a :class:`Name` node (or ``None`` for a catch-all ``except:`` "
"clause). ``name`` is a raw string for the name to hold the exception, or "
"``None`` if the clause doesn't have ``as foo``. ``body`` is a list of nodes."
msgstr ""
"Una sola cláusula ``except``. ``type`` es el tipo de excepción con el que "
"coincidirá, normalmente un nodo :class:`Name` (o ``None`` para una cláusula "
"``except:`` generalizada). ``name`` es una cadena sin formato para que el "
"nombre contenga la excepción, o ``None`` si la cláusula no tiene ``as foo``. "
"``body`` es una lista de nodos."

#: ../Doc/library/ast.rst:1321
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\\\n"
"... try:\n"
"...     a + 1\n"
"... except TypeError:\n"
"...     pass\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Try(\n"
"            body=[\n"
"                Expr(\n"
"                    value=BinOp(\n"
"                        left=Name(id='a', ctx=Load()),\n"
"                        op=Add(),\n"
"                        right=Constant(value=1)))],\n"
"            handlers=[\n"
"                ExceptHandler(\n"
"                    type=Name(id='TypeError', ctx=Load()),\n"
"                    body=[\n"
"                        Pass()])])])"
msgstr ""

#: ../Doc/library/ast.rst:1347
msgid ""
"A ``with`` block. ``items`` is a list of :class:`withitem` nodes "
"representing the context managers, and ``body`` is the indented block inside "
"the context."
msgstr ""
"Un bloque ``with``. ``items`` es una lista de nodos :class:`withitem` que "
"representan los administradores de contexto, y ``body`` es el bloque con "
"sangría dentro del contexto."

#: ../Doc/library/ast.rst:1357
msgid ""
"A single context manager in a ``with`` block. ``context_expr`` is the "
"context manager, often a :class:`Call` node. ``optional_vars`` is a :class:"
"`Name`, :class:`Tuple` or :class:`List` for the ``as foo`` part, or ``None`` "
"if that isn't used."
msgstr ""
"Un administrador de contexto único en un bloque ``with``. ``context_expr`` "
"es el administrador de contexto, a menudo un nodo :class:`Call`. "
"``optional_vars`` es un :class:`Name`, :class:`Tuple` o :class:`List` para "
"la parte ``as foo``, o ``None`` si no se usa."

#: ../Doc/library/ast.rst:1362
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\\\n"
"... with a as b, c as d:\n"
"...    something(b, d)\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        With(\n"
"            items=[\n"
"                withitem(\n"
"                    context_expr=Name(id='a', ctx=Load()),\n"
"                    optional_vars=Name(id='b', ctx=Store())),\n"
"                withitem(\n"
"                    context_expr=Name(id='c', ctx=Load()),\n"
"                    optional_vars=Name(id='d', ctx=Store()))],\n"
"            body=[\n"
"                Expr(\n"
"                    value=Call(\n"
"                        func=Name(id='something', ctx=Load()),\n"
"                        args=[\n"
"                            Name(id='b', ctx=Load()),\n"
"                            Name(id='d', ctx=Load())]))])])"
msgstr ""

#: ../Doc/library/ast.rst:1388
msgid "Pattern matching"
msgstr "La coincidencia de patrones"

#: ../Doc/library/ast.rst:1393
msgid ""
"A ``match`` statement. ``subject`` holds the subject of the match (the "
"object that is being matched against the cases) and ``cases`` contains an "
"iterable of :class:`match_case` nodes with the different cases."
msgstr ""
"Una declaración ``match``. ``subject`` contiene el sujeto de la coincidencia "
"(el objeto que se compara con los casos) y ``cases`` contiene un iterable de "
"nodos :class:`match_case` con los diferentes casos."

#: ../Doc/library/ast.rst:1401
msgid ""
"A single case pattern in a ``match`` statement. ``pattern`` contains the "
"match pattern that the subject will be matched against. Note that the :class:"
"`AST` nodes produced for patterns differ from those produced for "
"expressions, even when they share the same syntax."
msgstr ""
"Un patrón de caso único en una declaración ``match``. ``pattern`` contiene "
"el patrón de coincidencia con el que se comparará el sujeto. Tenga en cuenta "
"que los nodos :class:`AST` producidos para patrones difieren de los "
"producidos para expresiones, incluso cuando comparten la misma sintaxis."

#: ../Doc/library/ast.rst:1406
msgid ""
"The ``guard`` attribute contains an expression that will be evaluated if the "
"pattern matches the subject."
msgstr ""
"El atributo ``guard`` contiene una expresión que se evaluará si el patrón "
"coincide con el sujeto."

#: ../Doc/library/ast.rst:1409
msgid ""
"``body`` contains a list of nodes to execute if the pattern matches and the "
"result of evaluating the guard expression is true."
msgstr ""
"``body`` contiene una lista de nodos para ejecutar si el patrón coincide y "
"el resultado de evaluar la expresión de protección es verdadero."

#: ../Doc/library/ast.rst:1412
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\n"
"... match x:\n"
"...     case [x] if x>0:\n"
"...         ...\n"
"...     case tuple():\n"
"...         ...\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Match(\n"
"            subject=Name(id='x', ctx=Load()),\n"
"            cases=[\n"
"                match_case(\n"
"                    pattern=MatchSequence(\n"
"                        patterns=[\n"
"                            MatchAs(name='x')]),\n"
"                    guard=Compare(\n"
"                        left=Name(id='x', ctx=Load()),\n"
"                        ops=[\n"
"                            Gt()],\n"
"                        comparators=[\n"
"                            Constant(value=0)]),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))]),\n"
"                match_case(\n"
"                    pattern=MatchClass(\n"
"                        cls=Name(id='tuple', ctx=Load())),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))])])])"
msgstr ""

#: ../Doc/library/ast.rst:1450
msgid ""
"A match literal or value pattern that compares by equality. ``value`` is an "
"expression node. Permitted value nodes are restricted as described in the "
"match statement documentation. This pattern succeeds if the match subject is "
"equal to the evaluated value."
msgstr ""
"Un patrón de valor o literal de coincidencia que se compara por igualdad. "
"``value`` es un nodo de expresión. Los nodos de valores permitidos están "
"restringidos como se describe en la documentación de la declaración de "
"coincidencia. Este patrón tiene éxito si el sujeto de la coincidencia es "
"igual al valor evaluado."

#: ../Doc/library/ast.rst:1455
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\n"
"... match x:\n"
"...     case \"Relevant\":\n"
"...         ...\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Match(\n"
"            subject=Name(id='x', ctx=Load()),\n"
"            cases=[\n"
"                match_case(\n"
"                    pattern=MatchValue(\n"
"                        value=Constant(value='Relevant')),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))])])])"
msgstr ""

#: ../Doc/library/ast.rst:1478
msgid ""
"A match literal pattern that compares by identity. ``value`` is the "
"singleton to be compared against: ``None``, ``True``, or ``False``. This "
"pattern succeeds if the match subject is the given constant."
msgstr ""
"Un patrón literal de coincidencia que se compara por identidad. ``value`` es "
"el singleton que se va a comparar con: ``None``, ``True`` o ``False``. Este "
"patrón tiene éxito si el sujeto de la coincidencia es la constante dada."

#: ../Doc/library/ast.rst:1482
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\n"
"... match x:\n"
"...     case None:\n"
"...         ...\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Match(\n"
"            subject=Name(id='x', ctx=Load()),\n"
"            cases=[\n"
"                match_case(\n"
"                    pattern=MatchSingleton(value=None),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))])])])"
msgstr ""

#: ../Doc/library/ast.rst:1504
msgid ""
"A match sequence pattern. ``patterns`` contains the patterns to be matched "
"against the subject elements if the subject is a sequence. Matches a "
"variable length sequence if one of the subpatterns is a ``MatchStar`` node, "
"otherwise matches a fixed length sequence."
msgstr ""
"Un patrón de secuencia de coincidencia. ``patterns`` contiene los patrones "
"que se compararán con los elementos del sujeto si el sujeto es una "
"secuencia. Coincide con una secuencia de longitud variable si uno de los "
"subpatrones es un nodo ``MatchStar``; de lo contrario, coincide con una "
"secuencia de longitud fija."

#: ../Doc/library/ast.rst:1509
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\n"
"... match x:\n"
"...     case [1, 2]:\n"
"...         ...\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Match(\n"
"            subject=Name(id='x', ctx=Load()),\n"
"            cases=[\n"
"                match_case(\n"
"                    pattern=MatchSequence(\n"
"                        patterns=[\n"
"                            MatchValue(\n"
"                                value=Constant(value=1)),\n"
"                            MatchValue(\n"
"                                value=Constant(value=2))]),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))])])])"
msgstr ""

#: ../Doc/library/ast.rst:1536
msgid ""
"Matches the rest of the sequence in a variable length match sequence "
"pattern. If ``name`` is not ``None``, a list containing the remaining "
"sequence elements is bound to that name if the overall sequence pattern is "
"successful."
msgstr ""
"Coincide con el resto de la secuencia en un patrón de secuencia de "
"coincidencia de longitud variable. Si ``name`` no es ``None``, una lista que "
"contiene los elementos de secuencia restantes está vinculada a ese nombre si "
"el patrón de secuencia general es exitoso."

#: ../Doc/library/ast.rst:1540
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\n"
"... match x:\n"
"...     case [1, 2, *rest]:\n"
"...         ...\n"
"...     case [*_]:\n"
"...         ...\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Match(\n"
"            subject=Name(id='x', ctx=Load()),\n"
"            cases=[\n"
"                match_case(\n"
"                    pattern=MatchSequence(\n"
"                        patterns=[\n"
"                            MatchValue(\n"
"                                value=Constant(value=1)),\n"
"                            MatchValue(\n"
"                                value=Constant(value=2)),\n"
"                            MatchStar(name='rest')]),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))]),\n"
"                match_case(\n"
"                    pattern=MatchSequence(\n"
"                        patterns=[\n"
"                            MatchStar()]),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))])])])"
msgstr ""

#: ../Doc/library/ast.rst:1577
msgid ""
"A match mapping pattern. ``keys`` is a sequence of expression nodes. "
"``patterns`` is a corresponding sequence of pattern nodes. ``rest`` is an "
"optional name that can be specified to capture the remaining mapping "
"elements. Permitted key expressions are restricted as described in the match "
"statement documentation."
msgstr ""
"Un patrón de mapeo de coincidencias. ``keys`` es una secuencia de nodos de "
"expresión. ``patterns`` es una secuencia correspondiente de nodos de patrón. "
"``rest`` es un nombre opcional que se puede especificar para capturar los "
"elementos de mapeo restantes. Las expresiones clave permitidas están "
"restringidas como se describe en la documentación de la declaración de "
"coincidencia."

#: ../Doc/library/ast.rst:1583
msgid ""
"This pattern succeeds if the subject is a mapping, all evaluated key "
"expressions are present in the mapping, and the value corresponding to each "
"key matches the corresponding subpattern. If ``rest`` is not ``None``, a "
"dict containing the remaining mapping elements is bound to that name if the "
"overall mapping pattern is successful."
msgstr ""
"Este patrón tiene éxito si el sujeto es un mapeo, todas las expresiones "
"clave evaluadas están presentes en el mapeo y el valor correspondiente a "
"cada clave coincide con el subpatrón correspondiente. Si ``rest`` no es "
"``None``, un dict que contiene los elementos de mapeo restantes se vincula a "
"ese nombre si el patrón de mapeo general es exitoso."

#: ../Doc/library/ast.rst:1589
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\n"
"... match x:\n"
"...     case {1: _, 2: _}:\n"
"...         ...\n"
"...     case {**rest}:\n"
"...         ...\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Match(\n"
"            subject=Name(id='x', ctx=Load()),\n"
"            cases=[\n"
"                match_case(\n"
"                    pattern=MatchMapping(\n"
"                        keys=[\n"
"                            Constant(value=1),\n"
"                            Constant(value=2)],\n"
"                        patterns=[\n"
"                            MatchAs(),\n"
"                            MatchAs()]),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))]),\n"
"                match_case(\n"
"                    pattern=MatchMapping(rest='rest'),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))])])])"
msgstr ""

#: ../Doc/library/ast.rst:1624
msgid ""
"A match class pattern. ``cls`` is an expression giving the nominal class to "
"be matched. ``patterns`` is a sequence of pattern nodes to be matched "
"against the class defined sequence of pattern matching attributes. "
"``kwd_attrs`` is a sequence of additional attributes to be matched "
"(specified as keyword arguments in the class pattern), ``kwd_patterns`` are "
"the corresponding patterns (specified as keyword values in the class "
"pattern)."
msgstr ""
"Un patrón de clase coincidente. ``cls`` es una expresión que da la clase "
"nominal que se va a emparejar. ``patterns`` es una secuencia de nodos de "
"patrón que se compararán con la secuencia definida por la clase de atributos "
"de coincidencia de patrones. ``kwd_attrs`` es una secuencia de atributos "
"adicionales que deben coincidir (especificados como argumentos de palabra "
"clave en el patrón de clase), ``kwd_patterns`` son los patrones "
"correspondientes (especificados como valores de palabras clave en el patrón "
"de clase)."

#: ../Doc/library/ast.rst:1631
msgid ""
"This pattern succeeds if the subject is an instance of the nominated class, "
"all positional patterns match the corresponding class-defined attributes, "
"and any specified keyword attributes match their corresponding pattern."
msgstr ""
"Este patrón tiene éxito si el sujeto es una instancia de la clase nominada, "
"todos los patrones posicionales coinciden con los atributos definidos por la "
"clase correspondientes y cualquier atributo de palabra clave especificado "
"coincide con su patrón correspondiente."

#: ../Doc/library/ast.rst:1635
msgid ""
"Note: classes may define a property that returns self in order to match a "
"pattern node against the instance being matched. Several builtin types are "
"also matched that way, as described in the match statement documentation."
msgstr ""
"Nota: las clases pueden definir una propiedad que retorna self para hacer "
"coincidir un nodo de patrón con la instancia que se está comparando. Varios "
"tipos incorporados también se combinan de esa manera, como se describe en la "
"documentación de la declaración de coincidencia."

#: ../Doc/library/ast.rst:1639
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\n"
"... match x:\n"
"...     case Point2D(0, 0):\n"
"...         ...\n"
"...     case Point3D(x=0, y=0, z=0):\n"
"...         ...\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Match(\n"
"            subject=Name(id='x', ctx=Load()),\n"
"            cases=[\n"
"                match_case(\n"
"                    pattern=MatchClass(\n"
"                        cls=Name(id='Point2D', ctx=Load()),\n"
"                        patterns=[\n"
"                            MatchValue(\n"
"                                value=Constant(value=0)),\n"
"                            MatchValue(\n"
"                                value=Constant(value=0))]),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))]),\n"
"                match_case(\n"
"                    pattern=MatchClass(\n"
"                        cls=Name(id='Point3D', ctx=Load()),\n"
"                        kwd_attrs=[\n"
"                            'x',\n"
"                            'y',\n"
"                            'z'],\n"
"                        kwd_patterns=[\n"
"                            MatchValue(\n"
"                                value=Constant(value=0)),\n"
"                            MatchValue(\n"
"                                value=Constant(value=0)),\n"
"                            MatchValue(\n"
"                                value=Constant(value=0))]),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))])])])"
msgstr ""

#: ../Doc/library/ast.rst:1686
msgid ""
"A match \"as-pattern\", capture pattern or wildcard pattern. ``pattern`` "
"contains the match pattern that the subject will be matched against. If the "
"pattern is ``None``, the node represents a capture pattern (i.e a bare name) "
"and will always succeed."
msgstr ""
"Una coincidencia \"como patrón\", patrón de captura o patrón comodín. "
"``pattern`` contiene el patrón de coincidencia con el que se comparará el "
"sujeto. Si el patrón es ``None``, el nodo representa un patrón de captura "
"(es decir, un nombre simple) y siempre tendrá éxito."

#: ../Doc/library/ast.rst:1691
msgid ""
"The ``name`` attribute contains the name that will be bound if the pattern "
"is successful. If ``name`` is ``None``, ``pattern`` must also be ``None`` "
"and the node represents the wildcard pattern."
msgstr ""
"El atributo ``name`` contiene el nombre que se vinculará si el patrón tiene "
"éxito. Si ``name`` es ``None``, ``pattern`` también debe ser ``None`` y el "
"nodo representa el patrón comodín."

#: ../Doc/library/ast.rst:1695
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\n"
"... match x:\n"
"...     case [x] as y:\n"
"...         ...\n"
"...     case _:\n"
"...         ...\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Match(\n"
"            subject=Name(id='x', ctx=Load()),\n"
"            cases=[\n"
"                match_case(\n"
"                    pattern=MatchAs(\n"
"                        pattern=MatchSequence(\n"
"                            patterns=[\n"
"                                MatchAs(name='x')]),\n"
"                        name='y'),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))]),\n"
"                match_case(\n"
"                    pattern=MatchAs(),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))])])])"
msgstr ""

#: ../Doc/library/ast.rst:1728
msgid ""
"A match \"or-pattern\". An or-pattern matches each of its subpatterns in "
"turn to the subject, until one succeeds. The or-pattern is then deemed to "
"succeed. If none of the subpatterns succeed the or-pattern fails. The "
"``patterns`` attribute contains a list of match pattern nodes that will be "
"matched against the subject."
msgstr ""
"Una coincidencia \"o patrón\". Un patrón-o hace coincidir cada uno de sus "
"subpatrones con el sujeto, hasta que uno tiene éxito. Entonces se considera "
"que el patrón-o tiene éxito. Si ninguno de los subpatrones tiene éxito, el "
"patrón o falla. El atributo ``patterns`` contiene una lista de nodos de "
"patrones de coincidencia que se compararán con el sujeto."

#: ../Doc/library/ast.rst:1734
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\n"
"... match x:\n"
"...     case [x] | (y):\n"
"...         ...\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Match(\n"
"            subject=Name(id='x', ctx=Load()),\n"
"            cases=[\n"
"                match_case(\n"
"                    pattern=MatchOr(\n"
"                        patterns=[\n"
"                            MatchSequence(\n"
"                                patterns=[\n"
"                                    MatchAs(name='x')]),\n"
"                            MatchAs(name='y')]),\n"
"                    body=[\n"
"                        Expr(\n"
"                            value=Constant(value=Ellipsis))])])])"
msgstr ""

#: ../Doc/library/ast.rst:1762
msgid "Type parameters"
msgstr "Tipos de parámetro"

#: ../Doc/library/ast.rst:1764
msgid ""
":ref:`Type parameters <type-params>` can exist on classes, functions, and "
"type aliases."
msgstr ""
"\":ref:`Parámetros de tipo <type-params>` pueden existir en clases, "
"funciones y tipos de alias\""

#: ../Doc/library/ast.rst:1769
#, fuzzy
msgid ""
"A :class:`typing.TypeVar`. ``name`` is the name of the type variable. "
"``bound`` is the bound or constraints, if any. If ``bound`` is a :class:"
"`Tuple`, it represents constraints; otherwise it represents the bound. "
"``default_value`` is the default value; if the :class:`!TypeVar` has no "
"default, this attribute will be set to ``None``."
msgstr ""
"Una :class:`typing.TypeVar`. ``name`` es el nombre de la variable de tipo. "
"``bound`` es el límite o las restricciones, si las hay. Si ``bound`` es una :"
"class:`Tuple`, representa las restricciones; en caso contrario, representa "
"el límite."

#: ../Doc/library/ast.rst:1775
msgid ""
">>> print(ast.dump(ast.parse(\"type Alias[T: int = bool] = list[T]\"), "
"indent=4))\n"
"Module(\n"
"    body=[\n"
"        TypeAlias(\n"
"            name=Name(id='Alias', ctx=Store()),\n"
"            type_params=[\n"
"                TypeVar(\n"
"                    name='T',\n"
"                    bound=Name(id='int', ctx=Load()),\n"
"                    default_value=Name(id='bool', ctx=Load()))],\n"
"            value=Subscript(\n"
"                value=Name(id='list', ctx=Load()),\n"
"                slice=Name(id='T', ctx=Load()),\n"
"                ctx=Load()))])"
msgstr ""

#: ../Doc/library/ast.rst:1794 ../Doc/library/ast.rst:1829
#: ../Doc/library/ast.rst:1861
#, fuzzy
msgid "Added the *default_value* parameter."
msgstr "Añadida la opción *indent*."

#: ../Doc/library/ast.rst:1799
msgid ""
"A :class:`typing.ParamSpec`. ``name`` is the name of the parameter "
"specification. ``default_value`` is the default value; if the :class:`!"
"ParamSpec` has no default, this attribute will be set to ``None``."
msgstr ""

#: ../Doc/library/ast.rst:1803
msgid ""
">>> print(ast.dump(ast.parse(\"type Alias[**P = (int, str)] = Callable[P, "
"int]\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        TypeAlias(\n"
"            name=Name(id='Alias', ctx=Store()),\n"
"            type_params=[\n"
"                ParamSpec(\n"
"                    name='P',\n"
"                    default_value=Tuple(\n"
"                        elts=[\n"
"                            Name(id='int', ctx=Load()),\n"
"                            Name(id='str', ctx=Load())],\n"
"                        ctx=Load()))],\n"
"            value=Subscript(\n"
"                value=Name(id='Callable', ctx=Load()),\n"
"                slice=Tuple(\n"
"                    elts=[\n"
"                        Name(id='P', ctx=Load()),\n"
"                        Name(id='int', ctx=Load())],\n"
"                    ctx=Load()),\n"
"                ctx=Load()))])"
msgstr ""

#: ../Doc/library/ast.rst:1834
msgid ""
"A :class:`typing.TypeVarTuple`. ``name`` is the name of the type variable "
"tuple. ``default_value`` is the default value; if the :class:`!TypeVarTuple` "
"has no default, this attribute will be set to ``None``."
msgstr ""

#: ../Doc/library/ast.rst:1838
msgid ""
">>> print(ast.dump(ast.parse(\"type Alias[*Ts = ()] = tuple[*Ts]\"), "
"indent=4))\n"
"Module(\n"
"    body=[\n"
"        TypeAlias(\n"
"            name=Name(id='Alias', ctx=Store()),\n"
"            type_params=[\n"
"                TypeVarTuple(\n"
"                    name='Ts',\n"
"                    default_value=Tuple(ctx=Load()))],\n"
"            value=Subscript(\n"
"                value=Name(id='tuple', ctx=Load()),\n"
"                slice=Tuple(\n"
"                    elts=[\n"
"                        Starred(\n"
"                            value=Name(id='Ts', ctx=Load()),\n"
"                            ctx=Load())],\n"
"                    ctx=Load()),\n"
"                ctx=Load()))])"
msgstr ""

#: ../Doc/library/ast.rst:1865
msgid "Function and class definitions"
msgstr "Definiciones de función y clase"

#: ../Doc/library/ast.rst:1869
msgid "A function definition."
msgstr "Una definición de función."

#: ../Doc/library/ast.rst:1871
msgid "``name`` is a raw string of the function name."
msgstr ""
"``name`` es una cadena de caracteres sin formato del nombre de la función."

#: ../Doc/library/ast.rst:1872
msgid "``args`` is an :class:`arguments` node."
msgstr "``args`` es un nodo :class:`arguments`."

#: ../Doc/library/ast.rst:1873
msgid "``body`` is the list of nodes inside the function."
msgstr "``body`` es la lista de nodos dentro de la función."

#: ../Doc/library/ast.rst:1874
msgid ""
"``decorator_list`` is the list of decorators to be applied, stored outermost "
"first (i.e. the first in the list will be applied last)."
msgstr ""
"``decorator_list`` es la lista de decoradores que se aplicarán, almacenados "
"en el exterior primero (es decir, el primero de la lista se aplicará al "
"final)."

#: ../Doc/library/ast.rst:1876
msgid "``returns`` is the return annotation."
msgstr "``returns`` es la anotación de retorno."

#: ../Doc/library/ast.rst:1877 ../Doc/library/ast.rst:2040
msgid "``type_params`` is a list of :ref:`type parameters <ast-type-params>`."
msgstr ""
"``type_params`` es una lista de  :ref:`parametros de tipo <ast-type-params>`."

#: ../Doc/library/ast.rst:1883 ../Doc/library/ast.rst:2067
#: ../Doc/library/ast.rst:2078
msgid "Added ``type_params``."
msgstr "Se ha añadido ``type_params``."

#: ../Doc/library/ast.rst:1889
msgid ""
"``lambda`` is a minimal function definition that can be used inside an "
"expression. Unlike :class:`FunctionDef`, ``body`` holds a single node."
msgstr ""
"``lambda`` es una definición de función mínima que se puede utilizar dentro "
"de una expresión. A diferencia de :class:`FunctionDef`, ``body`` tiene un "
"solo nodo."

#: ../Doc/library/ast.rst:1892
msgid ""
">>> print(ast.dump(ast.parse('lambda x,y: ...'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Expr(\n"
"            value=Lambda(\n"
"                args=arguments(\n"
"                    args=[\n"
"                        arg(arg='x'),\n"
"                        arg(arg='y')]),\n"
"                body=Constant(value=Ellipsis)))])"
msgstr ""

#: ../Doc/library/ast.rst:1908
msgid "The arguments for a function."
msgstr "Los argumentos para una función."

#: ../Doc/library/ast.rst:1910
msgid ""
"``posonlyargs``, ``args`` and ``kwonlyargs`` are lists of :class:`arg` nodes."
msgstr ""
"``posonlyargs``, ``args`` y ``kwonlyargs`` son listas de nodos :class:`arg`."

#: ../Doc/library/ast.rst:1911
msgid ""
"``vararg`` and ``kwarg`` are single :class:`arg` nodes, referring to the "
"``*args, **kwargs`` parameters."
msgstr ""
"``vararg`` y ``kwarg`` son nodos :class:`arg` únicos, en referencia a los "
"parámetros ``*args, **kwargs``."

#: ../Doc/library/ast.rst:1913
msgid ""
"``kw_defaults`` is a list of default values for keyword-only arguments. If "
"one is ``None``, the corresponding argument is required."
msgstr ""
"``kw_defaults`` es una lista de valores predeterminados para argumentos de "
"solo palabras clave. Si uno es ``None``, se requiere el argumento "
"correspondiente."

#: ../Doc/library/ast.rst:1915
msgid ""
"``defaults`` is a list of default values for arguments that can be passed "
"positionally. If there are fewer defaults, they correspond to the last n "
"arguments."
msgstr ""
"``defaults`` es una lista de valores predeterminados para argumentos que se "
"pueden pasar posicionalmente. Si hay menos valores predeterminados, "
"corresponden a los últimos n argumentos."

#: ../Doc/library/ast.rst:1922
#, fuzzy
msgid ""
"A single argument in a list. ``arg`` is a raw string of the argument name; "
"``annotation`` is its annotation, such as a :class:`Name` node."
msgstr ""
"Un solo argumento en una lista. ``arg`` es una cadena sin formato del nombre "
"del argumento, ``annotation`` es su anotación, como un nodo :class:`Str` o :"
"class:`Name`."

#: ../Doc/library/ast.rst:1927
msgid ""
"``type_comment`` is an optional string with the type annotation as a comment"
msgstr ""
"``type_comment`` es una cadena opcional con la anotación de tipo como "
"comentario"

#: ../Doc/library/ast.rst:1929
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\\\n"
"... @decorator1\n"
"... @decorator2\n"
"... def f(a: 'annotation', b=1, c=2, *d, e, f=3, **g) -> 'return "
"annotation':\n"
"...     pass\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        FunctionDef(\n"
"            name='f',\n"
"            args=arguments(\n"
"                args=[\n"
"                    arg(\n"
"                        arg='a',\n"
"                        annotation=Constant(value='annotation')),\n"
"                    arg(arg='b'),\n"
"                    arg(arg='c')],\n"
"                vararg=arg(arg='d'),\n"
"                kwonlyargs=[\n"
"                    arg(arg='e'),\n"
"                    arg(arg='f')],\n"
"                kw_defaults=[\n"
"                    None,\n"
"                    Constant(value=3)],\n"
"                kwarg=arg(arg='g'),\n"
"                defaults=[\n"
"                    Constant(value=1),\n"
"                    Constant(value=2)]),\n"
"            body=[\n"
"                Pass()],\n"
"            decorator_list=[\n"
"                Name(id='decorator1', ctx=Load()),\n"
"                Name(id='decorator2', ctx=Load())],\n"
"            returns=Constant(value='return annotation'))])"
msgstr ""

#: ../Doc/library/ast.rst:1969
msgid "A ``return`` statement."
msgstr "Una declaración ``return``."

#: ../Doc/library/ast.rst:1971
msgid ""
">>> print(ast.dump(ast.parse('return 4'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Return(\n"
"            value=Constant(value=4))])"
msgstr ""

#: ../Doc/library/ast.rst:1983
#, fuzzy
msgid ""
"A ``yield`` or ``yield from`` expression. Because these are expressions, "
"they must be wrapped in an :class:`Expr` node if the value sent back is not "
"used."
msgstr ""
"Una expresión ``yield`` o ``yield from``. Debido a que se trata de "
"expresiones, deben incluirse en un nodo :class:`Expr` si no se utiliza el "
"valor retornado."

#: ../Doc/library/ast.rst:1986
msgid ""
">>> print(ast.dump(ast.parse('yield x'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Expr(\n"
"            value=Yield(\n"
"                value=Name(id='x', ctx=Load())))])\n"
"\n"
">>> print(ast.dump(ast.parse('yield from x'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Expr(\n"
"            value=YieldFrom(\n"
"                value=Name(id='x', ctx=Load())))])"
msgstr ""

#: ../Doc/library/ast.rst:2006
msgid ""
"``global`` and ``nonlocal`` statements. ``names`` is a list of raw strings."
msgstr ""
"Declaraciones ``global`` y ``nonlocal``. ``names`` es una lista de cadenas "
"sin formato."

#: ../Doc/library/ast.rst:2008
msgid ""
">>> print(ast.dump(ast.parse('global x,y,z'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Global(\n"
"            names=[\n"
"                'x',\n"
"                'y',\n"
"                'z'])])\n"
"\n"
">>> print(ast.dump(ast.parse('nonlocal x,y,z'), indent=4))\n"
"Module(\n"
"    body=[\n"
"        Nonlocal(\n"
"            names=[\n"
"                'x',\n"
"                'y',\n"
"                'z'])])"
msgstr ""

#: ../Doc/library/ast.rst:2031
msgid "A class definition."
msgstr "Una definición de clase."

#: ../Doc/library/ast.rst:2033
msgid "``name`` is a raw string for the class name"
msgstr "``name`` es una cadena sin formato para el nombre de la clase"

#: ../Doc/library/ast.rst:2034
msgid "``bases`` is a list of nodes for explicitly specified base classes."
msgstr ""
"``bases`` es una lista de nodos para clases base especificadas "
"explícitamente."

#: ../Doc/library/ast.rst:2035
#, fuzzy
msgid ""
"``keywords`` is a list of :class:`.keyword` nodes, principally for "
"'metaclass'. Other keywords will be passed to the metaclass, as per :pep:"
"`3115`."
msgstr ""
"``keywords`` es una lista de nodos :class:`.keyword`, principalmente para "
"'metaclase'. Otras palabras clave se pasarán a la metaclase, según `PEP-3115 "
"<https://peps.python.org/pep-3115/>`_."

#: ../Doc/library/ast.rst:2037
msgid ""
"``body`` is a list of nodes representing the code within the class "
"definition."
msgstr ""
"``body`` es una lista de nodos que representan el código dentro de la "
"definición de clase."

#: ../Doc/library/ast.rst:2039
msgid "``decorator_list`` is a list of nodes, as in :class:`FunctionDef`."
msgstr ""
"``decorator_list`` es una lista de nodos, como en :class:`FunctionDef`."

#: ../Doc/library/ast.rst:2042
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\\\n"
"... @decorator1\n"
"... @decorator2\n"
"... class Foo(base1, base2, metaclass=meta):\n"
"...     pass\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        ClassDef(\n"
"            name='Foo',\n"
"            bases=[\n"
"                Name(id='base1', ctx=Load()),\n"
"                Name(id='base2', ctx=Load())],\n"
"            keywords=[\n"
"                keyword(\n"
"                    arg='metaclass',\n"
"                    value=Name(id='meta', ctx=Load()))],\n"
"            body=[\n"
"                Pass()],\n"
"            decorator_list=[\n"
"                Name(id='decorator1', ctx=Load()),\n"
"                Name(id='decorator2', ctx=Load())])])"
msgstr ""

#: ../Doc/library/ast.rst:2071
msgid "Async and await"
msgstr "Async y await"

#: ../Doc/library/ast.rst:2075
msgid ""
"An ``async def`` function definition. Has the same fields as :class:"
"`FunctionDef`."
msgstr ""
"Una definición de función ``async def``. Tiene los mismos campos que :class:"
"`FunctionDef`."

#: ../Doc/library/ast.rst:2084
msgid ""
"An ``await`` expression. ``value`` is what it waits for. Only valid in the "
"body of an :class:`AsyncFunctionDef`."
msgstr ""
"Una expresión ``await``. ``value`` es lo que espera. Solo válido en el "
"cuerpo de un :class:`AsyncFunctionDef`."

#: ../Doc/library/ast.rst:2087
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\\\n"
"... async def f():\n"
"...     await other_func()\n"
"... \"\"\"), indent=4))\n"
"Module(\n"
"    body=[\n"
"        AsyncFunctionDef(\n"
"            name='f',\n"
"            args=arguments(),\n"
"            body=[\n"
"                Expr(\n"
"                    value=Await(\n"
"                        value=Call(\n"
"                            func=Name(id='other_func', ctx=Load()))))])])"
msgstr ""

#: ../Doc/library/ast.rst:2108
msgid ""
"``async for`` loops and ``async with`` context managers. They have the same "
"fields as :class:`For` and :class:`With`, respectively. Only valid in the "
"body of an :class:`AsyncFunctionDef`."
msgstr ""
"Bucles ``async for`` y administradores de contexto ``async with``. Tienen "
"los mismos campos que :class:`For` y :class:`With`, respectivamente. Solo "
"válido en el cuerpo de un :class:`AsyncFunctionDef`."

#: ../Doc/library/ast.rst:2113
msgid ""
"When a string is parsed by :func:`ast.parse`, operator nodes (subclasses of :"
"class:`ast.operator`, :class:`ast.unaryop`, :class:`ast.cmpop`, :class:`ast."
"boolop` and :class:`ast.expr_context`) on the returned tree will be "
"singletons. Changes to one will be reflected in all other occurrences of the "
"same value (e.g. :class:`ast.Add`)."
msgstr ""
"Cuando :func:`ast.parse` analiza una cadena, los nodos de operador "
"(subclases de :class:`ast.operator`, :class:`ast.unaryop`, :class:`ast."
"cmpop`, :class:`ast.boolop` y :class:`ast.expr_context`) en el árbol "
"retornado serán singletons. Los cambios en uno se reflejarán en todas las "
"demás ocurrencias del mismo valor (por ejemplo, :class:`ast.Add`)."

#: ../Doc/library/ast.rst:2121
msgid ":mod:`ast` Helpers"
msgstr "Ayudantes de :mod:`ast`"

#: ../Doc/library/ast.rst:2123
msgid ""
"Apart from the node classes, the :mod:`ast` module defines these utility "
"functions and classes for traversing abstract syntax trees:"
msgstr ""
"Además de las clases de nodo, el módulo :mod:`ast` define estas funciones y "
"clases de utilidad para atravesar árboles de sintaxis abstracta:"

#: ../Doc/library/ast.rst:2128
#, fuzzy
msgid ""
"Parse the source into an AST node.  Equivalent to ``compile(source, "
"filename, mode, flags=FLAGS_VALUE, optimize=optimize)``, where "
"``FLAGS_VALUE`` is ``ast.PyCF_ONLY_AST`` if ``optimize <= 0`` and ``ast."
"PyCF_OPTIMIZED_AST`` otherwise."
msgstr ""
"Analiza la fuente en un nodo AST. Equivalente a ``compile(source, filename, "
"mode, ast.PyCF_ONLY_AST)``."

#: ../Doc/library/ast.rst:2133
#, fuzzy
msgid ""
"If ``type_comments=True`` is given, the parser is modified to check and "
"return type comments as specified by :pep:`484` and :pep:`526`. This is "
"equivalent to adding :data:`ast.PyCF_TYPE_COMMENTS` to the flags passed to :"
"func:`compile`.  This will report syntax errors for misplaced type "
"comments.  Without this flag, type comments will be ignored, and the "
"``type_comment`` field on selected AST nodes will always be ``None``.  In "
"addition, the locations of ``# type: ignore`` comments will be returned as "
"the ``type_ignores`` attribute of :class:`Module` (otherwise it is always an "
"empty list)."
msgstr ""
"Si se proporciona ``type_comments=True``, el analizador se modifica para "
"verificar y retornar los comentarios de tipo según lo especificado por :pep:"
"`484` y :pep:`526`. Esto es equivalente a agregar :data:`ast."
"PyCF_TYPE_COMMENTS` a los flags pasados a :func:`compile()`. Esto informará "
"errores de sintaxis para comentarios de tipo fuera de lugar. Sin este flag, "
"los comentarios de tipo se ignorarán y el campo ``type_comment`` en los "
"nodos AST seleccionados siempre será ``None``. Además, las ubicaciones de "
"los comentarios ``# type: ignore`` se retornarán como el atributo "
"``type_ignores`` de :class:`Module` (de lo contrario, siempre es una lista "
"vacía)."

#: ../Doc/library/ast.rst:2143
msgid ""
"In addition, if ``mode`` is ``'func_type'``, the input syntax is modified to "
"correspond to :pep:`484` \"signature type comments\", e.g. ``(str, int) -> "
"List[str]``."
msgstr ""
"Además, si ``modo`` es ``'func_type'``, la sintaxis de entrada se modifica "
"para corresponder a :pep:`484` \"comentarios de tipo de firma\", por ejemplo "
"``(str, int) -> List[str]``."

#: ../Doc/library/ast.rst:2147
msgid ""
"Setting ``feature_version`` to a tuple ``(major, minor)`` will result in a "
"\"best-effort\" attempt to parse using that Python version's grammar. For "
"example, setting ``feature_version=(3, 9)`` will attempt to disallow parsing "
"of :keyword:`match` statements. Currently ``major`` must equal to ``3``. The "
"lowest supported version is ``(3, 7)`` (and this may increase in future "
"Python versions); the highest is ``sys.version_info[0:2]``. \"Best-effort\" "
"attempt means there is no guarantee that the parse (or success of the parse) "
"is the same as when run on the Python version corresponding to "
"``feature_version``."
msgstr ""

#: ../Doc/library/ast.rst:2157
#, fuzzy
msgid ""
"If source contains a null character (``\\0``), :exc:`ValueError` is raised."
msgstr ""
"Si la fuente contiene un carácter nulo ('\\ 0'), se lanza :exc:`ValueError`."

#: ../Doc/library/ast.rst:2160
msgid ""
"Note that successfully parsing source code into an AST object doesn't "
"guarantee that the source code provided is valid Python code that can be "
"executed as the compilation step can raise further :exc:`SyntaxError` "
"exceptions. For instance, the source ``return 42`` generates a valid AST "
"node for a return statement, but it cannot be compiled alone (it needs to be "
"inside a function node)."
msgstr ""
"Tenga en cuenta que analizar correctamente el código fuente en un objeto AST "
"no garantiza que el código fuente proporcionado sea un código Python válido "
"que se pueda ejecutar, ya que el paso de compilación puede lanzar más "
"excepciones :exc:`SyntaxError`. Por ejemplo, la fuente ``return 42`` genera "
"un nodo AST válido para una declaración de retorno, pero no se puede "
"compilar solo (debe estar dentro de un nodo de función)."

#: ../Doc/library/ast.rst:2167
msgid ""
"In particular, :func:`ast.parse` won't do any scoping checks, which the "
"compilation step does."
msgstr ""
"En particular, :func:`ast.parse` no realizará ninguna verificación de "
"alcance, lo que hace el paso de compilación."

#: ../Doc/library/ast.rst:2171
msgid ""
"It is possible to crash the Python interpreter with a sufficiently large/"
"complex string due to stack depth limitations in Python's AST compiler."
msgstr ""
"Es posible bloquear el intérprete de Python con una cadena de caracteres "
"suficientemente grande/compleja debido a las limitaciones de profundidad de "
"pila en el compilador AST de Python."

#: ../Doc/library/ast.rst:2175
msgid "Added ``type_comments``, ``mode='func_type'`` and ``feature_version``."
msgstr ""
"Se agregaron ``type_comments``, ``mode='func_type'`` y ``feature_version``."

#: ../Doc/library/ast.rst:2178
msgid ""
"The minimum supported version for ``feature_version`` is now ``(3, 7)``. The "
"``optimize`` argument was added."
msgstr ""

#: ../Doc/library/ast.rst:2185
msgid ""
"Unparse an :class:`ast.AST` object and generate a string with code that "
"would produce an equivalent :class:`ast.AST` object if parsed back with :"
"func:`ast.parse`."
msgstr ""
"Analice un objeto :class:`ast.AST` y genere una cadena con código que "
"produciría un objeto :class:`ast.AST` equivalente si se analiza con :func:"
"`ast.parse`."

#: ../Doc/library/ast.rst:2190
msgid ""
"The produced code string will not necessarily be equal to the original code "
"that generated the :class:`ast.AST` object (without any compiler "
"optimizations, such as constant tuples/frozensets)."
msgstr ""
"La cadena de código producida no será necesariamente igual al código "
"original que generó el objeto :class:`ast.AST` (sin ninguna optimización del "
"compilador, como tuplas constantes / frozensets)."

#: ../Doc/library/ast.rst:2195
msgid ""
"Trying to unparse a highly complex expression would result with :exc:"
"`RecursionError`."
msgstr ""
"Intentar descomprimir una expresión muy compleja daría como resultado :exc:"
"`RecursionError`."

#: ../Doc/library/ast.rst:2203
msgid ""
"Evaluate an expression node or a string containing only a Python literal or "
"container display.  The string or node provided may only consist of the "
"following Python literal structures: strings, bytes, numbers, tuples, lists, "
"dicts, sets, booleans, ``None`` and ``Ellipsis``."
msgstr ""
"Evalúa un nodo de expresión o una cadena de caracteres que contenga "
"únicamente un literal de Python o visualizador de contenedor.  La cadena o "
"nodo proporcionado sólo puede consistir en las siguientes estructuras "
"literales de Python: cadenas de caracteres, bytes, números, tuplas, listas, "
"diccionarios, conjuntos, booleanos, ``None`` y ``Ellipsis``."

#: ../Doc/library/ast.rst:2208
msgid ""
"This can be used for evaluating strings containing Python values without the "
"need to parse the values oneself.  It is not capable of evaluating "
"arbitrarily complex expressions, for example involving operators or indexing."
msgstr ""
"Esto se puede usar para evaluar de forma segura las cadenas de caracteres "
"que contienen valores de Python sin la necesidad de analizar los valores uno "
"mismo.  No es capaz de evaluar expresiones complejas arbitrariamente, por "
"ejemplo, que involucran operadores o indexación."

#: ../Doc/library/ast.rst:2213
msgid ""
"This function had been documented as \"safe\" in the past without defining "
"what that meant. That was misleading. This is specifically designed not to "
"execute Python code, unlike the more general :func:`eval`. There is no "
"namespace, no name lookups, or ability to call out. But it is not free from "
"attack: A relatively small input can lead to memory exhaustion or to C stack "
"exhaustion, crashing the process. There is also the possibility for "
"excessive CPU consumption denial of service on some inputs. Calling it on "
"untrusted data is thus not recommended."
msgstr ""
"Esta función había sido documentada como \"segura\" en el pasado sin definir "
"lo que eso significaba. Eso era engañoso. Está diseñada específicamente no "
"para ejecutar código Python, a diferencia de la más general :func:`eval`. No "
"hay espacio de nombres, ni búsqueda de nombres, ni capacidad de llamada. "
"Pero no está libre de ataques: Una entrada relativamente pequeña puede "
"llevar a un agotamiento de la memoria o de la pila de C, haciendo colapsar "
"el proceso. También existe la posibilidad de denegación de servicio por "
"consumo excesivo de CPU en algunas entradas. Por lo tanto, no se recomienda "
"llamarlo con datos no confiables."

#: ../Doc/library/ast.rst:2223
msgid ""
"It is possible to crash the Python interpreter due to stack depth "
"limitations in Python's AST compiler."
msgstr ""
"Es posible bloquear el intérprete de Python debido a las limitaciones de "
"profundidad de pila en el compilador AST de Python."

#: ../Doc/library/ast.rst:2226
msgid ""
"It can raise :exc:`ValueError`, :exc:`TypeError`, :exc:`SyntaxError`, :exc:"
"`MemoryError` and :exc:`RecursionError` depending on the malformed input."
msgstr ""
"Puede generar :exc:`ValueError`, :exc:`TypeError`, :exc:`SyntaxError`, :exc:"
"`MemoryError` y :exc:`RecursionError` dependiendo de la entrada mal formada."

#: ../Doc/library/ast.rst:2230
msgid "Now allows bytes and set literals."
msgstr "Ahora permite bytes y establece literales."

#: ../Doc/library/ast.rst:2233
msgid "Now supports creating empty sets with ``'set()'``."
msgstr "Ahora admite la creación de conjuntos vacíos con ``'set()'``."

#: ../Doc/library/ast.rst:2236
msgid "For string inputs, leading spaces and tabs are now stripped."
msgstr ""
"Para las entradas de cadena, los espacios iniciales y las tabulaciones ahora "
"se eliminan."

#: ../Doc/library/ast.rst:2242
msgid ""
"Return the docstring of the given *node* (which must be a :class:"
"`FunctionDef`, :class:`AsyncFunctionDef`, :class:`ClassDef`, or :class:"
"`Module` node), or ``None`` if it has no docstring. If *clean* is true, "
"clean up the docstring's indentation with :func:`inspect.cleandoc`."
msgstr ""
"Retorna la cadena de caracteres de documentación del *node* dado (que debe "
"ser un nodo :class:`FunctionDef`, :class:`AsyncFunctionDef`, :class:"
"`ClassDef`, o :class:`Module`), o ``None`` si no tiene docstring. Si *clean* "
"es verdadero, limpia la sangría del docstring con :func:`inspect.cleandoc`."

#: ../Doc/library/ast.rst:2248
msgid ":class:`AsyncFunctionDef` is now supported."
msgstr ":class:`AsyncFunctionDef` ahora está soportada."

#: ../Doc/library/ast.rst:2254
#, fuzzy
msgid ""
"Get source code segment of the *source* that generated *node*. If some "
"location information (:attr:`~ast.AST.lineno`, :attr:`~ast.AST.end_lineno`, :"
"attr:`~ast.AST.col_offset`, or :attr:`~ast.AST.end_col_offset`) is missing, "
"return ``None``."
msgstr ""
"Obtenga el segmento de código fuente del *source* que generó *node*. Si "
"falta información de ubicación (:attr:`lineno`, :attr:`end_lineno`, :attr:"
"`col_offset`, o :attr:`end_col_offset`), retorna ``None``."

#: ../Doc/library/ast.rst:2258
msgid ""
"If *padded* is ``True``, the first line of a multi-line statement will be "
"padded with spaces to match its original position."
msgstr ""
"Si *padded* es ``True``, la primera línea de una declaración de varias "
"líneas se rellenará con espacios para que coincidan con su posición original."

#: ../Doc/library/ast.rst:2266
#, fuzzy
msgid ""
"When you compile a node tree with :func:`compile`, the compiler expects :"
"attr:`~ast.AST.lineno` and :attr:`~ast.AST.col_offset` attributes for every "
"node that supports them.  This is rather tedious to fill in for generated "
"nodes, so this helper adds these attributes recursively where not already "
"set, by setting them to the values of the parent node.  It works recursively "
"starting at *node*."
msgstr ""
"Cuando compila un árbol de nodos con :func:`compile`, el compilador espera "
"los atributos :attr:`lineno` y :attr:`col_offset` para cada nodo que los "
"soporta. Es bastante tedioso completar los nodos generados, por lo que este "
"ayudante agrega estos atributos de forma recursiva donde aún no están "
"establecidos, configurándolos en los valores del nodo principal. Funciona de "
"forma recursiva comenzando en *node*."

#: ../Doc/library/ast.rst:2275
msgid ""
"Increment the line number and end line number of each node in the tree "
"starting at *node* by *n*. This is useful to \"move code\" to a different "
"location in a file."
msgstr ""
"Incremente el número de línea y el número de línea final de cada nodo en el "
"árbol comenzando en *node* por *n*. Esto es útil para \"mover código\" a una "
"ubicación diferente en un archivo."

#: ../Doc/library/ast.rst:2282
#, fuzzy
msgid ""
"Copy source location (:attr:`~ast.AST.lineno`, :attr:`~ast.AST.col_offset`, :"
"attr:`~ast.AST.end_lineno`, and :attr:`~ast.AST.end_col_offset`) from "
"*old_node* to *new_node* if possible, and return *new_node*."
msgstr ""
"Copia la ubicación de origen (:attr:`lineno`, :attr:`col_offset`, :attr:"
"`end_lineno`, y :attr:`end_col_offset`) de *old_node* a *new_node* si es "
"posible, y retorna *new_node*."

#: ../Doc/library/ast.rst:2289
msgid ""
"Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields`` "
"that is present on *node*."
msgstr ""
"Produce (*yield*) una tupla de ``(fieldname, value)`` para cada campo en "
"``node._fields`` que está presente en *node*."

#: ../Doc/library/ast.rst:2295
msgid ""
"Yield all direct child nodes of *node*, that is, all fields that are nodes "
"and all items of fields that are lists of nodes."
msgstr ""
"Cede todos los nodos secundarios directos de *node*, es decir, todos los "
"campos que son nodos y todos los elementos de campos que son listas de nodos."

#: ../Doc/library/ast.rst:2301
msgid ""
"Recursively yield all descendant nodes in the tree starting at *node* "
"(including *node* itself), in no specified order.  This is useful if you "
"only want to modify nodes in place and don't care about the context."
msgstr ""
"Recursivamente produce todos los nodos descendientes en el árbol comenzando "
"en *node* (incluido *node* en sí mismo), en ningún orden especificado. Esto "
"es útil si solo desea modificar los nodos en su lugar y no le importa el "
"contexto."

#: ../Doc/library/ast.rst:2308
msgid ""
"A node visitor base class that walks the abstract syntax tree and calls a "
"visitor function for every node found.  This function may return a value "
"which is forwarded by the :meth:`visit` method."
msgstr ""
"Una clase base de visitante de nodo que recorre el árbol de sintaxis "
"abstracta y llama a una función de visitante para cada nodo encontrado. Esta "
"función puede retornar un valor que se reenvía mediante el método :meth:"
"`visit`."

#: ../Doc/library/ast.rst:2312
msgid ""
"This class is meant to be subclassed, with the subclass adding visitor "
"methods."
msgstr ""
"Esta clase está destinada a ser subclase, con la subclase agregando métodos "
"de visitante."

#: ../Doc/library/ast.rst:2317
msgid ""
"Visit a node.  The default implementation calls the method called :samp:"
"`self.visit_{classname}` where *classname* is the name of the node class, "
"or :meth:`generic_visit` if that method doesn't exist."
msgstr ""
"Visita un nodo. La implementación predeterminada llama al método llamado :"
"samp:`self.visit_{classname}` donde *classname* es el nombre de la clase de "
"nodo, o :meth:`generic_visit` si ese método no existe."

#: ../Doc/library/ast.rst:2323
msgid "This visitor calls :meth:`visit` on all children of the node."
msgstr "Este visitante llama :meth:`visit` en todos los hijos del nodo."

#: ../Doc/library/ast.rst:2325
msgid ""
"Note that child nodes of nodes that have a custom visitor method won't be "
"visited unless the visitor calls :meth:`generic_visit` or visits them itself."
msgstr ""
"Tenga en cuenta que los nodos secundarios de los nodos que tienen un método "
"de visitante personalizado no se visitarán a menos que el visitante llame :"
"meth:`generic_visit` o los visite a sí mismo."

#: ../Doc/library/ast.rst:2331
msgid "Handles all constant nodes."
msgstr ""

#: ../Doc/library/ast.rst:2333
msgid ""
"Don't use the :class:`NodeVisitor` if you want to apply changes to nodes "
"during traversal.  For this a special visitor exists (:class:"
"`NodeTransformer`) that allows modifications."
msgstr ""
"No use :class:`NodeVisitor` si desea aplicar cambios a los nodos durante el "
"recorrido. Para esto existe un visitante especial (:class:`NodeTransformer`) "
"que permite modificaciones."

#: ../Doc/library/ast.rst:2339
#, fuzzy
msgid ""
"Methods :meth:`!visit_Num`, :meth:`!visit_Str`, :meth:`!visit_Bytes`, :meth:"
"`!visit_NameConstant` and :meth:`!visit_Ellipsis` are deprecated now and "
"will not be called in future Python versions.  Add the :meth:"
"`visit_Constant` method to handle all constant nodes."
msgstr ""
"Los métodos :meth:`visit_Num`, :meth:`visit_Str`, :meth:`visit_Bytes`, :meth:"
"`visit_NameConstant` y :meth:`visit_Ellipsis` están en desuso ahora y no "
"serán llamados en futuras versiones de Python. Agregue el método :meth:"
"`visit_Constant` para manejar todos los nodos constantes."

#: ../Doc/library/ast.rst:2347
msgid ""
"A :class:`NodeVisitor` subclass that walks the abstract syntax tree and "
"allows modification of nodes."
msgstr ""
"Una subclase de :class:`NodeVisitor` que recorre el árbol de sintaxis "
"abstracta y permite la modificación de nodos."

#: ../Doc/library/ast.rst:2350
msgid ""
"The :class:`NodeTransformer` will walk the AST and use the return value of "
"the visitor methods to replace or remove the old node.  If the return value "
"of the visitor method is ``None``, the node will be removed from its "
"location, otherwise it is replaced with the return value.  The return value "
"may be the original node in which case no replacement takes place."
msgstr ""
"La clase :class:`NodeTransformer` recorrerá el AST y usará el valor de "
"retorno de los métodos del visitante para reemplazar o eliminar el nodo "
"anterior. Si el valor de retorno del método de visitante es ``None``, el "
"nodo se eliminará de su ubicación; de lo contrario, se reemplazará con el "
"valor de retorno. El valor de retorno puede ser el nodo original, en cuyo "
"caso no se realiza ningún reemplazo."

#: ../Doc/library/ast.rst:2356
msgid ""
"Here is an example transformer that rewrites all occurrences of name lookups "
"(``foo``) to ``data['foo']``::"
msgstr ""
"Aquí hay un transformador de ejemplo que reescribe todas las apariciones de "
"búsquedas de nombres (``foo``) en ``data['foo']``::"

#: ../Doc/library/ast.rst:2359
msgid ""
"class RewriteName(NodeTransformer):\n"
"\n"
"    def visit_Name(self, node):\n"
"        return Subscript(\n"
"            value=Name(id='data', ctx=Load()),\n"
"            slice=Constant(value=node.id),\n"
"            ctx=node.ctx\n"
"        )"
msgstr ""

#: ../Doc/library/ast.rst:2368
#, fuzzy
msgid ""
"Keep in mind that if the node you're operating on has child nodes you must "
"either transform the child nodes yourself or call the :meth:`~ast."
"NodeVisitor.generic_visit` method for the node first."
msgstr ""
"Tenga en cuenta que si el nodo en el que está operando tiene nodos "
"secundarios, debe transformar los nodos secundarios usted mismo o llamar "
"primero al método :meth:`generic_visit` para el nodo."

#: ../Doc/library/ast.rst:2372
msgid ""
"For nodes that were part of a collection of statements (that applies to all "
"statement nodes), the visitor may also return a list of nodes rather than "
"just a single node."
msgstr ""
"Para los nodos que formaban parte de una colección de declaraciones (que se "
"aplica a todos los nodos de declaración), el visitante también puede "
"retornar una lista de nodos en lugar de solo un nodo."

#: ../Doc/library/ast.rst:2376
#, fuzzy
msgid ""
"If :class:`NodeTransformer` introduces new nodes (that weren't part of "
"original tree) without giving them location information (such as :attr:`~ast."
"AST.lineno`), :func:`fix_missing_locations` should be called with the new "
"sub-tree to recalculate the location information::"
msgstr ""
"Si :class:`NodeTransformer` introduce nuevos nodos (que no eran parte del "
"árbol original) sin darles información de ubicación (como :attr:`lineno`), :"
"func:`fix_missing_locations` debería llamarse con el nuevo sub-árbol para "
"recalcular la información de ubicación ::"

#: ../Doc/library/ast.rst:2381
msgid ""
"tree = ast.parse('foo', mode='eval')\n"
"new_tree = fix_missing_locations(RewriteName().visit(tree))"
msgstr ""

#: ../Doc/library/ast.rst:2384
msgid "Usually you use the transformer like this::"
msgstr "Usualmente usas el transformador así:"

#: ../Doc/library/ast.rst:2386
msgid "node = YourTransformer().visit(node)"
msgstr ""

#: ../Doc/library/ast.rst:2391
msgid ""
"Return a formatted dump of the tree in *node*.  This is mainly useful for "
"debugging purposes.  If *annotate_fields* is true (by default), the returned "
"string will show the names and the values for fields. If *annotate_fields* "
"is false, the result string will be more compact by omitting unambiguous "
"field names.  Attributes such as line numbers and column offsets are not "
"dumped by default.  If this is wanted, *include_attributes* can be set to "
"true."
msgstr ""
"Retorna un volcado formateado del árbol en *node*. Esto es principalmente "
"útil para propósitos de depuración. Si *annotate_fields* es verdadero (por "
"defecto), la cadena de caracteres retornada mostrará los nombres y los "
"valores de los campos. Si *annotate_fields* es falso, la cadena de "
"resultados será más compacta omitiendo nombres de campo no ambiguos. Los "
"atributos como los números de línea y las compensaciones de columna no se "
"vuelcan de forma predeterminada. Si esto se desea, *include_attributes* se "
"puede establecer en verdadero."

#: ../Doc/library/ast.rst:2399
msgid ""
"If *indent* is a non-negative integer or string, then the tree will be "
"pretty-printed with that indent level.  An indent level of 0, negative, or "
"``\"\"`` will only insert newlines.  ``None`` (the default) selects the "
"single line representation. Using a positive integer indent indents that "
"many spaces per level.  If *indent* is a string (such as ``\"\\t\"``), that "
"string is used to indent each level."
msgstr ""
"Si *indent* es un entero no negativo o una cadena de caracteres, entonces el "
"árbol será impreso de forma linda con ese nivel de sangría.  Un nivel de "
"sangría de 0, negativo, o ``\"\"`` solo insertará nuevas líneas. ``None`` "
"(el valor por defecto) selecciona la representación de línea simple. Al usar "
"un entero positivo se sangrará esa cantidad de espacios como sangría.  Si "
"*indent* es una cadena de caracteres (como ``\"\\t\"``), esa cadena se usa "
"para sangrar cada nivel."

#: ../Doc/library/ast.rst:2406
msgid ""
"If *show_empty* is ``False`` (the default), empty lists and fields that are "
"``None`` will be omitted from the output."
msgstr ""

#: ../Doc/library/ast.rst:2409
msgid "Added the *indent* option."
msgstr "Añadida la opción *indent*."

#: ../Doc/library/ast.rst:2412
#, fuzzy
msgid "Added the *show_empty* option."
msgstr "Añadida la opción *indent*."

#: ../Doc/library/ast.rst:2415
msgid ""
">>> print(ast.dump(ast.parse(\"\"\"\\\n"
"... async def f():\n"
"...     await other_func()\n"
"... \"\"\"), indent=4, show_empty=True))\n"
"Module(\n"
"    body=[\n"
"        AsyncFunctionDef(\n"
"            name='f',\n"
"            args=arguments(\n"
"                posonlyargs=[],\n"
"                args=[],\n"
"                kwonlyargs=[],\n"
"                kw_defaults=[],\n"
"                defaults=[]),\n"
"            body=[\n"
"                Expr(\n"
"                    value=Await(\n"
"                        value=Call(\n"
"                            func=Name(id='other_func', ctx=Load()),\n"
"                            args=[],\n"
"                            keywords=[])))],\n"
"            decorator_list=[],\n"
"            type_params=[])],\n"
"    type_ignores=[])"
msgstr ""

#: ../Doc/library/ast.rst:2446
msgid "Compiler Flags"
msgstr "Banderas del compilador"

#: ../Doc/library/ast.rst:2448
msgid ""
"The following flags may be passed to :func:`compile` in order to change "
"effects on the compilation of a program:"
msgstr ""
"Los siguientes indicadores pueden pasarse a :func:`compile` para cambiar los "
"efectos en la compilación de un programa:"

#: ../Doc/library/ast.rst:2453
msgid ""
"Enables support for top-level ``await``, ``async for``, ``async with`` and "
"async comprehensions."
msgstr ""
"Habilita el soporte para ``await``, ``async for``, ``async with`` y "
"comprensiones asíncronas de nivel superior."

#: ../Doc/library/ast.rst:2460
msgid ""
"Generates and returns an abstract syntax tree instead of returning a "
"compiled code object."
msgstr ""
"Genera y retorna un árbol de sintaxis abstracto en lugar de retornar un "
"objeto de código compilado."

#: ../Doc/library/ast.rst:2465
msgid ""
"The returned AST is optimized according to the *optimize* argument in :func:"
"`compile` or :func:`ast.parse`."
msgstr ""

#: ../Doc/library/ast.rst:2472
msgid ""
"Enables support for :pep:`484` and :pep:`526` style type comments (``# type: "
"<type>``, ``# type: ignore <stuff>``)."
msgstr ""
"Habilita el soporte para comentarios de tipo de estilo :pep:`484` y :pep:"
"`526` (``# type: <type>``, ``# type: ignore <stuff>``)."

#: ../Doc/library/ast.rst:2481
msgid "Command-Line Usage"
msgstr "Uso en línea de comandos"

#: ../Doc/library/ast.rst:2485
msgid ""
"The :mod:`ast` module can be executed as a script from the command line. It "
"is as simple as:"
msgstr ""
"El módulo :mod:`ast` puede ser ejecutado como un script desde la línea de "
"comandos. Es tan simple como:"

#: ../Doc/library/ast.rst:2488
msgid "python -m ast [-m <mode>] [-a] [infile]"
msgstr ""

#: ../Doc/library/ast.rst:2492
msgid "The following options are accepted:"
msgstr "Las siguientes opciones son aceptadas:"

#: ../Doc/library/ast.rst:2498
msgid "Show the help message and exit."
msgstr "Muestra el mensaje de ayuda y sale."

#: ../Doc/library/ast.rst:2503
msgid ""
"Specify what kind of code must be compiled, like the *mode* argument in :"
"func:`parse`."
msgstr ""
"Especifica qué tipo de código debe ser compilado, como el argumento *mode* "
"en :func:`parse`."

#: ../Doc/library/ast.rst:2508
msgid "Don't parse type comments."
msgstr "No analizar los comentarios de tipo."

#: ../Doc/library/ast.rst:2512
msgid "Include attributes such as line numbers and column offsets."
msgstr "Incluye atributos como números de línea y sangrías."

#: ../Doc/library/ast.rst:2517
msgid "Indentation of nodes in AST (number of spaces)."
msgstr "Sangría de nodos en AST (número de espacios)."

#: ../Doc/library/ast.rst:2519
msgid ""
"If :file:`infile` is specified its contents are parsed to AST and dumped to "
"stdout.  Otherwise, the content is read from stdin."
msgstr ""
"Si :file:`infile` es especificado, su contenido es analizado a AST y "
"mostrado en stdout. De otra forma, el contenido es leído desde stdin."

#: ../Doc/library/ast.rst:2525
msgid ""
"`Green Tree Snakes <https://greentreesnakes.readthedocs.io/>`_, an external "
"documentation resource, has good details on working with Python ASTs."
msgstr ""
"`Green Tree Snakes <https://greentreesnakes.readthedocs.io/>`_, un recurso "
"de documentación externo, tiene buenos detalles sobre cómo trabajar con "
"Python AST."

#: ../Doc/library/ast.rst:2528
msgid ""
"`ASTTokens <https://asttokens.readthedocs.io/en/latest/user-guide.html>`_ "
"annotates Python ASTs with the positions of tokens and text in the source "
"code that generated them. This is helpful for tools that make source code "
"transformations."
msgstr ""
"`ASTTokens <https://asttokens.readthedocs.io/en/latest/user-guide.html>`_ "
"anota ASTs de Python con la posición de tokens y texto en el código fuente "
"que los genera. Esto es de ayuda para herramientas que hacen "
"transformaciones de código fuente."

#: ../Doc/library/ast.rst:2533
#, fuzzy
msgid ""
"`leoAst.py <https://leo-editor.github.io/leo-editor/appendices.html#leoast-"
"py>`_ unifies the token-based and parse-tree-based views of python programs "
"by inserting two-way links between tokens and ast nodes."
msgstr ""
"`leoAst.py <https://leoeditor.com/appendices.html#leoast-py>`_ unifica las "
"vistas basadas en tokens y en *parse-trees* de los programas de Python "
"insertando vínculos de doble vía entre tokens y nodos AST."

#: ../Doc/library/ast.rst:2538
msgid ""
"`LibCST <https://libcst.readthedocs.io/>`_ parses code as a Concrete Syntax "
"Tree that looks like an ast tree and keeps all formatting details. It's "
"useful for building automated refactoring (codemod) applications and linters."
msgstr ""
"`LibCST <https://libcst.readthedocs.io/>`_ analiza código como Árboles de "
"Sintaxis Concreta que se ven como ASTs y mantienen todos los detalles de "
"formato. Es útil para construir herramientas de refactor automáticas y "
"linters."

#: ../Doc/library/ast.rst:2543
#, fuzzy
msgid ""
"`Parso <https://parso.readthedocs.io>`_ is a Python parser that supports "
"error recovery and round-trip parsing for different Python versions (in "
"multiple Python versions). Parso is also able to list multiple syntax errors "
"in your Python file."
msgstr ""
"`Parso <https://parso.readthedocs.io>`_ es un analizador de Python que "
"soporta recuperación de errores y análisis sintáctico de ida y vuelta para "
"las diferentes versiones de Python (en múltiples versiones de Python). Parso "
"también es capaz de enlistar múltiples errores de sintaxis en tu archivo de "
"Python."

#: ../Doc/library/ast.rst:59
msgid "? (question mark)"
msgstr "? (question mark)"

#: ../Doc/library/ast.rst:59 ../Doc/library/ast.rst:60
msgid "in AST grammar"
msgstr "Gramática abstracta"

#: ../Doc/library/ast.rst:60
msgid "* (asterisk)"
msgstr "* (asterisk)"
