# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python en Español
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Python en Español 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-21 16:38-0300\n"
"PO-Revision-Date: 2021-11-08 22:08-0300\n"
"Last-Translator: \n"
"Language: es_AR\n"
"Language-Team: \n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../Doc/library/multiprocessing.shared_memory.rst:2
#, fuzzy
msgid ""
":mod:`!multiprocessing.shared_memory` --- Shared memory for direct access "
"across processes"
msgstr ""
":mod:`multiprocessing.shared_memory` --- Memoria compartida para acceso "
"directo a través de procesos"

#: ../Doc/library/multiprocessing.shared_memory.rst:7
msgid "**Source code:** :source:`Lib/multiprocessing/shared_memory.py`"
msgstr "**Código fuente:** :source:`Lib/multiprocessing/shared_memory.py`"

#: ../Doc/library/multiprocessing.shared_memory.rst:18
#, fuzzy
msgid ""
"This module provides a class, :class:`SharedMemory`, for the allocation and "
"management of shared memory to be accessed by one or more processes on a "
"multicore or symmetric multiprocessor (SMP) machine.  To assist with the "
"life-cycle management of shared memory especially across distinct processes, "
"a :class:`~multiprocessing.managers.BaseManager` subclass, :class:"
"`~multiprocessing.managers.SharedMemoryManager`, is also provided in the :"
"mod:`multiprocessing.managers` module."
msgstr ""
"Este módulo proporciona una clase, :class:`SharedMemory`, para la asignación "
"y administración de memoria compartida entre uno o más procesos en una "
"máquina con varios núcleos o varios procesadores simétrico (SMP). Para "
"facilitar la gestión del ciclo de vida de la memoria compartida, "
"especialmente entre múltiples procesos, el módulo ``multiprocessing."
"managers`` también proporciona la clase :class:`SharedMemoryManager`, una "
"subclase de :class:`~multiprocessing.managers.BaseManager`."

#: ../Doc/library/multiprocessing.shared_memory.rst:26
#, fuzzy
msgid ""
"In this module, shared memory refers to \"POSIX style\" shared memory blocks "
"(though is not necessarily implemented explicitly as such) and does not "
"refer to \"distributed shared memory\".  This style of shared memory permits "
"distinct processes to potentially read and write to a common (or shared) "
"region of volatile memory.  Processes are conventionally limited to only "
"have access to their own process memory space but shared memory permits the "
"sharing of data between processes, avoiding the need to instead send "
"messages between processes containing that data.  Sharing data directly via "
"memory can provide significant performance benefits compared to sharing data "
"via disk or socket or other communications requiring the serialization/"
"deserialization and copying of data."
msgstr ""
"En este módulo, la memoria compartida se refiere a bloques de memoria "
"compartida de \"Sistema estilo V\" (aunque no necesariamente se implementa "
"explícitamente como tal) y no se refiere a \"memoria compartida "
"distribuida\". Este tipo de memoria compartida permite que múltiples "
"procesos lean y escriban en un área común (o compartida) de memoria volátil. "
"Normalmente, los procesos solo tienen acceso a su propio espacio de memoria; "
"la memoria compartida permite compartir datos entre procesos, lo que evita "
"que tengan que enviar estos datos por mensaje. Compartir datos directamente "
"a través de la memoria puede proporcionar importantes beneficios de "
"rendimiento en comparación con compartir datos a través de un disco o socket "
"u otras comunicaciones que requieren la serialización/deserialización y "
"copia de datos."

#: ../Doc/library/multiprocessing.shared_memory.rst:41
#, fuzzy
msgid ""
"Create an instance of the :class:`!SharedMemory` class for either creating a "
"new shared memory block or attaching to an existing shared memory block.  "
"Each shared memory block is assigned a unique name. In this way, one process "
"can create a shared memory block with a particular name and a different "
"process can attach to that same shared memory block using that same name."
msgstr ""
"Crea un nuevo bloque de memoria compartida o guarda un bloque ya existente. "
"Se debe dar un nombre único a cada bloque de memoria compartida; por lo "
"tanto, un proceso puede crear un nuevo bloque de memoria compartida con un "
"nombre particular y un proceso diferente se puede conectar a ese mismo "
"bloque de memoria compartida usando ese mismo nombre."

#: ../Doc/library/multiprocessing.shared_memory.rst:48
#, fuzzy
msgid ""
"As a resource for sharing data across processes, shared memory blocks may "
"outlive the original process that created them.  When one process no longer "
"needs access to a shared memory block that might still be needed by other "
"processes, the :meth:`close` method should be called. When a shared memory "
"block is no longer needed by any process, the :meth:`unlink` method should "
"be called to ensure proper cleanup."
msgstr ""
"Como un recurso para compartir datos entre procesos, los bloques de memoria "
"compartida pueden sobrevivir al proceso original que los creó. Cuando un "
"proceso ya no necesita acceso a un bloque de memoria compartida que otros "
"procesos aún podrían necesitar, se debe llamar al método :meth:`close()`. "
"Cuando un proceso ya no necesita un bloque de memoria compartida, se debe "
"llamar al método :meth:`unlink()` para garantizar una limpieza adecuada."

#: ../Doc/library/multiprocessing.shared_memory.rst
msgid "Parameters"
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:55
#, fuzzy
msgid ""
"The unique name for the requested shared memory, specified as a string. When "
"creating a new shared memory block, if ``None`` (the default) is supplied "
"for the name, a novel name will be generated."
msgstr ""
"*name* es el nombre único para la memoria compartida solicitada, "
"especificada como una cadena de caracteres. Al crear un nuevo bloque de "
"memoria compartida, si se proporciona ``None`` (valor por defecto) para el "
"nombre, se generará un nombre nuevo."

#: ../Doc/library/multiprocessing.shared_memory.rst:61
#, fuzzy
msgid ""
"Control whether a new shared memory block is created (``True``) or an "
"existing shared memory block is attached (``False``)."
msgstr ""
"*create* controla si se crea un nuevo bloque de memoria compartida "
"(``True``) o si se adjunta un bloque de memoria compartida existente "
"(``False``)."

#: ../Doc/library/multiprocessing.shared_memory.rst:65
#, fuzzy
msgid ""
"The requested number of bytes when creating a new shared memory block. "
"Because some platforms choose to allocate chunks of memory based upon that "
"platform's memory page size, the exact size of the shared memory block may "
"be larger or equal to the size requested. When attaching to an existing "
"shared memory block, the *size* parameter is ignored."
msgstr ""
"*size* especifica el número solicitado de bytes al crear un nuevo bloque de "
"memoria compartida. Debido a que algunas plataformas eligen asignar "
"fragmentos de memoria en función del tamaño de página de memoria de esa "
"plataforma, el tamaño exacto del bloque de memoria compartida puede ser "
"mayor o igual al tamaño solicitado. Cuando se conecta a un bloque de memoria "
"compartida existente, se ignora el parámetro ``size``."

#: ../Doc/library/multiprocessing.shared_memory.rst:73
msgid ""
"When ``True``, register the shared memory block with a resource tracker "
"process on platforms where the OS does not do this automatically. The "
"resource tracker ensures proper cleanup of the shared memory even if all "
"other processes with access to the memory exit without doing so. Python "
"processes created from a common ancestor using :mod:`multiprocessing` "
"facilities share a single resource tracker process, and the lifetime of "
"shared memory segments is handled automatically among these processes. "
"Python processes created in any other way will receive their own resource "
"tracker when accessing shared memory with *track* enabled. This will cause "
"the shared memory to be deleted by the resource tracker of the first process "
"that terminates. To avoid this issue, users of :mod:`subprocess` or "
"standalone Python processes should set *track* to ``False`` when there is "
"already another process in place that does the bookkeeping. *track* is "
"ignored on Windows, which has its own tracking and automatically deletes "
"shared memory when all handles to it have been closed."
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:91
msgid "Added the *track* parameter."
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:96
msgid ""
"Close the file descriptor/handle to the shared memory from this instance.  :"
"meth:`close` should be called once access to the shared memory block from "
"this instance is no longer needed.  Depending on operating system, the "
"underlying memory may or may not be freed even if all handles to it have "
"been closed.  To ensure proper cleanup, use the :meth:`unlink` method."
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:105
msgid ""
"Delete the underlying shared memory block.  This should be called only once "
"per shared memory block regardless of the number of handles to it, even in "
"other processes. :meth:`unlink` and :meth:`close` can be called in any "
"order, but trying to access data inside a shared memory block after :meth:"
"`unlink` may result in memory access errors, depending on platform."
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:112
msgid ""
"This method has no effect on Windows, where the only way to delete a shared "
"memory block is to close all handles."
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:117
msgid "A memoryview of contents of the shared memory block."
msgstr "Un *memoryview* del contenido del bloque de memoria compartida."

#: ../Doc/library/multiprocessing.shared_memory.rst:121
msgid "Read-only access to the unique name of the shared memory block."
msgstr ""
"Acceso de solo lectura al nombre único del bloque de memoria compartida."

#: ../Doc/library/multiprocessing.shared_memory.rst:125
msgid "Read-only access to size in bytes of the shared memory block."
msgstr ""
"Acceso de solo lectura al tamaño en bytes del bloque de memoria compartida."

#: ../Doc/library/multiprocessing.shared_memory.rst:128
msgid ""
"The following example demonstrates low-level use of :class:`SharedMemory` "
"instances::"
msgstr ""
"El siguiente ejemplo muestra el uso de bajo nivel de instancias de :class:"
"`SharedMemory`::"

#: ../Doc/library/multiprocessing.shared_memory.rst:131
msgid ""
">>> from multiprocessing import shared_memory\n"
">>> shm_a = shared_memory.SharedMemory(create=True, size=10)\n"
">>> type(shm_a.buf)\n"
"<class 'memoryview'>\n"
">>> buffer = shm_a.buf\n"
">>> len(buffer)\n"
"10\n"
">>> buffer[:4] = bytearray([22, 33, 44, 55])  # Modify multiple at once\n"
">>> buffer[4] = 100                           # Modify single byte at a "
"time\n"
">>> # Attach to an existing shared memory block\n"
">>> shm_b = shared_memory.SharedMemory(shm_a.name)\n"
">>> import array\n"
">>> array.array('b', shm_b.buf[:5])  # Copy the data into a new array.array\n"
"array('b', [22, 33, 44, 55, 100])\n"
">>> shm_b.buf[:5] = b'howdy'  # Modify via shm_b using bytes\n"
">>> bytes(shm_a.buf[:5])      # Access via shm_a\n"
"b'howdy'\n"
">>> shm_b.close()   # Close each SharedMemory instance\n"
">>> shm_a.close()\n"
">>> shm_a.unlink()  # Call unlink only once to release the shared memory"
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:154
#, fuzzy
msgid ""
"The following example demonstrates a practical use of the :class:"
"`SharedMemory` class with `NumPy arrays <https://numpy.org/>`_, accessing "
"the same :class:`!numpy.ndarray` from two distinct Python shells:"
msgstr ""
"El siguiente ejemplo demuestra un uso práctico de la clase :class:"
"`SharedMemory` con  `arreglos NumPy <https://www.numpy.org/>`_, accediendo "
"al mismo ``numpy.ndarray`` desde dos shells de Python distintos"

#: ../Doc/library/multiprocessing.shared_memory.rst:158
msgid ""
">>> # In the first Python interactive shell\n"
">>> import numpy as np\n"
">>> a = np.array([1, 1, 2, 3, 5, 8])  # Start with an existing NumPy array\n"
">>> from multiprocessing import shared_memory\n"
">>> shm = shared_memory.SharedMemory(create=True, size=a.nbytes)\n"
">>> # Now create a NumPy array backed by shared memory\n"
">>> b = np.ndarray(a.shape, dtype=a.dtype, buffer=shm.buf)\n"
">>> b[:] = a[:]  # Copy the original data into shared memory\n"
">>> b\n"
"array([1, 1, 2, 3, 5, 8])\n"
">>> type(b)\n"
"<class 'numpy.ndarray'>\n"
">>> type(a)\n"
"<class 'numpy.ndarray'>\n"
">>> shm.name  # We did not specify a name so one was chosen for us\n"
"'psm_21467_46075'\n"
"\n"
">>> # In either the same shell or a new Python shell on the same machine\n"
">>> import numpy as np\n"
">>> from multiprocessing import shared_memory\n"
">>> # Attach to the existing shared memory block\n"
">>> existing_shm = shared_memory.SharedMemory(name='psm_21467_46075')\n"
">>> # Note that a.shape is (6,) and a.dtype is np.int64 in this example\n"
">>> c = np.ndarray((6,), dtype=np.int64, buffer=existing_shm.buf)\n"
">>> c\n"
"array([1, 1, 2, 3, 5, 8])\n"
">>> c[-1] = 888\n"
">>> c\n"
"array([  1,   1,   2,   3,   5, 888])\n"
"\n"
">>> # Back in the first Python interactive shell, b reflects this change\n"
">>> b\n"
"array([  1,   1,   2,   3,   5, 888])\n"
"\n"
">>> # Clean up from within the second Python shell\n"
">>> del c  # Unnecessary; merely emphasizing the array is no longer used\n"
">>> existing_shm.close()\n"
"\n"
">>> # Clean up from within the first Python shell\n"
">>> del b  # Unnecessary; merely emphasizing the array is no longer used\n"
">>> shm.close()\n"
">>> shm.unlink()  # Free and release the shared memory block at the very end"
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:208
#, fuzzy
msgid ""
"A subclass of :class:`multiprocessing.managers.BaseManager` which can be "
"used for the management of shared memory blocks across processes."
msgstr ""
"Una subclase de :class:`~multiprocessing.managers.BaseManager` que se puede "
"utilizar para la gestión de bloques de memoria compartida en todos los "
"procesos."

#: ../Doc/library/multiprocessing.shared_memory.rst:211
#, fuzzy
msgid ""
"A call to :meth:`~multiprocessing.managers.BaseManager.start` on a :class:`!"
"SharedMemoryManager` instance causes a new process to be started. This new "
"process's sole purpose is to manage the life cycle of all shared memory "
"blocks created through it.  To trigger the release of all shared memory "
"blocks managed by that process, call :meth:`~multiprocessing.managers."
"BaseManager.shutdown` on the instance. This triggers a :meth:"
"`~multiprocessing.shared_memory.SharedMemory.unlink` call on all of the :"
"class:`SharedMemory` objects managed by that process and then stops the "
"process itself.  By creating :class:`!SharedMemory` instances through a :"
"class:`!SharedMemoryManager`, we avoid the need to manually track and "
"trigger the freeing of shared memory resources."
msgstr ""
"Una llamada al método :meth:`~multiprocessing.managers.BaseManager.start` en "
"una instancia de :class:`SharedMemoryManager` hace que se inicie un nuevo "
"proceso. El único propósito de este nuevo proceso es administrar el ciclo de "
"vida de todos los bloques de memoria compartida creados a través de él. Para "
"activar la liberación de todos los bloques de memoria compartida "
"administrados por ese proceso, llama al método :meth:`~multiprocessing."
"managers.BaseManager.shutdown()` en la instancia. Esto desencadena una "
"llamada al método :meth:`SharedMemory.unlink()` en todos los objetos de la "
"clase :class:`SharedMemory` administrados por ese proceso y luego detiene el "
"proceso en sí. Al crear instancias de ``SharedMemory`` a través de un "
"``SharedMemoryManager``, evitamos la necesidad de rastrear manualmente y "
"activar la liberación de recursos de memoria compartida."

#: ../Doc/library/multiprocessing.shared_memory.rst:223
msgid ""
"This class provides methods for creating and returning :class:`SharedMemory` "
"instances and for creating a list-like object (:class:`ShareableList`) "
"backed by shared memory."
msgstr ""
"Esta clase proporciona métodos para crear y retornar instancias :class:"
"`SharedMemory` y para crear un objeto de tipo lista (:class:`ShareableList`) "
"basados en memoria compartida."

#: ../Doc/library/multiprocessing.shared_memory.rst:227
#, fuzzy
msgid ""
"Refer to :class:`~multiprocessing.managers.BaseManager` for a description of "
"the inherited *address* and *authkey* optional input arguments and how they "
"may be used to connect to an existing :class:`!SharedMemoryManager` service "
"from other processes."
msgstr ""
"Consulte :class:`multiprocessing.managers.BaseManager` para obtener una "
"descripción de los argumentos heredados opcionales *address* y *authkey* y "
"cómo se deben usar para registrar un servicio ``SharedMemoryManager`` desde "
"otro proceso."

#: ../Doc/library/multiprocessing.shared_memory.rst:234
#, fuzzy
msgid ""
"Create and return a new :class:`SharedMemory` object with the specified "
"*size* in bytes."
msgstr ""
"Crea y retorna un nuevo objeto :class:`SharedMemory` con el tamaño ``size`` "
"especificado en bytes."

#: ../Doc/library/multiprocessing.shared_memory.rst:239
#, fuzzy
msgid ""
"Create and return a new :class:`ShareableList` object, initialized by the "
"values from the input *sequence*."
msgstr ""
"Crea y retorna un nuevo objeto :class:`ShareableList`, inicializado por los "
"valores de la entrada ``sequence``."

#: ../Doc/library/multiprocessing.shared_memory.rst:243
#, fuzzy
msgid ""
"The following example demonstrates the basic mechanisms of a :class:"
"`~multiprocessing.managers.SharedMemoryManager`:"
msgstr ""
"El siguiente ejemplo muestra los mecanismos básicos de :class:"
"`SharedMemoryManager`:"

#: ../Doc/library/multiprocessing.shared_memory.rst:246
msgid ""
">>> from multiprocessing.managers import SharedMemoryManager\n"
">>> smm = SharedMemoryManager()\n"
">>> smm.start()  # Start the process that manages the shared memory blocks\n"
">>> sl = smm.ShareableList(range(4))\n"
">>> sl\n"
"ShareableList([0, 1, 2, 3], name='psm_6572_7512')\n"
">>> raw_shm = smm.SharedMemory(size=128)\n"
">>> another_sl = smm.ShareableList('alpha')\n"
">>> another_sl\n"
"ShareableList(['a', 'l', 'p', 'h', 'a'], name='psm_6572_12221')\n"
">>> smm.shutdown()  # Calls unlink() on sl, raw_shm, and another_sl"
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:261
#, fuzzy
msgid ""
"The following example depicts a potentially more convenient pattern for "
"using :class:`~multiprocessing.managers.SharedMemoryManager` objects via "
"the :keyword:`with` statement to ensure that all shared memory blocks are "
"released after they are no longer needed:"
msgstr ""
"El siguiente ejemplo muestra un patrón más conveniente para usar un objeto :"
"class:`SharedMemoryManager` con la sentencia :keyword:`with` para asegurarse "
"de que todos los bloques de memoria se liberen cuando ya no son necesarios. "
"Esto suele ser más práctico que el ejemplo anterior:"

#: ../Doc/library/multiprocessing.shared_memory.rst:266
msgid ""
">>> with SharedMemoryManager() as smm:\n"
"...     sl = smm.ShareableList(range(2000))\n"
"...     # Divide the work among two processes, storing partial results in "
"sl\n"
"...     p1 = Process(target=do_work, args=(sl, 0, 1000))\n"
"...     p2 = Process(target=do_work, args=(sl, 1000, 2000))\n"
"...     p1.start()\n"
"...     p2.start()  # A multiprocessing.Pool might be more efficient\n"
"...     p1.join()\n"
"...     p2.join()   # Wait for all work to complete in both processes\n"
"...     total_result = sum(sl)  # Consolidate the partial results now in sl"
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:280
#, fuzzy
msgid ""
"When using a :class:`~multiprocessing.managers.SharedMemoryManager` in a :"
"keyword:`with` statement, the shared memory blocks created using that "
"manager are all released when the :keyword:`!with` statement's code block "
"finishes execution."
msgstr ""
"Cuando se utiliza un :class:`SharedMemoryManager` en una sentencia :keyword:"
"`with`, los bloques de memoria compartida creados por ese administrador se "
"liberan cuando la sentencias dentro del bloque de código :keyword:`with` "
"finaliza la ejecución."

#: ../Doc/library/multiprocessing.shared_memory.rst:288
msgid ""
"Provide a mutable list-like object where all values stored within are stored "
"in a shared memory block. This constrains storable values to the following "
"built-in data types:"
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:292
msgid ":class:`int` (signed 64-bit)"
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:293
msgid ":class:`float`"
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:294
msgid ":class:`bool`"
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:295
msgid ":class:`str` (less than 10M bytes each when encoded as UTF-8)"
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:296
msgid ":class:`bytes` (less than 10M bytes each)"
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:297
msgid "``None``"
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:299
msgid ""
"It also notably differs from the built-in :class:`list` type in that these "
"lists can not change their overall length (i.e. no :meth:`!append`, :meth:`!"
"insert`, etc.) and do not support the dynamic creation of new :class:`!"
"ShareableList` instances via slicing."
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:305
#, fuzzy
msgid ""
"*sequence* is used in populating a new :class:`!ShareableList` full of "
"values. Set to ``None`` to instead attach to an already existing :class:`!"
"ShareableList` by its unique shared memory name."
msgstr ""
"*sequence* se utiliza para completar una nueva ``ShareableList`` con "
"valores. Establezca en ``None`` para registrar en su lugar una "
"``ShareableList`` ya existente por su nombre único de memoria compartida."

#: ../Doc/library/multiprocessing.shared_memory.rst:309
#, fuzzy
msgid ""
"*name* is the unique name for the requested shared memory, as described in "
"the definition for :class:`SharedMemory`.  When attaching to an existing :"
"class:`!ShareableList`, specify its shared memory block's unique name while "
"leaving *sequence* set to ``None``."
msgstr ""
"*name* es el nombre único para la memoria compartida solicitada, como se "
"describe en la definición de :class:`SharedMemory`. Al adjuntar a una "
"``ShareableList`` existente, especifique el nombre único de su bloque de "
"memoria compartida mientras deja ``sequence`` establecida en ``None``."

#: ../Doc/library/multiprocessing.shared_memory.rst:316
#, fuzzy
msgid ""
"A known issue exists for :class:`bytes` and :class:`str` values. If they end "
"with ``\\x00`` nul bytes or characters, those may be *silently stripped* "
"when fetching them by index from the :class:`!ShareableList`. This ``."
"rstrip(b'\\x00')`` behavior is considered a bug and may go away in the "
"future. See :gh:`106939`."
msgstr ""
"Existe un problema conocido para valores :class:`bytes` y :class:`str`. Si "
"terminan con bytes o caracteres nulos ``\\x00``, éstos pueden ser "
"*eliminados silenciosamente* al obtenerlos por índice desde la :class:"
"`ShareableList`. Este comportamiento ``.rstrip(b'\\x00')`` se considera un "
"error y podría desaparecer en el futuro. Ver :gh:`106939`."

#: ../Doc/library/multiprocessing.shared_memory.rst:322
msgid ""
"For applications where rstripping of trailing nulls is a problem, work "
"around it by always unconditionally appending an extra non-0 byte to the end "
"of such values when storing and unconditionally removing it when fetching:"
msgstr ""
"Para aplicaciones donde eliminar espacios nulos finales es un problema, "
"solucionarlo añadiendo siempre incondicionalmente un byte extra que no sea 0 "
"al final de dichos valores al almacenar y eliminándolo incondicionalmente al "
"recuperarlos."

#: ../Doc/library/multiprocessing.shared_memory.rst:327
msgid ""
">>> from multiprocessing import shared_memory\n"
">>> nul_bug_demo = shared_memory.ShareableList(['?\\x00', "
"b'\\x03\\x02\\x01\\x00\\x00\\x00'])\n"
">>> nul_bug_demo[0]\n"
"'?'\n"
">>> nul_bug_demo[1]\n"
"b'\\x03\\x02\\x01'\n"
">>> nul_bug_demo.shm.unlink()\n"
">>> padded = shared_memory.ShareableList(['?\\x00\\x07', "
"b'\\x03\\x02\\x01\\x00\\x00\\x00\\x07'])\n"
">>> padded[0][:-1]\n"
"'?\\x00'\n"
">>> padded[1][:-1]\n"
"b'\\x03\\x02\\x01\\x00\\x00\\x00'\n"
">>> padded.shm.unlink()"
msgstr ""

#: ../Doc/library/multiprocessing.shared_memory.rst:345
#, fuzzy
msgid "Return the number of occurrences of *value*."
msgstr "Retorna el número de ocurrencias de ``value``."

#: ../Doc/library/multiprocessing.shared_memory.rst:349
#, fuzzy
msgid ""
"Return first index position of *value*. Raise :exc:`ValueError` if *value* "
"is not present."
msgstr ""
"Retorna la primera posición del índice de ``value``. Lanza :exc:`ValueError` "
"si ``value`` no está presente."

#: ../Doc/library/multiprocessing.shared_memory.rst:354
msgid ""
"Read-only attribute containing the :mod:`struct` packing format used by all "
"currently stored values."
msgstr ""
"Atributo de solo lectura que contiene el formato de empaquetado :mod:"
"`struct` utilizado por todos los valores almacenados actualmente."

#: ../Doc/library/multiprocessing.shared_memory.rst:359
msgid "The :class:`SharedMemory` instance where the values are stored."
msgstr "La instancia de :class:`SharedMemory` donde se almacenan los valores."

#: ../Doc/library/multiprocessing.shared_memory.rst:362
msgid ""
"The following example demonstrates basic use of a :class:`ShareableList` "
"instance:"
msgstr ""
"El siguiente ejemplo muestra el uso básico de una instancia :class:"
"`ShareableList`:"

#: ../Doc/library/multiprocessing.shared_memory.rst:395
msgid ""
"The following example depicts how one, two, or many processes may access the "
"same :class:`ShareableList` by supplying the name of the shared memory block "
"behind it:"
msgstr ""
"El siguiente ejemplo muestra cómo uno, dos o muchos procesos pueden acceder "
"al mismo :class:`ShareableList` al proporcionar el nombre del bloque de "
"memoria compartida detrás de él:"

#: ../Doc/library/multiprocessing.shared_memory.rst:410
#, fuzzy
msgid ""
"The following examples demonstrates that :class:`ShareableList` (and "
"underlying :class:`SharedMemory`) objects can be pickled and unpickled if "
"needed. Note, that it will still be the same shared object. This happens, "
"because the deserialized object has the same unique name and is just "
"attached to an existing object with the same name (if the object is still "
"alive):"
msgstr ""
"El siguiente ejemplo demuestra que los objetos ``ShareableList`` (y de forma "
"implícita ``SharedMemory``) pueden ser serializados (*pickled*) y "
"deserializados (*unpickled*) si es que se necesitan. Nota, Este va a seguir "
"siendo el mismo objeto compartido. Esto sucede, porque el objeto "
"deserializado tiene el mismo nombre único y simplemente se adjunta a un "
"objeto existente con el mismo nombre (si el objeto todavía sigue vivo):"

#: ../Doc/library/multiprocessing.shared_memory.rst:11
msgid "Shared Memory"
msgstr "Memoria Compartida"

#: ../Doc/library/multiprocessing.shared_memory.rst:11
msgid "POSIX Shared Memory"
msgstr "Memoria Compartida POSIX"

#: ../Doc/library/multiprocessing.shared_memory.rst:11
msgid "Named Shared Memory"
msgstr "Memoria Compartida Nombrada"
