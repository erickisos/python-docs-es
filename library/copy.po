# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to get
# the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-21 16:38-0300\n"
"PO-Revision-Date: 2023-10-18 19:42-0500\n"
"Last-Translator: Cristian Danilo Rengifo Parra <ingcrengifo@gmail.com>\n"
"Language: es_CO\n"
"Language-Team: python-doc-es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../Doc/library/copy.rst:2
#, fuzzy
msgid ":mod:`!copy` --- Shallow and deep copy operations"
msgstr ":mod:`copy` --- Operaciones de copia superficial y profunda"

#: ../Doc/library/copy.rst:7
msgid "**Source code:** :source:`Lib/copy.py`"
msgstr "**Código fuente:** :source:`Lib/copy.py`"

#: ../Doc/library/copy.rst:11
msgid ""
"Assignment statements in Python do not copy objects, they create bindings "
"between a target and an object. For collections that are mutable or contain "
"mutable items, a copy is sometimes needed so one can change one copy without "
"changing the other. This module provides generic shallow and deep copy "
"operations (explained below)."
msgstr ""
"Las declaraciones de asignación en Python no copian objetos, crean enlaces "
"entre un objetivo y un objeto. Para colecciones que son mutables o que "
"contienen elementos mutables, a veces se necesita una copia para que uno "
"pueda cambiar una copia sin cambiar la otra. Este módulo proporciona "
"operaciones genéricas de copia superficial y profunda (explicadas a "
"continuación)."

#: ../Doc/library/copy.rst:18
msgid "Interface summary:"
msgstr "Resumen de la interfaz:"

#: ../Doc/library/copy.rst:22
#, fuzzy
msgid "Return a shallow copy of *obj*."
msgstr "Retorna una copia superficial de *x*."

#: ../Doc/library/copy.rst:27
#, fuzzy
msgid "Return a deep copy of *obj*."
msgstr "Retorna una copia profunda de *x*."

#: ../Doc/library/copy.rst:32
msgid ""
"Creates a new object of the same type as *obj*, replacing fields with values "
"from *changes*."
msgstr ""

#: ../Doc/library/copy.rst:40
msgid "Raised for module specific errors."
msgstr "Levantado para errores específicos del módulo."

#: ../Doc/library/copy.rst:44
msgid ""
"The difference between shallow and deep copying is only relevant for "
"compound objects (objects that contain other objects, like lists or class "
"instances):"
msgstr ""
"La diferencia entre copia superficial y profunda solo es relevante para "
"objetos compuestos (objetos que contienen otros objetos, como listas o "
"instancias de clase):"

#: ../Doc/library/copy.rst:47
msgid ""
"A *shallow copy* constructs a new compound object and then (to the extent "
"possible) inserts *references* into it to the objects found in the original."
msgstr ""
"Una copia superficial (*shallow copy*) construye un nuevo objeto compuesto y "
"luego (en la medida de lo posible) inserta *references* en él a los objetos "
"encontrados en el original."

#: ../Doc/library/copy.rst:50
msgid ""
"A *deep copy* constructs a new compound object and then, recursively, "
"inserts *copies* into it of the objects found in the original."
msgstr ""
"Una copia profunda (*deep copy*) construye un nuevo objeto compuesto y "
"luego, recursivamente, inserta *copias* en él de los objetos encontrados en "
"el original."

#: ../Doc/library/copy.rst:53
msgid ""
"Two problems often exist with deep copy operations that don't exist with "
"shallow copy operations:"
msgstr ""
"A menudo existen dos problemas con las operaciones de copia profunda que no "
"existen con las operaciones de copia superficial:"

#: ../Doc/library/copy.rst:56
msgid ""
"Recursive objects (compound objects that, directly or indirectly, contain a "
"reference to themselves) may cause a recursive loop."
msgstr ""
"Los objetos recursivos (objetos compuestos que, directa o indirectamente, "
"contienen una referencia a sí mismos) pueden causar un bucle recursivo."

#: ../Doc/library/copy.rst:59
msgid ""
"Because deep copy copies everything it may copy too much, such as data which "
"is intended to be shared between copies."
msgstr ""
"Debido a que la copia profunda copia todo, puede copiar demasiado, como los "
"datos que deben compartirse entre copias."

#: ../Doc/library/copy.rst:62
msgid "The :func:`deepcopy` function avoids these problems by:"
msgstr "La función :func:`deepcopy` evita estos problemas al:"

#: ../Doc/library/copy.rst:64
msgid ""
"keeping a ``memo`` dictionary of objects already copied during the current "
"copying pass; and"
msgstr ""
"mantener un diccionario ``memo`` de objetos ya copiados durante la "
"aprobación de copia actual; y"

#: ../Doc/library/copy.rst:67
msgid ""
"letting user-defined classes override the copying operation or the set of "
"components copied."
msgstr ""
"permitiendo que las clases definidas por el usuario anulen la operación de "
"copia o el conjunto de componentes copiados."

#: ../Doc/library/copy.rst:70
msgid ""
"This module does not copy types like module, method, stack trace, stack "
"frame, file, socket, window, or any similar types.  It does \"copy\" "
"functions and classes (shallow and deeply), by returning the original object "
"unchanged; this is compatible with the way these are treated by the :mod:"
"`pickle` module."
msgstr ""
"Este módulo no copia tipos como módulo, método, seguimiento de pila, marco "
"de pila, archivo, socket, ventana,  o cualquier tipo similar.  Sí \"copia\" "
"funciones y clases (superficiales y profundas), retornando el objeto "
"original sin cambios; Esto es compatible con la forma en que son tratados "
"por el módulo :mod:`pickle`."

#: ../Doc/library/copy.rst:75
msgid ""
"Shallow copies of dictionaries can be made using :meth:`dict.copy`, and of "
"lists by assigning a slice of the entire list, for example, ``copied_list = "
"original_list[:]``."
msgstr ""
"Se pueden hacer copias superficiales de los diccionarios usando :meth:`dict."
"copy`, y de las listas mediante la asignación de una porción de la lista "
"completa, por ejemplo, ``lista_copiada = lista_original[:]``."

#: ../Doc/library/copy.rst:81
msgid ""
"Classes can use the same interfaces to control copying that they use to "
"control pickling.  See the description of module :mod:`pickle` for "
"information on these methods.  In fact, the :mod:`copy` module uses the "
"registered pickle functions from the :mod:`copyreg` module."
msgstr ""
"Las clases pueden usar las mismas interfaces para controlar la copia que "
"usan para controlar el *pickling*. Consulte la descripción del módulo :mod:"
"`pickle` para obtener información sobre estos métodos. De hecho, el módulo :"
"mod:`copy` utiliza las funciones de *pickle* registradas del módulo :mod:"
"`copyreg`."

#: ../Doc/library/copy.rst:92
msgid ""
"In order for a class to define its own copy implementation, it can define "
"special methods :meth:`~object.__copy__` and :meth:`~object.__deepcopy__`."
msgstr ""

#: ../Doc/library/copy.rst:98
msgid ""
"Called to implement the shallow copy operation; no additional arguments are "
"passed."
msgstr ""

#: ../Doc/library/copy.rst:104
#, fuzzy
msgid ""
"Called to implement the deep copy operation; it is passed one argument, the "
"*memo* dictionary.  If the ``__deepcopy__`` implementation needs to make a "
"deep copy of a component, it should call the :func:`~copy.deepcopy` function "
"with the component as first argument and the *memo* dictionary as second "
"argument. The *memo* dictionary should be treated as an opaque object."
msgstr ""
"Para que una clase pueda definir su propia implementación de copia, puede "
"definir métodos especiales :meth:`__copy__` y :meth:`__deepcopy__`. El "
"primero se llama para implementar la operación de copia superficial; no se "
"pasan argumentos adicionales. El segundo es llamado para implementar la "
"operación de copia profunda; se le pasa un argumento, el diccionario "
"``memo``. Si la implementación de :meth:`__deepcopy__` necesita hacer una "
"copia profunda de un componente, debe llamar a la función :func:`deepcopy` "
"con el componente como primer argumento y el diccionario memo como segundo "
"argumento. El diccionario de notas debe tratarse como un objeto opcional."

#: ../Doc/library/copy.rst:114
msgid ""
"Function :func:`!copy.replace` is more limited than :func:`~copy.copy` and :"
"func:`~copy.deepcopy`, and only supports named tuples created by :func:"
"`~collections.namedtuple`, :mod:`dataclasses`, and other classes which "
"define method :meth:`~object.__replace__`."
msgstr ""

#: ../Doc/library/copy.rst:122
msgid ""
"This method should create a new object of the same type, replacing fields "
"with values from *changes*."
msgstr ""

#: ../Doc/library/copy.rst:129
msgid "Module :mod:`pickle`"
msgstr "Módulo :mod:`pickle`"

#: ../Doc/library/copy.rst:129
msgid ""
"Discussion of the special methods used to support object state retrieval and "
"restoration."
msgstr ""
"Discusión de los métodos especiales utilizados para apoyar la recuperación y "
"restauración del estado del objeto."

#: ../Doc/library/copy.rst:79
msgid "module"
msgstr "módulo"

#: ../Doc/library/copy.rst:79
msgid "pickle"
msgstr "pickle"

#: ../Doc/library/copy.rst:86
msgid "__copy__() (copy protocol)"
msgstr "__copy__() (protocolo de copia)"

#: ../Doc/library/copy.rst:86
msgid "__deepcopy__() (copy protocol)"
msgstr "__deepcopy__() (protocolo de copia)"

#: ../Doc/library/copy.rst:111
#, fuzzy
msgid "__replace__() (replace protocol)"
msgstr "__deepcopy__() (protocolo de copia)"
